{
    "quiz": [
        {
            "question_id": 34,
            "material": "OOP",
            "instruction": "Design a class in Python that models a customer with the following properties",
            "question": "class ___:\r\n    def __init__(self,name, email, phone_number, address):\r\n        self.name = name\r\n        self.email = email\r\n        self.phone_number = phone_number\r\n        self.address = address",
            "correct_answer": "Customer",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 595,
            "material": "OOP",
            "instruction": "Create a class in Python that represents a given animal object.",
            "question": "class ___:\r\n    def __init__(self):\r\n        self.name = \"\"\r\n        self.colour = \"\"\r\n        self.age = 0\r\n        self.breed = \"\"\r\n\r\n    def meow(self):\r\n        print(self.name, \"says meow!\")",
            "correct_answer": "Cat",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 836,
            "material": "OOP",
            "instruction": "Extend a Python class to create another class with similar behavior.",
            "question": "class ___(Vehicle):\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.num_wheels = 2\r\n        self.type = 'motorcycle'\r\n\r\n    def accelerate(self):\r\n        self.speed += 10\r\n\r\n    def brake(self):\r\n        self.speed = max(self.speed - 7, 0)",
            "correct_answer": "Motorcycle",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1386,
            "material": "OOP",
            "instruction": "Edit the following Python class such that it can accept a variable number of parameters.",
            "question": "class ___:\r\n    def __init__(self, *args):\r\n        self.name = args[0]\r\n        self.age = args[1]\r\n        self.weight = args[2]",
            "correct_answer": "Person",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1520,
            "material": "OOP",
            "instruction": "Write Python code to implement a class like this.",
            "question": "class ___: \r\n    def __init__(self, name, age):\r\n        self.name = name \r\n        self.age = age \r\n    \r\n     def __str__(self): \r\n        return \"Employee({0}, {1})\".format(self.name,self.age) \r\n \r\nemp = Employee(\"John\", 24) \r\nprint(emp)",
            "correct_answer": "Employee",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1781,
            "material": "OOP",
            "instruction": "Generate a class in Python using the parameters provided in the following Input section.",
            "question": "class ___:\r\n    def __init__(self, Name, Age, Gender):\r\n        self.Name = Name\r\n        self.Age = Age\r\n        self.Gender = Gender",
            "correct_answer": "Person",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1797,
            "material": "OOP",
            "instruction": "Transform the code snippet into a Python class.",
            "question": "class ___:\r\n    def __init__(self):\r\n        pass\r\n\r\n    def multiply(self, x, y):\r\n        return x * y",
            "correct_answer": "Calculator",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1871,
            "material": "OOP",
            "instruction": "Generate a new Python class which extends some existing class, but with a modified constructor.",
            "question": "class ___(A):\r\n    def __init__(self, param1, param2, param3):\r\n        super().__init__(param1, param2)\r\n        self.param3 = param3",
            "correct_answer": "B",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2023,
            "material": "OOP",
            "instruction": "Complete the Python class below so that it can calculate the sum of two integers.",
            "question": "class ___:\r\n    def __init__(self, x, y):\r\n        self.x = x\r\n        self.y = y\r\n        \r\n    def add(self):\r\n        return self.x + self.y",
            "correct_answer": "Sum",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2112,
            "material": "OOP",
            "instruction": "Write a Python class to represent a polynomial of degree n.",
            "question": "class ___:\r\n    def __init__(self, coeff):\r\n        self.coeff = coeff\r\n\r\n    def __call__(self, x):\r\n        result = 0\r\n        for idx, c in enumerate(self.coeff):\r\n            result += c * x ** idx\r\n        return result",
            "correct_answer": "Polynomial",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2201,
            "material": "OOP",
            "instruction": "What is the purpose of the method in line 4 of the code?",
            "question": "The purpose of the method ___ line 4 is to generate a random number within the given range of min and max. It uses the Python's random.range() method which returns a random integer from the range of min to max, inclusive.",
            "correct_answer": "in",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2208,
            "material": "OOP",
            "instruction": "using the following Json as an example, write a Python program that reads this Json into an object.",
            "question": "import json\r\n\r\n# example data\r\ndata = '{\"id\":1,\"name\":\"Testing\",\"description\":\"This is a test\"}'\r\n\r\n# parse data into a Python object ___ = json.loads(data)\r\n\r\nprint(obj)",
            "correct_answer": "obj",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2282,
            "material": "OOP",
            "instruction": "Create a class in Python that takes two arguments a 'name' and 'age' and returns a greeting.",
            "question": "class ___:\r\n    def __init__(self, name, age):\r\n        self.name = name\r\n        self.age = age\r\n    \r\n    def get_greeting(self):\r\n        return f\"Hello, my name is {self.name} and I am {self.age} years old.\"",
            "correct_answer": "Greeting",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2456,
            "material": "OOP",
            "instruction": "Construct a Python class that takes a given number and calculates the sum of the digits.",
            "question": "class ___:\r\n    \r\n    def __init__(self, num):\r\n        self.num = num\r\n    \r\n    def calculate_sum_of_digits(self):\r\n        total = 0\r\n        for ch in str(self.num):\r\n            total += int(ch)\r\n        return total\r\n\r\ndigit_sum = SumOfDigits(6342)\r\nresult = digit_sum.calculate_sum_of_digits()\r\nprint(result)",
            "correct_answer": "SumOfDigits",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2520,
            "material": "OOP",
            "instruction": "Create a python class that simulates an invoice with information about the item and the cost.",
            "question": "class ___:\r\n    def __init__(self, item, price):\r\n        self.item = item\r\n        self.price = price\r\n    \r\n    def get_item(self):\r\n        return self.item\r\n    \r\n    def get_price(self):\r\n        return self.price\r\n\r\ninvoice = Invoice(\"Pen\", 3)",
            "correct_answer": "Invoice",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2577,
            "material": "OOP",
            "instruction": "Design a class in Python to store details of a person",
            "question": "class ___:\r\n    def __init__(self, name, age):\r\n        self.name = name\r\n        self.age = age\r\n\r\nperson = Person('John', 34)",
            "correct_answer": "Person",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2782,
            "material": "OOP",
            "instruction": "Design a class in Python to represent a circle.",
            "question": "class ___:\r\n    \"\"\"Class to represent a circle.\"\"\"\r\n    def __init__(self, radius):\r\n        \"\"\"Initialize the circle.\"\"\"\r\n        self.radius = radius\r\n\r\n    def get_area(self):\r\n        \"\"\"Calculate and return the area of the circle.\"\"\"\r\n        return 3.14 * self.radius * self.radius",
            "correct_answer": "Circle",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3142,
            "material": "OOP",
            "instruction": "Construct a Python class with the following atributes and methods.",
            "question": "class ___:\r\n    def __init__(self):\r\n        self.name = \"\"\r\n        self.ID = 0\r\n \r\n    def setName(self, name):\r\n        self.name = name\r\n    \r\n    def setID(self, ID):\r\n        self.ID = ID\r\n \r\n    def getName(self):\r\n        return self.name\r\n \r\n    def getID(self):\r\n        return self.ID",
            "correct_answer": "MyClass",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3380,
            "material": "OOP",
            "instruction": "Create a class in python that finds the sum of two numbers.",
            "question": "class ___:\r\n    def __init__(self, x, y):\r\n        self.x = x\r\n        self.y = y\r\n    \r\n    def find_sum(self):\r\n        return self.x + self.y\r\n        \r\nif __name__ == '__main__':\r\n    s = Sum(10, 5)\r\n    print(s.find_sum())",
            "correct_answer": "Sum",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3441,
            "material": "OOP",
            "instruction": "Create a class in Python to generate a calendar.",
            "question": "class ___(object):\r\n\r\n    def __init__(self, name):\r\n        self.name = name\r\n\r\n    def generate_calendar(self):\r\n        calendar = []\r\n\r\n        # Code to generate a calendar goes here\r\n\r\n        return calendar\r\n\r\ncalendar = CalendarGenerator(calendarName)\r\ncalendar.generate_calendar()",
            "correct_answer": "CalendarGenerator",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3483,
            "material": "OOP",
            "instruction": "Create a class in Python to handle the following Student object.",
            "question": "class ___:\r\n    def __init__(self, name, age, marks):\r\n        self.name = name\r\n        self.age = age\r\n        self.marks = marks\r\n        \r\n    def get_name(self):\r\n        return self.name\r\n    \r\n    def get_age(self):\r\n        return self.age\r\n    \r\n    def get_total_marks(self):\r\n        return sum(self.marks)",
            "correct_answer": "Student",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3924,
            "material": "OOP",
            "instruction": "Rewrite a given Java class using Python syntax.",
            "question": "class ___:\r\n def __init__(self, x, y):\r\n  self.x = x\r\n  self.y = y",
            "correct_answer": "MyClass",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3963,
            "material": "OOP",
            "instruction": "Create a Python class with the given attributes and functions.",
            "question": "class ___:\r\n    \r\n    def __init__(self, name, age, email):\r\n        self.name = name\r\n        self.age = age\r\n        self.email = email\r\n    \r\n    def toString(self):\r\n        return f\"Name: {self.name}, Age: {self.age}, Email: {self.email}\"",
            "correct_answer": "Person",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4017,
            "material": "OOP",
            "instruction": "Generate a class in Python that can store the following data",
            "question": "class ___:\r\n    def __init__(self, month, calories, minutes):\r\n        self.month = month\r\n        self.calories = calories\r\n        self.minutes = minutes",
            "correct_answer": "HealthData",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4276,
            "material": "OOP",
            "instruction": "Develop an object orientated program in Python to generate random numbers.",
            "question": "import random\r\n\r\nclass ___:\r\n    def __init__(self, low, high):\r\n        self.low = low\r\n        self.high = high\r\n    \r\n    def generate_rand_num(self):\r\n        return random.randint(self.low, self.high)\r\n\r\nif __name__ == '__main__':\r\n    gen = RandNumGenerator(10, 50)\r\n    print(gen.generate_rand_num())",
            "correct_answer": "RandNumGenerator",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4291,
            "material": "OOP",
            "instruction": "Create a class in Python that can represent a 3D point with the given fields.",
            "question": "class ___:\r\n  def __init__(self, x, y, z):\r\n    self.x = x\r\n    self.y = y\r\n    self.z = z\r\n\r\n  def __str__(self):\r\n    return 'Point3D is at {x}, {y}, {z}'.format(x = self.x, y = self.y, z = self.z)",
            "correct_answer": "Point3D",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4321,
            "material": "OOP",
            "instruction": "Create a class in Python which takes an employee name and salary as parameters and prints them.",
            "question": "class ___:\r\n    def __init__(self, name, salary):\r\n        self.name = name\r\n        self.salary = salary\r\n    \r\n    def print_employee_details(self):\r\n        print('Employee Name: {}, Salary: {}'.format(self.name, self.salary))\r\n\r\nemployee = Employee('John Smith', 5000)\r\nemployee.print_employee_details()",
            "correct_answer": "Employee",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4340,
            "material": "OOP",
            "instruction": "Format a numerical table of data into a JSON object in Python.",
            "question": "Assuming the numerical table of data is stored in a 2D list data, a function to format it into a JSON object ___ be written as follows:\r\n\r\nimport json\r\ndef formatData2JSON(data):\r\n    json_formatted_data = json.dumps(data)\r\n    return json_formatted_data",
            "correct_answer": "can",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4380,
            "material": "OOP",
            "instruction": "Design a class in Python that implements a stack",
            "question": "class ___:\r\n    def __init__(self):\r\n        self.items = []\r\n    \r\n    def isEmpty(self):\r\n        return self.items == []\r\n    \r\n    def push(self, item):\r\n        self.items.append(item)\r\n    \r\n    def pop(self):\r\n        return self.items.pop()\r\n    \r\n    def peek(self):\r\n        return self.items[len(self.items)-1]\r\n    \r\n    def size(self):\r\n        return len(self.items)",
            "correct_answer": "Stack",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4742,
            "material": "OOP",
            "instruction": "Design a python class to store fruit and its quantity in a grocery store.",
            "question": "class ___:\r\n    def __init__(self):\r\n        self.items = {\r\n            'Banana': 200,\r\n            'Orange': 300,\r\n            'Grapes': 500\r\n        }\r\n\r\n    def get_item_quantity(self, item):\r\n        return self.items.get(item)",
            "correct_answer": "FruitGrocery",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5493,
            "material": "OOP",
            "instruction": "Write a Python class that takes 2 strings as arguments and prints them out in a concatenated form.",
            "question": "class ___:\r\n    def __init__(self, string1, string2):\r\n        self.string1 = string1\r\n        self.string2 = string2\r\n\r\n    def print_concat(self):\r\n        print(self.string1 + self.string2)",
            "correct_answer": "ConcatStrings",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5552,
            "material": "OOP",
            "instruction": "Use the given data structure to create a python class.",
            "question": "class ___:\r\n    def __init__(self, data):\r\n        self.name = data['name']\r\n        self.age = data['age']\r\n        self.city = data['city']",
            "correct_answer": "Person",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5822,
            "material": "OOP",
            "instruction": "Create a Python class that has the following functionality.",
            "question": "class ___:\r\n    def containsVowels(self, s):\r\n        vowels = set('aeiouAEIOU')\r\n        for letter in s:\r\n            if letter in vowels:\r\n                return True\r\n        return False",
            "correct_answer": "StringChecker",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5908,
            "material": "OOP",
            "instruction": "Create a class in Python to represent a circle containing methods to calculate the area and circumference.",
            "question": "class ___:\r\n    def __init__(self, radius):\r\n        self.radius = radius\r\n\r\n    def area(self):\r\n        return 3.14 * self.radius * self.radius\r\n\r\n    def circumference(self):\r\n        return 2 * 3.14 * self.radius",
            "correct_answer": "Circle",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5925,
            "material": "OOP",
            "instruction": "Develop a Python class to represent an employee with name, position and salary.",
            "question": "class ___:\r\n    def __init__(self, name, position, salary):\r\n        self.name = name\r\n        self.position = position\r\n        self.salary = salary\r\n\r\njohn = Employee('John', 'Software Engineer', 6000)",
            "correct_answer": "Employee",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6033,
            "material": "OOP",
            "instruction": "Write a Python program to generate a Python Class using the given description.",
            "question": "class ___:\r\n def __init__(self, name, age, height):\r\n self.name = name\r\n self.age = age\r\n self.height = height\r\n \r\n def get_name(self):\r\n return self.name\r\n \r\n def get_age(self):\r\n return self.age\r\n \r\n def get_height(self):\r\nreturn self.height",
            "correct_answer": "Person",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6218,
            "material": "OOP",
            "instruction": "Create a class in Python that inherits from the given base class, and implements the given interface.",
            "question": "class ___:\r\n    def __init__(self, name):\r\n        self.name = name\r\n\r\nclass Cat(Animal):\r\n    def eat(self, food):\r\n        print(\"{} is eating {}!\".format(self.name, food))",
            "correct_answer": "Animal",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6277,
            "material": "OOP",
            "instruction": "Develop a class in Python to keep track of stock prices",
            "question": "class ___:\r\n  def __init__(self, symbol):\r\n    self.symbol = symbol\r\n    self.prices = []\r\n \r\n  def add_price(self, price):\r\n    self.prices.append(price)\r\n \r\n  def get_prices(self):\r\n    return self.prices\r\n      \r\nAAPL = Stock('AAPL')\r\nAAPL.add_price(191.43)\r\nAAPL.add_price(193.57)\r\nAAPL.add_price(190.08)\r\nAAPL.get_prices()",
            "correct_answer": "Stock",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6549,
            "material": "OOP",
            "instruction": "Generate a class in Python with the given properties and methods.",
            "question": "class ___:\r\n    def __init__(self, name, age):\r\n        self.name = name\r\n        self.age = age\r\n\r\n    def getInfo(self):\r\n        return \"Name: {}, Age: {}\".format(self.name, self.age)",
            "correct_answer": "Student",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6614,
            "material": "OOP",
            "instruction": "Write a class definition in python that will initialize an object of the class with given parameters",
            "question": "class ___:\r\n    def __init__(self, name, age):\r\n        self.name = name\r\n        self.age = age",
            "correct_answer": "Person",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6690,
            "material": "OOP",
            "instruction": "Generate a Python code to create a class which creates an empty dictionary with the given keys.",
            "question": "class ___:\r\n    def __init__(self, keys):\r\n        self.keys = [k.strip() for k in keys.split(\",\")]\r\n        self.dictionary = {k: None for k in self.keys}\r\n            \r\n    def get_dictionary(self):\r\n        return self.dictionary",
            "correct_answer": "EmptyDictionary",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6757,
            "material": "OOP",
            "instruction": "Write a class that implements the singleton pattern in Python.",
            "question": "class ___:\r\n    instance = None\r\n\r\n    @staticmethod\r\n    def get_instance():\r\n        if Singleton.instance is None:\r\n            Singleton.instance = Singleton()\r\n        return Singleton.instance",
            "correct_answer": "Singleton",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6800,
            "material": "OOP",
            "instruction": "Provide a valid Python class definition that uses the below given values.",
            "question": "class ___:\r\n    def __init__(self, speed, color):\r\n        self.speed = speed\r\n        self.color = color\r\n\r\n    def set_speed(self, speed):\r\n        self.speed = speed\r\n    \r\n    def set_color(self, color):\r\n        self.color = color",
            "correct_answer": "Automobile",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6889,
            "material": "OOP",
            "instruction": "Develop a class in Python to optimize the existing code.",
            "question": "class ___():\r\n  def __init__(self, message):\r\n    self.message = message\r\n    \r\n  def display_message(self):\r\n    print(self.message)\r\n    \r\nmessage = input('Enter a message: ')\r\ndisplay_obj = Display(message)\r\ndisplay_obj.display_message()",
            "correct_answer": "Display",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7182,
            "material": "OOP",
            "instruction": "Create a class in Python to store user information with the given attributes.",
            "question": "class ___:\r\n    def __init__(self, username, email, profile_picture):\r\n        self.username = username\r\n        self.email = email\r\n        self.profile_picture = profile_picture",
            "correct_answer": "UserInformation",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7206,
            "material": "OOP",
            "instruction": "Use a given class to deserialize a JSON response into a Python dictionary.",
            "question": "class ___(Deserializer):\r\n    def deserialize(self, response):\r\n        return json.loads(response)\r\n\r\ndeserializer = MyDeserializer()\r\ndeserialized_data = deserializer.deserialize(response)\r\n\r\nprint(deserialized_data)",
            "correct_answer": "MyDeserializer",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7267,
            "material": "OOP",
            "instruction": "Generate a Python class with the following variables.",
            "question": "class ___:\r\n  def __init__(self, name, job, age):\r\n    self.name = name\r\n    self.job = job\r\n    self.age = age",
            "correct_answer": "Person",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7364,
            "material": "OOP",
            "instruction": "Generate a valid python class that captures person information",
            "question": "class ___:\r\n    def __init__(self, name, age, gender, nationality):\r\n        self.name = name\r\n        self.age = age\r\n        self.gender = gender\r\n        self.nationality = nationality\r\n \r\n    def __str__(self):\r\n        return 'Name: {}\\nAge: {}\\nGender: {}\\nNationality: {}'.format(\r\n            self.name, self.age, self.gender, self.nationality)",
            "correct_answer": "Person",
            "attempts": "1",
            "duration": "20"
        }
    ]
}