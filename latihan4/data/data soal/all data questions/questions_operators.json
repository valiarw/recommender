{
    "quiz": [
        {
            "question_id": 60,
            "material": "Operator",
            "instruction": "Create a for-loop in Python and use it to find the sum of a list of integers.",
            "question": "total = ___\r\nfor num in [1, 4, 9, 16, 25]:\r\n  total += num\r\nprint(total)",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 104,
            "material": "Operator",
            "instruction": "Write a Python code to generate the Fibonacci sequence up to n-th number.",
            "question": "def fibonacciSequence(n): \r\n    fibSequence = []\r\n    a, b = ___, 1\r\n    while b < n:\r\n        fibSequence.append(b)\r\n        a, b = b, a + b\r\n    return fibSequence\r\n\r\nn = 7\r\n\r\nprint(fibonacciSequence(n)) // [1, 1, 2, 3, 5]",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 115,
            "material": "Operator",
            "instruction": "Create a function to calculate the midpoint between two 3-dimensional points using Python.",
            "question": "def midpoint3D(point1, point2): \r\n    x_mid = (point1[0] + ___[0]) / 2\r\n    y_mid = (point1[1] + point2[1]) / 2\r\n    z_mid = (point1[2] + point2[2]) / 2\r\n    return [x_mid, y_mid, z_mid]\r\n\r\npoint1 = [35.0, 43.0, 81.0]\r\npoint2 = [82.0, 54.0, 19.0]\r\nmidpoint = midpoint3D(point1, point2)\r\nprint(midpoint) # [58.5, 48.5, 50.0]",
            "correct_answer": "point2",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 127,
            "material": "Operator",
            "instruction": "Edit the given Python code to reverse the order of the letters in a string without using any in-built string functions.",
            "question": "def reverse_string(string):\r\n    reversed_string = \"\"\r\n    for i in range(len(string) - ___, -1, -1):\r\n        reversed_string += string[i]\r\n    return reversed_string\r\n\r\nstring = \"Hello World!\" \r\nreverse_string(string)",
            "correct_answer": "1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 137,
            "material": "Operator",
            "instruction": "Write a Python program to convert a timestamp (in seconds) to a date format (dd-mm-yyyy).",
            "question": "import datetime\r\n\r\n# Function to convert the timestamp \r\ndef getDateTime(timestamp):\r\n return datetime.datetime.fromtimestamp(timestamp).strftime(\"%d-%m-%Y\")\r\n\r\n# Driver program\r\ntimestamp = ___\r\nprint(getDateTime(timestamp))\r\n# Output: 17-06-2020",
            "correct_answer": "1591123259",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 139,
            "material": "Operator",
            "instruction": "Convert the below pseudo-code into valid Python code.",
            "question": "x = ___\r\n\r\nwhile x < 10:\r\n    x = x + 2\r\n    if x == 4:\r\n        continue\r\n    print(x)",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 193,
            "material": "Operator",
            "instruction": "Create a Python program that updates the dictionary with the new key-value pair.",
            "question": "dictionary = {'apple': 1, 'banana': 2, 'orange': 3}\r\nkey = 'mango'\r\nvalue = ___\r\n\r\ndictionary[key] = value\r\nprint(dictionary)\r\n# {'apple': 1, 'banana': 2, 'orange': 3, 'mango': 4}",
            "correct_answer": "4",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 244,
            "material": "Operator",
            "instruction": "Write an optimization function for finding the minimum of a two-dimensional scalar field in Python.",
            "question": "def findMin(scalarField):\r\n minVal = ___('inf')\r\n minInd = (-1, -1)\r\n for i in range(len(scalarField)):\r\n for j in range(len(scalarField[i])):\r\n val = scalarField[i][j]\r\n if val < minVal:\r\n minVal = val\r\n minInd = (i, j)\r\n return minInd",
            "correct_answer": "float",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 245,
            "material": "Operator",
            "instruction": "Create a Python program to validate user input. The program should take a string and only return \"valid\" if the string contains only the characters a-z, 0-9, and _ .",
            "question": "text_string = ___()\r\n\r\nvalid_characters = \"abcdefghijklmnopqrstuvwxyz0123456789_\"\r\n\r\nis_valid = True\r\n\r\nfor c in text_string:\r\n if c not in valid_characters:\r\n is_valid = False\r\n\r\nif is_valid:\r\n print \"Valid\"\r\nelse:\r\n print \"Invalid\"",
            "correct_answer": "input",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 296,
            "material": "Operator",
            "instruction": "De-duplicate the given list using a dictionary in Python?",
            "question": "input_list = [10, 20, 30, 10, 40, 20]\r\nunique_list = ___(dict.fromkeys(input_list))\r\nprint(unique_list)",
            "correct_answer": "list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 300,
            "material": "Operator",
            "instruction": "Write a code to generate a two-dimensional array with zeros shapes in Python",
            "question": "\"\"\"\r\nWrite a code to generate a two-dimensional array with zeros shapes in Python\r\n\"\"\"\r\n\r\ndef generate_zeros_array(row,col):\r\n    return [[0] * ___ for _ in range(row)]\r\n\r\n# Example\r\nrow = 3\r\ncol = 3\r\n\r\narray = generate_zeros_array(row, col)\r\nprint(array)\r\n# Output: [[0, 0, 0], [0, 0, 0], [0, 0, 0]]",
            "correct_answer": "col",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 302,
            "material": "Operator",
            "instruction": "Write a Python program to find the n-th smallest number in the following list",
            "question": "def nth_smallest(input_list, n):\r\n    input_list.sort()\r\n    return input_list[n-1]\r\n\r\ninput_list = [2, 3, 5, 7, 11]\r\nn = ___\r\nresult = nth_smallest(input_list, n)\r\nprint(result)",
            "correct_answer": "2",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 312,
            "material": "Operator",
            "instruction": "Create an auto-complete suggestion engine that takes in a prefix string and returns a set of valid words.",
            "question": "def auto_complete(prefix):\r\n    valid_words = []\r\n    words_list = ___()\r\n\r\n    for word in words_list:\r\n        if word.startswith(prefix):\r\n            valid_words.append(word)\r\n    return set(valid_words)\r\n\r\nprefix = 'pyth'\r\nprint(auto_complete(prefix))\r\n# Output: {'python', 'pythagorean', 'pythagoras', 'pythons'}",
            "correct_answer": "get_words_list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 339,
            "material": "Operator",
            "instruction": "Design a hash table in Python that can store a given key-value pair.",
            "question": "class HashTable:\r\n def __init__(self):\r\n self.table = {}\r\n\r\n def put(self, key, value):\r\n self.table[key] = ___\r\n\r\n def get(self, key):\r\n return self.table[key]\r\n\r\n# example\r\nhash_table = HashTable()\r\nhash_table.put('apple', 'red')\r\nhash_table.get('apple') # returns 'red'",
            "correct_answer": "value",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 416,
            "material": "Operator",
            "instruction": "Create a code snippet in Java to parse a comma-separated string into a list of strings.",
            "question": "String str = \"Ruby,Python,JavaScript\";\r\nList<String> ___ = Arrays.asList(str.split(\",\"));\r\n\r\n// Output \r\n// [Ruby,Python,JavaScript]",
            "correct_answer": "list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 436,
            "material": "Operator",
            "instruction": "Write a code to implement linear search in a 1-d array in Python.",
            "question": "def linearSearch(arr, target):\r\n    for i in range(len(arr)):\r\n        if arr[i] == ___:\r\n            return i\r\n    return -1\r\n\r\nprint(linearSearch([1,2,3,4], 3)) # Output: 2",
            "correct_answer": "target",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 447,
            "material": "Operator",
            "instruction": "Generate an algorithm in Python that sorts the given array of numbers in the non-decreasing order.",
            "question": "def bubble_sort(arr): \r\n    n = ___(arr)\r\n  \r\n    for i in range(n-1): \r\n        for j in range(0, n-i-1): \r\n            if arr[j] > arr[j+1] : \r\n                arr[j], arr[j+1] = arr[j+1], arr[j] \r\n  \r\narr = [1, 9, 3, 8, 4]\r\n\r\nbubble_sort(arr) \r\n\r\nprint (\"Sorted array is:\") \r\nfor i in range(len(arr)): \r\n    print (\"%d\" %arr[i])",
            "correct_answer": "len",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 456,
            "material": "Operator",
            "instruction": "Write a Python function to find all possible n-letter words from a given list of letters.",
            "question": "def find_words_length_n(letters, n):\r\n    words = ___()\r\n    for combo in itertools.combinations_with_replacement(letters, n):\r\n        for perm in itertools.permutations(combo):\r\n            words.add(\"\".join(perm))\r\n    return words\r\n\r\nwords = find_words_length_n([\"a\",\"b\",\"c\"], 2)\r\nprint(words)",
            "correct_answer": "set",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 493,
            "material": "Operator",
            "instruction": "Create a Python script to calculate and display the distance between two points in 2-dimensional space.",
            "question": "import math\r\n \r\ndef distance(p1,p2):\r\n x1,y1 = ___\r\n x2,y2 = p2\r\n d = math.sqrt((x2-x1)**2+(y2-y1)**2)\r\n return d\r\n \r\nx1,y1 = (5,3)\r\nx2,y2 = (2,2)\r\nprint(f\"The distance between 2 points ({x1},{y1}) & ({x2},{y2}) is: {distance((x1,y1),(x2,y2))}\")\r\n\r\n// Output:\r\nThe distance between 2 points (5,3) & (2,2) is: 3.1622776601683795",
            "correct_answer": "p1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 575,
            "material": "Operator",
            "instruction": "Write an if-else statement for a simple weather notification system in Python.",
            "question": "if 60 <= ___ <= 75:\r\n   print(\"It's Perfect Weather!\")\r\nelse:\r\n   print(\"The weather is not so great.\")",
            "correct_answer": "temperature",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 670,
            "material": "Operator",
            "instruction": "Modify the following code to reverse a string without using the built-in reverse() method in Python.",
            "question": "def reverseString(string):\r\n    newString = \"\"\r\n    length = ___(string)\r\n    for i in range(length - 1, -1, -1):\r\n        newString += string[i]\r\n    return newString\r\n\r\nprint(reverseString(\"Hello World!\"))",
            "correct_answer": "len",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 775,
            "material": "Operator",
            "instruction": "Use an if-else statement in Python to determine if a number is even or odd.",
            "question": "if n % ___ == 0:\r\n    print(n, 'is an even number')\r\nelse:\r\n    print(n, 'is an odd number')",
            "correct_answer": "2",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 853,
            "material": "Operator",
            "instruction": "Generate a program in Python to evaluate the following expression: (x*x) \u2212 (\ud835\udc66*\ud835\udc66)",
            "question": "x = ___\r\ny = 5\r\n\r\nresult = (x*x) - (y*y)\r\nprint(result)",
            "correct_answer": "10",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 885,
            "material": "Operator",
            "instruction": "Create a Python function that takes in an array-like data structure and returns the difference of its maximum and minimum values.",
            "question": "def get_difference(arr):\r\n    return max(arr) - ___(arr)\r\n\r\ninput_arr = [100, 45, 56, 30, 90, 100]\r\ndifference = get_difference(input_arr)\r\nprint(difference)  # Output: 70",
            "correct_answer": "min",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 889,
            "material": "Operator",
            "instruction": "Generate a two-dimensional array of ones using Python.",
            "question": "import numpy as np \r\n\r\narr = ___.ones((r,c))",
            "correct_answer": "np",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 932,
            "material": "Operator",
            "instruction": "Write a Python program to find the first non-repeated character of a given string.",
            "question": "def first_non_repeated_char(string):\r\n    for ch in string:\r\n        if string.count(ch) == ___:\r\n            return ch",
            "correct_answer": "1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1020,
            "material": "Operator",
            "instruction": "Create a functional programming program to calculate the value of the Fibonacci number up to the n-th number in Python.",
            "question": "def fibonacci(n):\r\n if n < ___:\r\n raise ValueError(\"Negative number\")\r\n if n == 0 or n == 1:\r\n return n\r\n return fibonacci(n-1) + fibonacci(n-2)\r\n \r\n# calculate 9th Fibonacci number\r\nprint(fibonacci(9))",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1022,
            "material": "Operator",
            "instruction": "Write a Python program to find the first non-repeating character in a given list.",
            "question": "def first_non_repeating_char(lst):\r\n    dct = {}\r\n    \r\n    for l in lst:\r\n        if l in dct:\r\n            dct[l] += ___\r\n        else:\r\n            dct[l] = 1\r\n            \r\n    for l in lst:\r\n        if dct[l] == 1:\r\n            return l\r\n            \r\n    return None\r\n\r\nlst = [1, 2, 3, 4, 4, 3, 2, 1]\r\nprint(first_non_repeating_char(lst))",
            "correct_answer": "1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1071,
            "material": "Operator",
            "instruction": "Encode a given URL using percent-encoding.",
            "question": "String url = \"https://www.example.com/search?q=python\";\r\nString encodedUrl = ___.encode(url, \"UTF-8\");\r\nSystem.out.println(encodedUrl);  // https%3A%2F%2Fwww.example.com%2Fsearch%3Fq%3Dpython",
            "correct_answer": "URLEncoder",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1079,
            "material": "Operator",
            "instruction": "Implement a function in Python to find the length of a given string without using the len() built-in function.",
            "question": "def getStringLength(my_string): \r\n    # Initialize counter  \r\n    count = ___\r\n  \r\n    for s in my_string: \r\n        count+= 1\r\n  \r\n    return count",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1137,
            "material": "Operator",
            "instruction": "Rewrite the following Python program using the try/except approach.",
            "question": "try:\r\n    c = ___ / b\r\nexcept ZeroDivisionError:\r\n   print(\"Division by zero error!\")",
            "correct_answer": "a",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1160,
            "material": "Operator",
            "instruction": "Create a Python program to convert a comma-separated string into a list.",
            "question": "string = \"1,2,3,4,5\"\r\nlist = ___.split(\",\")\r\nprint(list)",
            "correct_answer": "string",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1179,
            "material": "Operator",
            "instruction": "Write a Python program that calculates the distance between two points on a two-dimensional plane.",
            "question": "#include <iostream>\r\n#include <math.h> ___ main() \r\n{ \r\n    int x1 = 3; \r\n    int y1 = 4; \r\n\r\n    int x2 = -9; \r\n    int y2 = -2;\r\n\r\n    float distance = sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2)); \r\n\r\n    std::cout << \"Distance between the two points is: \" << distance << std::endl; \r\n\r\n    return 0; \r\n}",
            "correct_answer": "int",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1195,
            "material": "Operator",
            "instruction": "Edit the given Python program so that it prints the current date, in the format YYYY-mm-dd.",
            "question": "from datetime import date\r\n\r\nprint(\"Hello!\")\r\n\r\ncurrent_date = ___.today().strftime(\"%Y-%m-%d\")\r\nprint(\"Today's date is\", current_date)",
            "correct_answer": "date",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1208,
            "material": "Operator",
            "instruction": "Re-write the following code snippet in Python:",
            "question": "nums = [1, 2, 3, 4, 5]\r\nsquared_nums = ___(map(lambda num: num * num, nums))",
            "correct_answer": "list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1271,
            "material": "Operator",
            "instruction": "Write a script in python that can take a magnitude and corresponding angle (in degrees) and convert it to vectors in three-dimensional space.",
            "question": "import math\r\n\r\ndef magnitude_to_vector(magnitude, angle):\r\n    x = ___ * math.cos(math.radians(angle))\r\n    y = magnitude * math.sin(math.radians(angle))\r\n    z = 0\r\n    \r\n    return (x, y, z)\r\n\r\nresult = magnitude_to_vector(5, 90)\r\n\r\nprint(f\"The vector is {result}\")",
            "correct_answer": "magnitude",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1310,
            "material": "Operator",
            "instruction": "Edit the following Python code to calculate the sum of all the elements in a two-dimensional array.",
            "question": "arr = [[1,2,3], [4,5,6], [7,8,9]]\r\n\r\nsum = ___\r\n\r\nfor row in arr:\r\n for col in row:\r\n  sum = sum + col\r\n\r\nprint(\"Sum:\", sum)",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1330,
            "material": "Operator",
            "instruction": "Create a function in Python that takes a two-dimensional array with n rows and m columns and returns the transposed array.",
            "question": "def transpose(matrix):\r\n    num_rows = ___(matrix)\r\n    num_cols = len(matrix[0])\r\n    transposed = [ [0 for j in range(num_rows)] for i in range(num_cols) ]\r\n    for i in range(num_rows):\r\n        for j in range(num_cols):\r\n            transposed[j][i] = matrix[i][j]\r\n    return transposed",
            "correct_answer": "len",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1355,
            "material": "Operator",
            "instruction": "Write a method in Python to calculate the sum of two numbers without using any built-in functions.",
            "question": "def sum_two_numbers(a, b):\r\n    result = ___\r\n\r\n    for i in range(b):\r\n        result += a\r\n\r\n    return result\r\n\r\na = 3\r\nb = 5\r\n\r\nprint(sum_two_numbers(a, b))",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1359,
            "material": "Operator",
            "instruction": "Generate a Python script using Scikit-Learn for performing k-means clustering on a given dataset.",
            "question": "import numpy as np\r\nfrom sklearn.cluster import KMeans\r\n\r\ndata = ___.array([[x1, x2, x3]]) #replace x1, x2 and x3 with the features in the dataset\r\n\r\nkmeans = KMeans(n_clusters=3).fit(data)\r\nclusters = kmeans.predict(data)",
            "correct_answer": "np",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1393,
            "material": "Operator",
            "instruction": "Create a Python program to optimize a given function using the Nelder-Mead method.",
            "question": "from scipy.optimize import minimize\r\ndef f(x):\r\n    return x[0]**2 + ___*x[1]**2\r\n\r\nres = minimize(f, [3, -2], method='nelder-mead')\r\n\r\nprint(res.x)",
            "correct_answer": "4",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1426,
            "material": "Operator",
            "instruction": "Write a Python program that will determine the maximum number of unique paths a person can take from one point to another in a two-dimensional grid.",
            "question": "def unique_paths(grid):\r\n rows = ___(grid)\r\n cols = len(grid[0])\r\n \r\n dp = [[0 for i in range(cols)] for j in range(rows)]\r\n \r\n for i in range(rows):\r\n for j in range(cols):\r\n if i == 0 or j == 0:\r\n dp[i][j] = 1\r\n else:\r\n dp[i][j] = dp[i][j-1] + dp[i-1][j]\r\n \r\n return dp[-1][-1]\r\n \r\nprint(unique_paths(grid))\r\n# Output: 2",
            "correct_answer": "len",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1430,
            "material": "Operator",
            "instruction": "Refactor the following Python code to use list comprehension instead of for-loops.",
            "question": "my_list = [1, 2, 3, 4, 5] \r\nnew_list = [x**2 for x in my_list if x % ___ == 0]",
            "correct_answer": "2",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1502,
            "material": "Operator",
            "instruction": "Create a Python script that takes a text and replaces all occurrences of a given word to its upper-case version.",
            "question": "import re\r\n \r\ntext = \"The quick brown fox jumps over the lazy dog\"\r\n \r\nreplaced = ___.sub(r'quick', \"QUICK\", text) \r\n \r\nprint(replaced) #prints \"The QUICK brown fox jumps over the lazy dog\"",
            "correct_answer": "re",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1508,
            "material": "Operator",
            "instruction": "Write a python program to generate a dictionary object from a list containing key-value tuples.",
            "question": "my_dict = ___(my_list)",
            "correct_answer": "dict",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1559,
            "material": "Operator",
            "instruction": "Create a program in Python that calculates the median of an array of integers without using the built-in function.",
            "question": "def median(arr): \r\n n = ___(arr) \r\n arr.sort() \r\n\r\n # check for even case \r\n if n % 2 == 0: \r\n return (arr[int((n - 1)/2)] +\r\n arr[int(n/2)]) / 2\r\n\r\nelse: \r\n return arr[int(n/2)] \r\n\r\n# test\r\narr = [1, 2, 3, 4, 5] \r\nprint(\"Median =\", median(arr)) \r\n\r\n# Output: Median = 3.0",
            "correct_answer": "len",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1565,
            "material": "Operator",
            "instruction": "Generate a Python script that computes the area of an ellipse given its semi-major axis and semi-minor axis as inputs.",
            "question": "import math\r\n\r\n# Semi-Major Axis\r\na = ___\r\n\r\n# Semi-Minor Axis\r\nb = 3\r\n\r\n# Calculate the area of an ellipse\r\narea = math.pi * a * b\r\n\r\nprint(\"The area of the ellipse is\", area)",
            "correct_answer": "5",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1701,
            "material": "Operator",
            "instruction": "Design a Python program to find the first prime number greater than a user-specified number.",
            "question": "def find_prime_number(n):\r\n    number = ___ + 1\r\n    while True:\r\n        counter = 0\r\n        for i in range(2, number):\r\n          if number % i == 0:\r\n            counter = 1\r\n        if counter == 0:\r\n            break\r\n        number += 1\r\n    return number\r\n\r\nnum = int(input(\"Enter a number:\"))\r\nprime = find_prime_number(num)\r\n\r\nprint(prime)",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1732,
            "material": "Operator",
            "instruction": "Write a script in Python to sort the given list of numbers in non-decreasing order",
            "question": "def sortNumbers(nums): \r\n    for i in range(len(nums)-1): \r\n        minPos = ___ \r\n        for j in range(i+1,len(nums)): \r\n            if nums[minPos] > nums[j]: \r\n                minPos = j \r\n        nums[i],nums[minPos] = nums[minPos],nums[i] \r\n\r\nnums = [3, 2, 7, 1, 9, 5]\r\nsortNumbers(nums) \r\nprint(nums)",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1752,
            "material": "Operator",
            "instruction": "Develop a python program to find the maximum sum of non-consecutive elements of a given integer list.",
            "question": "def find_max_non_consecutive_sum(arr):\r\n    incl = ___\r\n    excl = 0\r\n     \r\n    for i in arr:\r\n        new_excl = max(incl, excl)   \r\n        incl = excl + i \r\n        excl = new_excl \r\n       \r\n    return max(incl, excl)",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1830,
            "material": "Operator",
            "instruction": "Create a Python program to find the sum of all elements in the following two-dimensional list.",
            "question": "def sum_list(list_two_dim): \r\n    sum = ___\r\n    for row in list_two_dim: \r\n        sum += sum(row) \r\n    return sum",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1904,
            "material": "Operator",
            "instruction": "Create a Python program to convert a given string to an integer by removing all non-numeric characters.",
            "question": "def remove_non_numeric(str):\r\n res = \"\"\r\n for c in str:\r\n if c.isnumeric():\r\n res += ___\r\n return int(res)\r\n\r\ns = \"29A3B8746\"\r\ninteger = remove_non_numeric(s)\r\nprint(integer) // 2938746",
            "correct_answer": "c",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1924,
            "material": "Operator",
            "instruction": "Generate a python program to sort a collection of data given in the form of a 2-dimensional array.",
            "question": "def sortArray(arr): \r\n  arr.sort(key = ___ x: x[1]) \r\n  return arr \r\n  \r\n# Driver Code \r\narr = [[1, 2],[2, 6], [3, 4], [4, 5]] \r\n\r\nprint (sortArray(arr))",
            "correct_answer": "lambda",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1992,
            "material": "Operator",
            "instruction": "Generate a subroutine in Python to convert a string date of the format DD/MM/YYYY to the Unix timestamp type.",
            "question": "import datetime\r\n\r\ndef convert_to_unix_time_stamp(date):\r\n    date_object = ___.datetime.strptime(date, \"%d/%m/%Y\")\r\n    \r\n    return date_object.timestamp()",
            "correct_answer": "datetime",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2026,
            "material": "Operator",
            "instruction": "Using Python, create a program to filter out all non-prime numbers from a list.",
            "question": "def filterPrimes(myList):\r\n    result = []\r\n    for i in myList:\r\n        is_prime = ___\r\n        for j in range(2,i):\r\n            if i % j == 0:\r\n                is_prime = False\r\n                break\r\n        if is_prime:\r\n            result.append(i)\r\n    return result\r\n\r\nprint(filterPrimes(myList)) #[2, 5]",
            "correct_answer": "True",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2033,
            "material": "Operator",
            "instruction": "Develop a virtual assistant command in Python to generate a random number between two user-supplied numbers.",
            "question": "import random\r\n\r\nmin_num = ___(input(\"Enter minimum number: \"))\r\nmax_num = int(input(\"Enter maximum number: \"))\r\n\r\nprint(random.randint(min_num, max_num)) # random number between 10 and 20",
            "correct_answer": "int",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2089,
            "material": "Operator",
            "instruction": "Using the provided data, create a Python program that can categorize a book as fiction or non-fiction.",
            "question": "import json\r\n\r\ndata = '{\"title\": \"The Catcher in the Rye\", \"author\": \"JD Salinger\", \"genre\": \"Novel\"}'\r\nbook_data = ___.loads(data)\r\n\r\nif book_data[\"genre\"] == \"Novel\":\r\n print(\"Book is fiction\")\r\nelse:\r\n print(\"Book is not fiction\")",
            "correct_answer": "json",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2114,
            "material": "Operator",
            "instruction": "Write a Python program to generate a dictionary which contains (i, i*i) such that i is an int between 1 and N.",
            "question": "\"\"\"\r\nA Python program to generate a dictionary which contains (i, i*i) such that i is an int between 1 and N\r\n\"\"\"\r\n\r\nN = ___\r\nmy_dict = {}\r\n\r\n# Generate the dictionary\r\nfor i in range(1, N+1):\r\n    my_dict[i] = i * i\r\n\r\n# Print the dictionary\r\nprint(my_dict)",
            "correct_answer": "10",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2116,
            "material": "Operator",
            "instruction": "Write a Python program to optimize a set of points in a 3-dimensional plane.",
            "question": "import scipy.optimize as opt\r\n\r\ndef objective(x):\r\n return sum([x[i]**2 for i in range(len(x))])\r\n\r\ndef constraint1(x):\r\n return 16 - ___[0]**2 - x[1]**2 - x[2]**2\r\n\r\ncons = [{'type': 'ineq','fun': constraint1}]\r\n\r\nx = [0, 0, 0]\r\n\r\nsolution = opt.minimize(objective, x, constraints=cons)\r\n\r\nprint(solution)",
            "correct_answer": "x",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2178,
            "material": "Operator",
            "instruction": "Write a commmand-line script that sums all numbers from 0 to N where N is provided as input.",
            "question": "# python code\r\nimport sys\r\n\r\ninput_val = ___(sys.argv[1])\r\nsum = 0\r\n\r\nfor i in range(input_val + 1):\r\n    sum += i\r\n    \r\nprint(\"Sum from 0 to {} is = {}\".format(input_val, sum))",
            "correct_answer": "int",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2199,
            "material": "Operator",
            "instruction": "Develop an algorithm in Python for finding the maximum index of an array's sub-array.",
            "question": "def findMaxIndex(arr):\r\n    \"\"\"This function finds the maximum index of an array's sub-array.\"\"\"\r\n    maxIndex = ___\r\n    currentMax = 0\r\n    for i in range(1, len(arr)):\r\n        if arr[i] > arr[currentMax]:\r\n            maxIndex = i\r\n            currentMax = i\r\n    return maxIndex\r\n\r\narr = [2, 3, 4, 5, 7, 9, 11]\r\nmaxIndex = findMaxIndex(arr)\r\nprint(maxIndex) # Output: 5",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2219,
            "material": "Operator",
            "instruction": "Write an Python script to extract the year, month and day from a given date in the format \"dd/mm/yyyy\".",
            "question": "import datetime\r\n\r\ndate_string = \"27/09/2017\"\r\n\r\ndate_object = ___.datetime.strptime(date_string, \"%d/%m/%Y\")\r\n\r\nprint(\"Year:\", date_object.year)\r\nprint(\"Month:\", date_object.month)\r\nprint(\"Day:\", date_object.day)",
            "correct_answer": "datetime",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2251,
            "material": "Operator",
            "instruction": "Generate a Python program to calculate the maximum possible sum of a sub-array in an array of integers.",
            "question": "def max_subarray_sum(arr):\r\n    current_sum = ___\r\n    max_sum = 0\r\n\r\n    for x in arr:\r\n        current_sum += x\r\n        if current_sum < 0:\r\n            current_sum = 0\r\n        if current_sum > max_sum:\r\n            max_sum = current_sum\r\n    return max_sum\r\n\r\nresult = max_subarray_sum([-2, 4, -1, 5, 6])\r\nprint(result)",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2253,
            "material": "Operator",
            "instruction": "Create code in Python to check the right-hand side of a list and remove any elements which are divisible by 3.",
            "question": "arr = [12, 15, 8, 10]\r\narr[:] = [x for x in arr if x % ___ != 0]",
            "correct_answer": "3",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2258,
            "material": "Operator",
            "instruction": "Generate a function in Python to populate a dictionary data-structure with a list of numerical values.",
            "question": "def populateDict(lst):\r\n    my_dict = {}\r\n    for i in lst:\r\n        my_dict[i] = ___\r\n    return my_dict\r\n\r\nmy_numbers = [1, 2, 3, 4, 5]\r\nmy_dict = populateDict(my_numbers)\r\nprint(my_dict)",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2311,
            "material": "Operator",
            "instruction": "Generate a Python program that computes the Euclidean distance between two points in a two-dimensional space.",
            "question": "import math\r\n\r\n# Define the two points\r\npointA = (3, 5) \r\npointB = (7, 6)\r\n\r\n# Calculate the Euclidean distance\r\ndistance = ___.sqrt( (pointB[0] - pointA[0])**2 + (pointB[1] - pointA[1])**2 )\r\n\r\nprint(\"The Euclidean distance between the two points is:\", distance)",
            "correct_answer": "math",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2365,
            "material": "Operator",
            "instruction": "Given a JSON object containing a list of key/value pairs, write a Python function to sort the list by value.",
            "question": "def sort_by_value(data):\r\n sorted_list = ___(data.items(), key=lambda kv: kv[1])\r\n return sorted_list\r\n \r\nprint(sort_by_value({\"a\": 23, \"b\": 42, \"c\": 16}))\r\n# Output -> [('c', 16), ('a', 23), ('b', 42)]  # sorted by value",
            "correct_answer": "sorted",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2439,
            "material": "Operator",
            "instruction": "Create a class Cell in Python using object-oriented programming.",
            "question": "class Cell:\r\n    def __init__(self, row, col):\r\n        self.row = ___\r\n        self.col = col \r\n\r\n    def move_left(self):\r\n        self.col -= 1\r\n\r\n    def move_right(self):\r\n        self.col += 1\r\n\r\n    def move_up(self):\r\n        self.row -= 1\r\n\r\n    def move_down(self):\r\n        self.row += 1",
            "correct_answer": "row",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2477,
            "material": "Operator",
            "instruction": "Develop a Python program to display the Fibonacci sequence up to n-th term.",
            "question": "def fibonacci(n): \r\n    a = ___\r\n    b = 1\r\n    if n < 0: \r\n        print(\"Incorrect input\") \r\n    elif n == 0: \r\n        return a \r\n    elif n == 1: \r\n        return b \r\n    else: \r\n        for i in range(2,n): \r\n            c = a + b \r\n            a = b \r\n            b = c \r\n        return b \r\n  \r\n# Driver Program \r\nprint(fibonacci(10))",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2524,
            "material": "Operator",
            "instruction": "Create an SHA-2 encryption algorithm in Python using a provided string \"abc\".",
            "question": "import hashlib\r\n\r\ns = 'abc'.encode(\"utf-8\")\r\n\r\nhash_object = ___.sha256(s)\r\nhex_dig = hash_object.hexdigest()\r\nprint(hex_dig)",
            "correct_answer": "hashlib",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2593,
            "material": "Operator",
            "instruction": "Generate a Python function that takes as input a UTF-8 encoded string and returns a string where the characters in odd positions of the original string are repeated.",
            "question": "def repeat_char(s):\r\n    result = ''\r\n    for i,c in enumerate(s):\r\n        if i % ___ == 0:\r\n            result += c\r\n        else:\r\n            result += c*2\r\n    return result\r\n\r\nprint(repeat_char('HelloWorld'))\r\n# Output: HeellooWorrlld",
            "correct_answer": "2",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2636,
            "material": "Operator",
            "instruction": "Maxminizing a Black-Box function (Python)",
            "question": "import scipy.optimize\r\n\r\n# define the black box function\r\ndef black_box(x):\r\n    return x ** ___ + 40\r\n\r\n# set the initial parameters \r\nstart = (0, 0)\r\n\r\n# minimize the black box function\r\nres = scipy.optimize.minimize(black_box, start, method=\"L-BFGS-B\")\r\n\r\n# print the result\r\nprint(res.x) # prints [0.]",
            "correct_answer": "2",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2680,
            "material": "Operator",
            "instruction": "Write a Python function to recognize a date (in \u201cDD/MM/YYYY\u201d format) in a string",
            "question": "def recognize_date(s):\r\n    '''This function recognizes a date (in DD/MM/YYYY format) in a string.'''\r\n    # Regex for DD/MM/YYYY format\r\n    format_regex = ___.compile(r'\\d{2}/\\d{2}/\\d{4}') \r\n    match = format_regex.search(s)\r\n    if match:\r\n        date = match.group()\r\n        return date\r\n    else:\r\n        return None",
            "correct_answer": "re",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2691,
            "material": "Operator",
            "instruction": "Generate a random 6-digit number using Python",
            "question": "import random\r\n\r\ndef generate_random_number(): \r\n    random_number = ___.randint(100000, 999999) \r\n    return random_number\r\n\r\ngeneratedNumber = generate_random_number() \r\nprint(generatedNumber)",
            "correct_answer": "random",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2694,
            "material": "Operator",
            "instruction": "Write a function in Python to compute the sum of all elements in a given 2-dimensional array.",
            "question": "def arraySum(arr): \r\n  sum = ___\r\n  for sublist in arr: \r\n    for item in sublist: \r\n      sum = sum + item \r\n  return sum \r\n\r\nprint(arraySum([[2, 3], [2, 5], [5, 6], [4, 5]])) \r\n\r\n# Output: 29",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2772,
            "material": "Operator",
            "instruction": "Generate a code snippet to insert a key-value pair into a given dictionary.",
            "question": "dict['Python'] = ___",
            "correct_answer": "10",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2825,
            "material": "Operator",
            "instruction": "Create a Python program to classify a given set of data using a k-nearest neighbors algorithm.",
            "question": "import numpy as np\r\nfrom sklearn.neighbors import KNeighborsClassifier\r\n\r\ndata = ___.array([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]])\r\n\r\n# Create the model\r\nmodel = KNeighborsClassifier()\r\n\r\n# Train the model\r\nmodel.fit(data[:, 0].reshape(-1, 1), data[:, 1].reshape(-1, 1))\r\n\r\n# Output the result\r\nprint(model.predict([[2]])) # [[3]]",
            "correct_answer": "np",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2835,
            "material": "Operator",
            "instruction": "Using the given functions, write a Python program that takes an n-dimensional vector vector as an argument and returns its norm.",
            "question": "def vector_norm(vector):\r\n    return vector_length(vector)\r\n\r\nvector = [1, 2, 3]\r\nnorm = ___(vector)\r\nprint(norm)",
            "correct_answer": "vector_norm",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2891,
            "material": "Operator",
            "instruction": "Using a built-in sorting algorithm, write a Python program to sort a given list of integers.",
            "question": "def sort_list(arr):\r\n    return sorted(arr)\r\n\r\nmy_list = [3, 4, 6, 1, 9, 5, 2]\r\nsorted_list = ___(my_list)\r\nprint(sorted_list)",
            "correct_answer": "sort_list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2942,
            "material": "Operator",
            "instruction": "Generate a json response from a python method that takes two parameters and returns a dictionary of key-value mappings.",
            "question": "def generate_response(param1, param2):\r\n    # dictionary of key-value mappings\r\n    key_value_mappings = {\r\n        param1: param2\r\n    }\r\n\r\n    # create json response\r\n    json_response = ___.dumps(key_value_mappings)\r\n\r\n    return json_response",
            "correct_answer": "json",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2947,
            "material": "Operator",
            "instruction": "Write a Python program for searching a 2-dimensional array for a target value.",
            "question": "def search(arr, target):\r\n for row in arr:\r\n  for element in row:\r\n   if element == ___:\r\n    return True\r\n return False\r\n\r\nresult = search(arr, target)\r\nprint(result) # True",
            "correct_answer": "target",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2987,
            "material": "Operator",
            "instruction": "Create a python function that reads comma-separated values to generate a dataframe.",
            "question": "def csv_to_df(csv):\r\n    # Create an empty list\r\n    df = []\r\n\r\n    # Add each row as a list\r\n    lines = ___.split(\"\\n\")\r\n    for line in lines:\r\n        df.append(line.split(\",\"))\r\n\r\n    # Convert list into a DataFrame\r\n    import pandas as pd\r\n    df = pd.DataFrame(df[1:], columns=df[0])\r\n    return df",
            "correct_answer": "csv",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2997,
            "material": "Operator",
            "instruction": "Write a Python program to detect out-of-range values in a given column of a data set.",
            "question": "for row in dataset.values():\r\n salary = ___['Salary']\r\n if salary < 40000 or salary > 100000:\r\n print(\"Out-of-range value: {}\".format(salary))",
            "correct_answer": "row",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3000,
            "material": "Operator",
            "instruction": "Implement a K-Means clustering algorithm in Python to cluster the given set of points into three clusters.",
            "question": "import numpy as np \r\nfrom sklearn.cluster import KMeans \r\n\r\ndataset = [[2, 4], [5, 8], [3, 7], [9, 2], [7, 1]]\r\n\r\nX = ___.array(dataset) \r\n\r\nkmeans = KMeans(n_clusters=3, random_state=0).fit(X)\r\n\r\nlabels = kmeans.labels_\r\n\r\nfor i in range(len(X)):\r\n print(\"datapoint:\", X[i], \"belongs to cluster\", labels[i])",
            "correct_answer": "np",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3069,
            "material": "Operator",
            "instruction": "Given a json-formatted string, create a python program to parse it into a dict.",
            "question": "import json\r\n\r\ndata = '{\"name\": \"John\",\"age\": 30,\"address\": {\"city\": \"New York\",\"state\": \"NY\"}}'\r\n\r\ndata_dict = ___.loads(data)",
            "correct_answer": "json",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3082,
            "material": "Operator",
            "instruction": "Rewrite the following JavaScript string-manipulation function in Python.",
            "question": "def fix_string(s): \r\n    s = ___.replace(\" \", \"\") \r\n    s = s.lower() \r\n    s = \"\".join(reversed(s)) \r\n    return s",
            "correct_answer": "s",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3174,
            "material": "Operator",
            "instruction": "Create a function in Python that will convert a given string of text into its equivalent URL-safe slug format.",
            "question": "def url_slug(text):\r\n '''Takes text and converts it to url-safe slug format.\r\n \r\n Args:\r\n text (str): Text to be converted to slug\r\n \r\n Returns:\r\n str: slugified text\r\n '''\r\n \r\n text = ___.lower()\r\n text = re.sub(r'\\s+', '-', text)\r\n text = re.sub(r'[^\\w-]', '', text)\r\n return text",
            "correct_answer": "text",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3206,
            "material": "Operator",
            "instruction": "Generate a Python script to sort an array of strings in case-insensitive order.",
            "question": "def sort_strings(arr):\r\n    arr_lower = [element.lower() for element in arr]\r\n    sorted_lower = ___(arr_lower)\r\n\r\n    sorted_arr = [arr[arr_lower.index(element)] for element in sorted_lower]\r\n\r\n    return sorted_arr\r\n\r\narr = [\"Apple\", \"banana\", \"APple\"]\r\nsorted_arr = sort_strings(arr)\r\nprint(sorted_arr) # prints [\"APple\", \"Apple\", \"banana\"]",
            "correct_answer": "sorted",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3211,
            "material": "Operator",
            "instruction": "Edit the following object-oriented Python code to use inheritance.",
            "question": "class A:\r\n    def __init__(self, x):\r\n        self.x = ___\r\n    \r\n    def get_x(self):\r\n        return self.x\r\n\r\nclass B(A):\r\n    def modify_x(self, x):\r\n        A.modify_x(self, x)\r\n        self.x += 1",
            "correct_answer": "x",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3216,
            "material": "Operator",
            "instruction": "Can you write a function in Python that takes in a 2-dimensional array of integers and returns the lowest element in the array?",
            "question": "def find_min(matrix): \r\n    result = ___('inf') \r\n    for row in matrix: \r\n        result = min(result, min(row))\r\n    return result \r\n\r\nmatrix = [[3, 4, 5], [2, 7, 8], [12, 1, 9]]\r\nprint(find_min(matrix)) # Output: 1",
            "correct_answer": "float",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3285,
            "material": "Operator",
            "instruction": "Given a Python dictionary, write a function that prints out the key-value pairs in alphabetical order.",
            "question": "def print_dict_alphabetically(dictionary):\r\n    sorted_keys = ___(dictionary.keys())\r\n    for key in sorted_keys:\r\n        print(f\"{key}: {dictionary[key]}\")\r\n\r\nprint_dict_alphabetically({\r\n 'Mark': '68',\r\n 'Carol': '35',\r\n 'John': '42'\r\n})",
            "correct_answer": "sorted",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3314,
            "material": "Operator",
            "instruction": "Write a python program to clean up a string by removing punctuation, non-alphanumeric regions  or converting to lowercase.",
            "question": "import string\r\n\r\nexample_string = \"This i$n't a siMPle StrinG\"\r\nnew_string = ___.translate(str.maketrans('', '', string.punctuation)).replace(' ', '').lower()\r\nprint(new_string)\r\n\r\nOutput:\r\nthisisntasimplestring",
            "correct_answer": "example_string",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3379,
            "material": "Operator",
            "instruction": "Create a Python program to rotate a 2-dimensional array clockwise.",
            "question": "def rotate_sqr_matrix_clockwise(matrix):\r\n    N = ___(matrix)\r\n    res = [[0] * N for i in range(N)]\r\n    for i in range(N):\r\n        for j in range(N): \r\n            res[i][j] = matrix[N - 1 - j][i] \r\n    return res",
            "correct_answer": "len",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3386,
            "material": "Operator",
            "instruction": "Optimize the following Python code by replacing the for-loop with a list comprehension",
            "question": "def hipsterify(sentence):\r\n  return ' '.join([\"hipster \" + ___ for word in sentence])",
            "correct_answer": "word",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3419,
            "material": "Operator",
            "instruction": "Create a Python program to calculate the formula 2*sqrt(x+2).",
            "question": "import math\r\n\r\nx = ___\r\n\r\nresult = 2*math.sqrt(x+2)\r\n\r\nprint(result ) # 12.0",
            "correct_answer": "10",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3424,
            "material": "Operator",
            "instruction": "Write a script in Python which takes a two-dimensional array as input and finds the smallest number in the array.",
            "question": "def find_smallest(array):\r\n    smallest_item = ___[0][0]\r\n    for row in array:\r\n        for item in row:\r\n            if item < smallest_item:\r\n                smallest_item = item\r\n    return smallest_item",
            "correct_answer": "array",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3433,
            "material": "Operator",
            "instruction": "Write a python program to extract the non-vowel words in a sentence.",
            "question": "def extract_words(sentence):\r\n    non_vowel_words = []\r\n    words = ___.split()\r\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\r\n    for word in words:\r\n        if not any(char in vowels for char in word):\r\n            non_vowel_words.append(word) \r\n    return non_vowel_words",
            "correct_answer": "sentence",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3484,
            "material": "Operator",
            "instruction": "Develop an algorithm to find the least common multiple of two non-negative integers using Python.",
            "question": "# Find the greatest common denominator\r\ndef gcd(num1, num2):\r\n    if num2 == ___:\r\n        return num1\r\n    else:\r\n        return gcd(num2, num1 % num2)\r\n\r\n# Find the least common multiple\r\ndef lcm(num1, num2):\r\n    return (num1 * num2) // gcd(num1, num2)\r\n\r\nnum1 = 12\r\nnum2 = 18\r\n\r\nprint(lcm(num1, num2))",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3491,
            "material": "Operator",
            "instruction": "Create an algorithm in Python that takes in a two-dimensional array (matrix) and returns a flattened version of the array.",
            "question": "def flattenMatrix(matrix):\r\n    return [elem for row in matrix for elem in row]\r\n\r\nmatrix = [[1,2,3],\r\n          [4,5,6],\r\n          [7,8,9]] \r\n\r\nflatMatrix = ___(matrix)\r\nprint(flatMatrix)\r\n\r\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]",
            "correct_answer": "flattenMatrix",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3535,
            "material": "Operator",
            "instruction": "Develop a Python script to delete all non-alphabetic characters in a string.",
            "question": "def remove_non_alpha(string):\r\n    new_string = \"\"\r\n    for char in string:\r\n        if char.isalpha():\r\n            new_string += ___\r\n    return new_string",
            "correct_answer": "char",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3545,
            "material": "Operator",
            "instruction": "Generate a code snippet in Python to convert a string with the following format to a dictionary. (name1=123&name2=456&name3=789).",
            "question": "inp = \"name1=123&name2=456&name3=789\"\r\nkv = ___.split(\"&\")\r\nd = {}\r\nfor i in kv:\r\n    k,v = i.split(\"=\")\r\n    d[k] = v\r\n\r\nprint(d)",
            "correct_answer": "inp",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3556,
            "material": "Operator",
            "instruction": "Generate a script in Python to run a linear regression model using scikit-learn.",
            "question": "import numpy as np\r\nfrom sklearn.linear_model import LinearRegression\r\n\r\nx = ___.array([[7,5,3,9,8,4]]).T\r\ny = np.array([7,3,4,6])\r\n\r\nmodel = LinearRegression()\r\nmodel.fit(x, y)\r\n\r\npreds = model.predict(x)\r\n\r\nprint(f\"R-squared score: {model.score(x,y)}\")\r\nprint(f\"Coefficients: {model.coef_}\")\r\nprint(f\"Predictions: {preds}\")",
            "correct_answer": "np",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3560,
            "material": "Operator",
            "instruction": "Modify this Python program to compute the sum of all elements in a multi-dimensional array.",
            "question": "def sum_multi_dim_array(multi_dim_array):\r\n    # init sum to 0 \r\n    sum = ___ \r\n  \r\n    # iterate over rows \r\n    for row in multi_dim_array: \r\n  \r\n        # iterate over columns \r\n        for num in row: \r\n  \r\n            # add number to sum \r\n            sum += num \r\n  \r\n    return sum",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3577,
            "material": "Operator",
            "instruction": "Generate a Python program to optimize a low-cost route between two points",
            "question": "def optimize_route(startX, endX):\r\n    best_route = [startX]\r\n    next_x = ___\r\n\r\n    while next_x < endX:\r\n        best_cost = float(\"inf\")\r\n        for x in range(next_x+1, endX+1):\r\n            cost = abs(x - next_x)\r\n            if cost < best_cost:\r\n                best_cost = cost\r\n                next_x = x\r\n        best_route.append(next_x)\r\n\r\n    return best_route",
            "correct_answer": "startX",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3579,
            "material": "Operator",
            "instruction": "Write a Python script that reads in a user-defined data set and prints the top-5 highest values contained in the data set.",
            "question": "data = [100.0, 74.0, 56.2, 45.5, 27.8, 21.0, 8.2, 4.1]\r\n\r\ndef get_top_five_values(data):\r\n    sorted_data = ___(data, reverse=True)\r\n    top_five_values = sorted_data[:5]\r\n    return top_five_values\r\n\r\ntop_five_values = get_top_five_values(data)\r\nprint(top_five_values)",
            "correct_answer": "sorted",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3597,
            "material": "Operator",
            "instruction": "Write a Python script to convert a list of positive integers to a comma-separated string.",
            "question": "def convert_list_to_string(list): \r\n  string = \"\"\r\n  for num in list:\r\n    string += ___(num) + \",\"\r\n  return string\r\n\r\nprint(convert_list_to_string([1, 2, 3, 4]))\r\n\r\n# Output: \"1,2,3,4,\"",
            "correct_answer": "str",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3641,
            "material": "Operator",
            "instruction": "Generate a program in Python to evaluate the accuracy of a machine-learning model.",
            "question": "import numpy as np\r\nfrom sklearn.metrics import accuracy_score\r\n\r\nclf.fit(X_train, y_train)\r\ny_pred = ___.predict(X_test)\r\n\r\n# Calculating the accuracy\r\naccuracy = accuracy_score(y_test, y_pred)\r\n\r\nprint(\"Accuracy: \" + str(accuracy))",
            "correct_answer": "clf",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3643,
            "material": "Operator",
            "instruction": "Create a function in Python to convert a given time from 12-hour clock format to 24-hour clock format.",
            "question": "def time_conversion(time):\r\n    # Get hour and convert it to 24-hour format\r\n    hour = ___(time[:2])\r\n    if time[-2:] == \"PM\":\r\n        hour += 12\r\n    # Get minutes\r\n    min = time[-5:-3]\r\n\r\n    return str(hour) + \":\" + min\r\n\r\n# Test\r\nprint(time_conversion(\"3:45pm\")) # 15:45",
            "correct_answer": "int",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3648,
            "material": "Operator",
            "instruction": "Generate code to de-serialize JSON into Python objects",
            "question": "import json\r\n\r\ndata = ___.loads(data_json)\r\n\r\n# Output:\r\ndata = {\r\n \"name\": \"John Doe\",\r\n \"age\": 18,\r\n \"hobbies\": [\"reading\", \"swimming\", \"gaming\"],\r\n \"contact\": {\r\n  \"email\": \"johndoe@example.com\",\r\n  \"mobile\": \"+1900000000\"\r\n }\r\n}",
            "correct_answer": "json",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3676,
            "material": "Operator",
            "instruction": "Create a class in Python to represent a 2-D point and implement a method for finding the Euclidean distance between the two points.",
            "question": "class Point:\r\n    def __init__(self, x, y):\r\n        self.x = ___\r\n        self.y = y\r\n\r\n    def distance(self, point):\r\n        x_diff = self.x - point.x\r\n        y_diff = self.y - point.y\r\n        return math.sqrt(x_diff**2 + y_diff**2)",
            "correct_answer": "x",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3721,
            "material": "Operator",
            "instruction": "Create a method to find the maximum element in a 2-D array in Python.",
            "question": "def maxElement2DArray(arr):\r\n    maxElement = ___[0][0]\r\n\r\n    for row in range(len(arr)):\r\n        for column in range(len(arr[row])):\r\n            maxElement = max(maxElement, arr[row][column])\r\n    return maxElement",
            "correct_answer": "arr",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3830,
            "material": "Operator",
            "instruction": "Write a Python program to intersect two given arrays without using any in-built functions.",
            "question": "def intersect(a, b):\r\n  intersection = [] \r\n  for i in a:\r\n    for j in b:\r\n      if i == ___ and i not in intersection:\r\n        intersection.append(i)\r\n  return intersection\r\n\r\nprint(intersect([1, 7, 11, 58, 80], [11, 13, 7, 32, 80]))",
            "correct_answer": "j",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3835,
            "material": "Operator",
            "instruction": "Write a Python program to determine and-or operations",
            "question": "x = ___ and False\r\n\r\n# Output\r\nprint(x)\r\n# False",
            "correct_answer": "False",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3892,
            "material": "Operator",
            "instruction": "Re-write the following SQL query in Python.",
            "question": "import sqlite3\r\n\r\nconn = ___.connect('movies.db') \r\ncursor = conn.cursor()\r\n\r\ncursor.execute(\"SELECT * FROM Movies WHERE category = 'horror'\")\r\n\r\nresult = cursor.fetchall()\r\nfor row in result:\r\n    print(row)\r\n\r\nconn.close()",
            "correct_answer": "sqlite3",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3902,
            "material": "Operator",
            "instruction": "Create a web-crawler in Python to extract links from a web page.",
            "question": "import urllib.request \r\nfrom bs4 import BeautifulSoup\r\n\r\n#Providing the url as an argument to urlopen() \r\nurl = \"http://www.example.com\"\r\nhtml = ___.request.urlopen(url).read() \r\nsoup = BeautifulSoup(html, features = 'html.parser') \r\n\r\n# extracting links from the web page \r\nlinks = [] \r\nfor link in soup.findAll('a'): \r\n    links.append(link.get('href')) \r\n\r\nprint(links)",
            "correct_answer": "urllib",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3925,
            "material": "Operator",
            "instruction": "Create a program to filter a list of numbers using the built-in Python filter() function.",
            "question": "def even_number_filter(number):\r\n  return number % ___ == 0\r\n\r\nnumbers = [25, 35, 8, 2, 10]\r\nfiltered_list = list(filter(even_number_filter, numbers))\r\nprint(filtered_list)",
            "correct_answer": "2",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3935,
            "material": "Operator",
            "instruction": "Create a Python Pandas DataFrame for a real-world dataset of your choice, and display information about it.",
            "question": "import pandas as pd\r\n\r\n# load the dataset\r\ndata = ___.read_csv('data.csv')\r\n\r\n# display information about the dataset\r\ndata.info()\r\n\r\n# observe the first five rows\r\ndata.head()\r\n\r\n# list all columns\r\ndata.columns \r\n\r\n# display summary statistics\r\ndata.describe()",
            "correct_answer": "pd",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3939,
            "material": "Operator",
            "instruction": "Write a Python program to add two numbers in base-10.",
            "question": "def add_base10(num1, num2): \r\n    return num1 + ___",
            "correct_answer": "num2",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3982,
            "material": "Operator",
            "instruction": "Create a Python script to partition a list into sub-lists of equal size.",
            "question": "def partition(lst, n):\r\n return [lst[i:i+n] for i in range(0, len(lst), n)]\r\n \r\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\npartitions = ___(list, 3)\r\n \r\nfor p in partitions:\r\n print(p)\r\n\r\n# Output\r\n# [1, 2, 3]\r\n# [4, 5, 6]\r\n# [7, 8, 9]\r\n# [10]",
            "correct_answer": "partition",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4014,
            "material": "Operator",
            "instruction": "Create a Python program to remove all white-space from a given string.",
            "question": "string = \"Hello World   \"\r\n\r\nno_space_string = ___.replace(' ', '')\r\n\r\nprint(no_space_string)",
            "correct_answer": "string",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4025,
            "material": "Operator",
            "instruction": "Write a Python script for creating a type-safe data model based on a given JSON object.",
            "question": "class DataModel:\r\n def __init__(self, name: str, age: int, likes: List[str]):\r\n  self.name = ___\r\n  self.age = age\r\n  self.likes = likes\r\n\r\ndata = DataModel(name=\"Bob\", age=42, likes=[\"Sports\", \"Coding\"])",
            "correct_answer": "name",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4034,
            "material": "Operator",
            "instruction": "Write a Python program that sorts a list of integers in ascending order without using the built-in sort() method.",
            "question": "def selection_sort(arr):\r\n n = ___(arr)\r\n for i in range(n):\r\n min_idx = i\r\n for j in range(i+1, n):\r\n if arr[min_idx] > arr[j]:\r\n min_idx = j\r\n arr[i], arr[min_idx] = arr[min_idx], arr[i]\r\n\r\narr = [4, 5, 13, 2, 9, 7]\r\nselection_sort(arr)\r\nprint(arr)\r\n# Output: [2, 4, 5, 7, 9, 13]",
            "correct_answer": "len",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4044,
            "material": "Operator",
            "instruction": "Write a Python program which prints out the Fibonacci series up to the N-th term.",
            "question": "def print_fibonacci_series(n): \r\n    a = ___\r\n    b = 1\r\n    c = 0\r\n\r\n    while c < n:\r\n        print(a,end=\" \")\r\n        c = c+1\r\n        temp = a+b\r\n        a = b \r\n        b = temp \r\n\t\t\r\nprint_fibonacci_series(15)",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4109,
            "material": "Operator",
            "instruction": "Optimize this Python code to reduce its run-time complexity.",
            "question": "def foo(l1, l2):\r\n    result = [i + ___ for i in l1 for j in l2]\r\n    return result",
            "correct_answer": "j",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4117,
            "material": "Operator",
            "instruction": "Generate a function in Python that takes a number as input and prints out the n-th Fibonacci number.",
            "question": "def nthFibonacciNumber(n): \r\n    if n==0: \r\n        return 0\r\n    elif n==1: \r\n        return 1\r\n    else: \r\n        return nthFibonacciNumber(n-1)+nthFibonacciNumber(n-2)\r\n\r\nresult = ___(6)\r\nprint(result)",
            "correct_answer": "nthFibonacciNumber",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4142,
            "material": "Operator",
            "instruction": "Write a Python program to calculate the hypotenuse of a right-angled triangle.",
            "question": "import math\r\n\r\n# calculate the hypotenuse\r\ndef calc_hypotenuse(a, b):\r\n    hyp = ___.sqrt(a**2 + b**2)\r\n    print(\"The length of the hypotenuse is\", hyp)\r\n\r\n# input lengths of triangle sides\r\na = 5\r\nb = 12\r\n\r\n# call the function\r\ncalc_hypotenuse(a, b)",
            "correct_answer": "math",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4192,
            "material": "Operator",
            "instruction": "Create a dictionary in python from a comma-separated value string.",
            "question": "def csv_to_dict(s):\r\n    data_dict = {}\r\n    # split the string into list of elements\r\n    elements = ___.split(',')\r\n    \r\n    # iterate through the list\r\n    for i in range(0, len(elements), 2):\r\n        # add each element as a key to the dictionary\r\n        data_dict[elements[i]] = elements[i+1]\r\n    \r\n    # return the dictionary\r\n    return data_dict",
            "correct_answer": "s",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4208,
            "material": "Operator",
            "instruction": "Write a function in Python to compare two given strings character-wise and return the position of the first difference.",
            "question": "def compare_strings_charwise(s1, s2):\r\n    for i in range(min(len(s1), len(s2))):\r\n        if s1[i] != ___[i]:\r\n            return i\r\n    return -1",
            "correct_answer": "s2",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4237,
            "material": "Operator",
            "instruction": "Given a multi-dimensional array, write a python code snippet to find the sum of its elements.",
            "question": "# Use nested list comprehension to calculate the sum \r\ntotal_sum = ___([sum(row) for row in arr])",
            "correct_answer": "sum",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4274,
            "material": "Operator",
            "instruction": "Write a Python program to generate a two-dimensional array of Boolean values with alternating True and False values.",
            "question": "def generate_alternating_2d_array(n):\r\n arr = []\r\n prev_value = ___\r\n for i in range(n):\r\n  row = []\r\n  for j in range(n):\r\n   cur_value = not prev_value\r\n   row.append(cur_value)\r\n   prev_value = cur_value \r\n  arr.append(row)\r\n return arr\r\n\r\narr = generate_alternating_2d_array(5)\r\nfor row in arr:\r\n print(row)",
            "correct_answer": "False",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4387,
            "material": "Operator",
            "instruction": "Create a python function to parse a character-separated string",
            "question": "def parse_str(str, separator):\r\n    strList = ___.split(separator) \r\n    return strList",
            "correct_answer": "str",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4391,
            "material": "Operator",
            "instruction": "Create a Python function for converting a list to a dictionary. The function should take a list of key-value tuples and return a dictionary.",
            "question": "def list_to_dict(input_list):\r\n result = {}\r\n for key, value in input_list:\r\n result[key] = ___\r\n return result\r\n\r\nlist_to_dict([('a', 1), ('b', 2), ('c', 3)]) \r\n#{'a': 1, 'b': 2, 'c': 3}",
            "correct_answer": "value",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4491,
            "material": "Operator",
            "instruction": "Develop a Python program that takes in a single-dimensional array as a parameter, and returns the number of subsets with size 3 or greater.",
            "question": "def find_subsets(arr):\r\n    count = ___\r\n    for i in range(len(arr)):\r\n        for j in range(i+1, len(arr)):\r\n            for k in range(j+1, len(arr)):\r\n                count += 1\r\n    return count",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4525,
            "material": "Operator",
            "instruction": "Write a Python function to create a Fibonacci sequence up to n-th number.",
            "question": "def FibonacciGenerator(n): \r\n    a = ___\r\n    b = 1\r\n    if n < 0: \r\n        print(\"Incorrect input\") \r\n    elif n == 0: \r\n        return a \r\n    elif n == 1: \r\n        return b \r\n    else: \r\n        for i in range(2,n): \r\n            c = a + b \r\n            a = b \r\n            b = c \r\n        return b \r\n  \r\n \r\n# Driver Program \r\nprint(FibonacciGenerator(10))",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4531,
            "material": "Operator",
            "instruction": "Create a Python program to calculate the square root of a user-defined positive number.",
            "question": "import math\r\n\r\nn = ___\r\n\r\n#Calculate the square root of a number\r\nsquare_root = math.sqrt(n)\r\n\r\nprint(f'Square root of {n} is {square_root}')",
            "correct_answer": "100",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4532,
            "material": "Operator",
            "instruction": "Create a Python function to remove all non-alphanumeric characters from a string.",
            "question": "def clean_string(string):\r\n    cleanedString = \"\"\r\n    for c in string:\r\n        if c.isalnum():   \r\n            cleanedString += ___ \r\n  \r\n    return cleanedString",
            "correct_answer": "c",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4553,
            "material": "Operator",
            "instruction": "Create a python program to create a dictionary with key-value pairs using two lists",
            "question": "keys = [\"a\", \"b\", \"c\"]\r\nvalues = [1, 2, 3]\r\n\r\nd = ___(zip(keys, values))\r\nprint(d) # output: {'a': 1, 'b': 2, 'c': 3}",
            "correct_answer": "dict",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4587,
            "material": "Operator",
            "instruction": "Create a Python program that calculates the average of 3 grades and returns a grade level using the following scale:\r\n\r\n90-100: A\r\n80-89: B\r\n70-79: C\r\n60-69: D\r\nBelow 60: F",
            "question": "def get_grade_level(grades):\r\n  average = ___(grades) / len(grades)\r\n  if average >= 90:\r\n    grade_level = 'A'\r\n  elif average >= 80:\r\n    grade_level = 'B'\r\n  elif average >= 70:\r\n    grade_level = 'C'\r\n  elif average >= 60:\r\n    grade_level = 'D'\r\n  else:\r\n    grade_level = 'F'\r\n\r\n  return grade_level",
            "correct_answer": "sum",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4589,
            "material": "Operator",
            "instruction": "Write a Python program to search through a list of dictionaries for a specific key-value pair, and return the corresponding value.",
            "question": "def search(lst, key, value):\r\n for dict in lst:\r\n  if dict[key] == ___:\r\n   return dict[value]\r\nreturn None\r\n\r\n#search for name with id 2\r\nsearch(L, 'id', 2)\r\n#outputs 'Alice'",
            "correct_answer": "value",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4592,
            "material": "Operator",
            "instruction": "Convert a Python program that uses for-loops to one that uses only while-loops.",
            "question": "i = ___ \r\nwhile i < 3: \r\n    print(i) \r\n    i += 1",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4669,
            "material": "Operator",
            "instruction": "Write a Python function which, when given a string of text and a n number, returns a list of all n-grams within that string.",
            "question": "def n_grams(string, n):\r\n  tokens = ___.split()\r\n  n_grams = []\r\n  for i in range(len(tokens)-n+1):\r\n    n_grams.append(tokens[i:i+n])\r\n  return n_grams",
            "correct_answer": "string",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4678,
            "material": "Operator",
            "instruction": "Generate a python script to convert a string to a list of single-character strings in the same order.",
            "question": "def string_to_list(s):\r\n    l = []\r\n    for c in s:\r\n        l.append(c)\r\n    return l\r\n\r\nl = ___('GPT')\r\nprint(l)",
            "correct_answer": "string_to_list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4710,
            "material": "Operator",
            "instruction": "Design a Python script that converts Miles/hour to Kilometers/hour.",
            "question": "def mph_to_kph(speed):\r\n kph = ___ * 1.609\r\n return kph",
            "correct_answer": "speed",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4745,
            "material": "Operator",
            "instruction": "Edit a given Python program to make it bug-free.",
            "question": "def foo():\r\n   i = ___\r\n   for x in range(10):\r\n      i = i + x\r\n   return i\r\n\r\nprint(foo())",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4801,
            "material": "Operator",
            "instruction": "Compose an algorithm in Python that accepts a phone number and formats it in the (xxx) xxx-xxxx format.",
            "question": "def format_phone_number(phone_num):\r\n    return f\"({phone_num[:3]}) {phone_num[3:6]}-{phone_num[6:]}\"\r\n\r\nnumber = \"1234567890\"\r\nformatted_number = ___(number)\r\nprint(formatted_number)",
            "correct_answer": "format_phone_number",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4857,
            "material": "Operator",
            "instruction": "Write a Python program to generate a random list of length n containing integers within range (0, n-1).",
            "question": "import random \r\n  \r\ndef random_list(n): \r\n    # Generating a random list of length n\r\n    random_list = [] \r\n    for i in range(n): \r\n        random_list.append(random.randint(0,n-1)) \r\n      \r\n    return random_list \r\n  \r\n# Driver Code \r\nn = ___\r\nprint(random_list(n))",
            "correct_answer": "6",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4880,
            "material": "Operator",
            "instruction": "Construct a code in Python to count the number of alphabets in an user-entered string.",
            "question": "def countAlpha(str): \r\n\tcount = ___\r\n\tfor char in str:\r\n\t\tif char.isalpha():\r\n\t\t\tcount += 1\r\n\treturn count \r\n\r\nstr = \"Hello World\"\r\nresult = countAlpha(str)\r\nprint(\"Number of alphabets:\", result)",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4952,
            "material": "Operator",
            "instruction": "Write a Python program which accepts a sequence of comma-separated numbers from console and generates a list.",
            "question": "numbers = ___(\"Please enter a sequence of comma-separated numbers:\")\r\n\r\nnum_list = numbers.split(',')\r\n\r\nnum_list = list(map(int, num_list))\r\n\r\nprint(num_list)",
            "correct_answer": "input",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4964,
            "material": "Operator",
            "instruction": "Write a Python program to convert a list of numbers into a comma-separated string.",
            "question": "def listToString(numbers):\r\n return ','.join(str(num) for num in numbers)\r\n\r\nlist = [7, 8, 9, 10]\r\nresult = ___(list)\r\n\r\nprint(result)\r\n\r\n# Output: '7,8,9,10'",
            "correct_answer": "listToString",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4977,
            "material": "Operator",
            "instruction": "Create a confidence-based voting system in Python.",
            "question": "def confidence_voting(predictions):\r\n classifier_sum = ___\r\n total_confidence = 0\r\n for classifier, prediction in predictions.items(): \r\n     classifier_sum += prediction \r\n     total_confidence += (classifier_sum * prediction)\r\n return total_confidence/classifier_sum",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4993,
            "material": "Operator",
            "instruction": "Add a try-catch block to the given Python code",
            "question": "try:\r\n  x = ___\r\n  y = 0\r\n  z = x/y\r\nexcept ZeroDivisionError:\r\n  print(\"ZeroDivisionError occurred: Cannot divide a number by 0\")",
            "correct_answer": "10",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5014,
            "material": "Operator",
            "instruction": "Write a python program to calculate the maximum of 3-d array and return the value.",
            "question": "def calc_max(arr):\r\n    max_val = ___[0][0][0]\r\n    for i in range(len(arr)):\r\n        for j in range(len(arr[i])):\r\n            for k in range(len(arr[i][j])):\r\n                if arr[i][j][k] > max_val:\r\n                    max_val = arr[i][j][k]\r\n    return max_val\r\n\r\nprint(calc_max(arr))",
            "correct_answer": "arr",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5042,
            "material": "Operator",
            "instruction": "Write a function in Python to find the first non-repeating character in a given string.",
            "question": "def non_repeating_char(s):\r\n    char_freq = {}\r\n    for c in s:\r\n        if c in char_freq:\r\n            char_freq[c] += ___\r\n        else:\r\n            char_freq[c] = 1\r\n    \r\n    for c in s:\r\n        if char_freq[c] == 1:\r\n            return c\r\n\r\nif __name__ == '__main__':\r\n    print(non_repeating_char(\"the quick brown fox jumps over the lazy dog\"))",
            "correct_answer": "1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5059,
            "material": "Operator",
            "instruction": "Generate a Python program to edit a given list of strings and remove the duplicates in-place.",
            "question": "list = [\"AB\", \"AC\", \"AB\", \"CD\", \"AC\"]\r\n\r\nseen = ___()\r\nres = []\r\n\r\nfor item in list:\r\n    if item in seen:\r\n        continue\r\n    seen.add(item)\r\n    res.append(item)\r\n\r\nlist[:] = res\r\n\r\nprint(list)",
            "correct_answer": "set",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5084,
            "material": "Operator",
            "instruction": "Create a Python script for cleaning up text and removing non-alphabetic characters.",
            "question": "import re\r\n\r\ntext = \"This text contains some non-alphabetic characters, like \u201c%.\u201d\"\r\n\r\nclean_text = ___.sub(r'[^a-zA-Z ]', '', text)\r\n\r\nprint(clean_text)\r\n\r\n# Output: This text contains some alphabetic characters",
            "correct_answer": "re",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5090,
            "material": "Operator",
            "instruction": "Find the smallest number in the given list without using any built-in Python functions or sorting.",
            "question": "def find_smallest(arr):\r\n    smallest = ___\r\n    for n in arr:\r\n        if smallest is None or n < smallest:\r\n            smallest = n\r\n    return smallest\r\n    \r\narr = [8, 3, 9, 5, 1]\r\nsmallest = find_smallest(arr)\r\nprint(smallest)",
            "correct_answer": "None",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5114,
            "material": "Operator",
            "instruction": "Write a Python program to assign every character in a given string a unique number (e.g. a=1, b=2, c=3 and so on).",
            "question": "char_dictionary = {}\r\n\r\ncounter = ___\r\n\r\nfor char in string:\r\n if char in char_dictionary.keys():\r\n continue\r\n else:\r\n char_dictionary[char] = counter\r\n counter += 1\r\n\r\nprint(char_dictionary)\r\n# Output: {'H': 1, 'e': 2, 'l': 3, 'o': 4, ', ': 5, 'W': 6, 'r': 7, 'd': 8, '!': 9}",
            "correct_answer": "1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5119,
            "material": "Operator",
            "instruction": "Write an Algorithm in Python that takes in a comma-separated string of numbers and returns the sum of the numbers.",
            "question": "def sumString(s):\r\n nums = ___.split(',')\r\n total = 0\r\n for num in nums:\r\n total += int(num)\r\n return total",
            "correct_answer": "s",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5125,
            "material": "Operator",
            "instruction": "Implement the popular depth-first search (DFS) algorithm with Python.",
            "question": "def dfs(graph, start):\r\n    visited, stack = ___(), [start]\r\n    while stack:\r\n        vertex = stack.pop()\r\n        if vertex not in visited:\r\n            visited.add(vertex)\r\n            stack.extend(graph[vertex] - visited)\r\n    return visited",
            "correct_answer": "set",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5145,
            "material": "Operator",
            "instruction": "Design a Python 3 program that takes as input from the user two comma-separated lists of integers and then finds the union of the two lists.",
            "question": "list1 = [1,2,3,4]\r\nlist2 = [6,5,4,3]\r\n\r\ndef findUnion(list1, list2):\r\n unionList = ___\r\n for item in list2:\r\n  if item not in unionList:\r\n   unionList.append(item)\r\n return unionList\r\n\r\nunion = findUnion(list1, list2)\r\nprint(union) # prints [1, 2, 3, 4, 6, 5]",
            "correct_answer": "list1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5156,
            "material": "Operator",
            "instruction": "Improve the performance of the following code using Python's in-built functions.",
            "question": "s = 'Google'\r\n# improved code\r\n# use of built-in functions to count the number of occurrences of 'o' in a string\r\ncount = ___.count('o')\r\n\r\nprint('Number of occurrences of \"o\": {}'.format(count))",
            "correct_answer": "s",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5157,
            "material": "Operator",
            "instruction": "Create a web-scraping program in Python to scrape movie reviews from IMDb.",
            "question": "import requests\r\nimport bs4\r\n \r\nurl = \"https://www.imdb.com/title/tt0816692/reviews?ref_=tt_urv\"\r\npage = ___.get(url).text\r\nsoup = bs4.BeautifulSoup(page, 'html.parser')\r\n\r\nreviews = soup.find_all(class_=\"text show-more__control\")\r\nfor review in reviews:\r\n    print(review.get_text())",
            "correct_answer": "requests",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5166,
            "material": "Operator",
            "instruction": "Write an algorithm in Python to generate a random non-repeating integer array of size N",
            "question": "import random \r\n\r\ndef random_array(N): \r\n \r\n    result = [] \r\n  \r\n    for i in range(N): \r\n  \r\n        # Stores the number in result after checking for its presence. \r\n        data = ___.randint(1, 100) \r\n  \r\n        if data not in result: \r\n            result.append(data) \r\n          \r\n    return result \r\n\r\n# Driver Code \r\nN = 10\r\nres = random_array(N) \r\nprint(res)",
            "correct_answer": "random",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5167,
            "material": "Operator",
            "instruction": "Create a function in Python that takes an array of strings and returns an array with the strings sorted in reverse-alphabetical order.",
            "question": "def reverse_sort(arr): \r\n    return sorted(arr, reverse=True) \r\n  \r\n# driver code \r\narr = [\"tomato\", \"apple\", \"mango\"] \r\nsorted_arr = ___(arr) \r\n  \r\nprint(sorted_arr)",
            "correct_answer": "reverse_sort",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5180,
            "material": "Operator",
            "instruction": "Create a method in Python to format a date from the format dd-mm-yyyy to yyyy-mm-dd.",
            "question": "def format_date(date):\r\n    splitted_date = ___.split(\"-\")\r\n    reformatted_date = splitted_date[::-1]\r\n    return \"-\".join(reformatted_date)\r\n\r\nformat_date(\"10-05-2020\")",
            "correct_answer": "date",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5252,
            "material": "Operator",
            "instruction": "Write a Python program to classify the given dataset using k-means clustering.",
            "question": "from sklearn.cluster import KMeans\r\n\r\ndef cluster_data(x_points, y_points):\r\n X = ___(zip(x_points, y_points))\r\n clustering_model = KMeans(n_clusters=3)\r\n clustering_model.fit(X)\r\n labels = clustering_model.labels_\r\n return labels",
            "correct_answer": "list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5257,
            "material": "Operator",
            "instruction": "Compute the dot product of two 1-d vectors using Python.",
            "question": "def dot_product(x, y):\r\n    result = ___\r\n    for i in range(len(x)):\r\n        result += x[i] * y[i]\r\n    return result",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5265,
            "material": "Operator",
            "instruction": "Write a Python program to convert a given list to a dictionary with each item as a key-value pair.",
            "question": "list = [(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4)]\r\n\r\nd = ___(list)\r\n\r\nprint(d)\r\n# Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}",
            "correct_answer": "dict",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5311,
            "material": "Operator",
            "instruction": "Create a web-scraping script with Python to extract information from a website with 20 thousand pages.",
            "question": "import requests\r\nimport bs4\r\n\r\nurl = 'https://example.com'\r\n\r\nwhile True:\r\n response = ___.get(url)\r\n soup = bs4.BeautifulSoup(response.text, 'html.parser')\r\n\r\n # Extract information here\r\n\r\n next_page_url = soup.find('a', {'class': 'next-page'})\r\n if next_page_url:\r\n url = next_page_url['href']\r\n else:\r\n break",
            "correct_answer": "requests",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5319,
            "material": "Operator",
            "instruction": "Create a code snippet in Python to find the missing number in an array of length n-1 when all numbers from 1 to n are present.",
            "question": "def missing_number(nums): \r\n     \r\n    full_list = ___(range(1,len(nums)+1))\r\n    return (set(full_list) - set(nums)).pop()\r\n\r\nnums = [7, 5, 6, 4, 2]\r\nresult = missing_number(nums) \r\nprint('Missing number is', result)",
            "correct_answer": "list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5420,
            "material": "Operator",
            "instruction": "Edit the following Python code to implement case-insensitivity and replace \"word\" with a user-defined variable.",
            "question": "word = ___('Enter word: ')\r\n\r\nif word.lower() == 'super':\r\n print('Object found')",
            "correct_answer": "input",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5429,
            "material": "Operator",
            "instruction": "Set up conditions for a for-loop for iterating over a dictionary in Python.",
            "question": "keys = ___.keys()\r\nfor i in keys:\r\n    value = dict[i]\r\n    print(i, \":\", value)",
            "correct_answer": "dict",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5471,
            "material": "Operator",
            "instruction": "Write a Python program to sort a given list in ascending order without using built-in functions.",
            "question": "def sort_list(lst):\r\n    for i in range(0, len(lst)):\r\n        for j in range(i+1, len(lst)):\r\n            if lst[i] > ___[j]:\r\n                lst[i], lst[j] = lst[j], lst[i]\r\n    \r\n    return lst\r\n\r\nprint(sort_list([3, 7, 4, 1, 9])) # prints [1, 3, 4, 7, 9]",
            "correct_answer": "lst",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5593,
            "material": "Operator",
            "instruction": "Generate a Python function that takes two matrices (2-dimensional lists) as inputs and returns the result of matrix multiplication.",
            "question": "def multiply_matrix(A,B):\r\nresult = [[0,0], [0,0]]\r\nfor i in range(len(A)):\r\n for j in range(len(B[0])):\r\n for k in range(len(B)):\r\n result[i][j] += ___[i][k] * B[k][j]\r\nreturn result\r\n\r\n# example\r\nA = [[1, 2], [3, 4]]\r\nB = [[5, 6], [7, 8]]\r\nprint(multiply_matrix(A, B)) \r\n# [[19, 22], [43, 50]]",
            "correct_answer": "A",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5632,
            "material": "Operator",
            "instruction": "Construct a correct python program to evaluate the expression y = (1/x) + x^2.",
            "question": "x = ___\r\n\r\ndef evaluate_expression(x):\r\n    y = (1 / x) + (x ** 2)\r\n    return y",
            "correct_answer": "5",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5637,
            "material": "Operator",
            "instruction": "Write a Python program to generate a random string of length n from a set of characters consisting of lowercase (a-z) and uppercase (A-Z).",
            "question": "import string\r\nimport random\r\n\r\nlength = ___\r\nchars = string.ascii_letters\r\n\r\nrandom_string = ''.join(random.choice(chars) for x in range(length))\r\n\r\nprint(random_string)",
            "correct_answer": "7",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5640,
            "material": "Operator",
            "instruction": "Write a Python program that web-scrapes data from a website and stores it in a structured format (e.g. JSON, CSV).",
            "question": "import requests\r\nimport json\r\n\r\n# Make a get request to get the data\r\nresponse = ___.get('https://example.com')\r\n\r\n# Store the data in a structured format\r\ndata = json.loads(response.text)\r\n\r\n# Save the data to a json file\r\nwith open('example.json', 'w') as f:\r\n json.dump(data, f)",
            "correct_answer": "requests",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5642,
            "material": "Operator",
            "instruction": "Write a Python program which takes a string and returns the first non-repeated character.",
            "question": "def first_non_repeated_char(input): \r\n    counts = {} \r\n    chars = [] \r\n    for char in input: \r\n        if char in counts: \r\n            counts[char] += ___\r\n        else: \r\n            counts[char] = 1\r\n            chars.append(char) \r\n  \r\n    for char in chars: \r\n        if counts[char] == 1: \r\n            return char \r\n  \r\n    return None",
            "correct_answer": "1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5643,
            "material": "Operator",
            "instruction": "Create a Python program to generate an ISO8601-compliant string from a given date",
            "question": "from datetime import datetime\r\n\r\ndate_str = '2020-07-15'\r\ndate = ___.strptime(date_str, '%Y-%m-%d')\r\niso8601_str = date.isoformat()\r\n\r\nprint(iso8601_str)\r\n# Output: 2020-07-15T00:00:00",
            "correct_answer": "datetime",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5698,
            "material": "Operator",
            "instruction": "Generate a program using Python that takes a user-defined dictionary with string values and returns the reversed key-value mappings.",
            "question": "myDict = {\"one\": \"apple\",\"two\": \"banana\",\"three\": \"pear\" }\r\n\r\nreverseMyDict = {}\r\n\r\nfor key, value in myDict.items():\r\n reverseMyDict[value] = ___\r\n\r\nprint(reverseMyDict) # Output: {'apple': 'one', 'banana': 'two', 'pear': 'three'}",
            "correct_answer": "key",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5701,
            "material": "Operator",
            "instruction": "Convert a string of comma-separated values into a list in Python.",
            "question": "str = \"apple, banana, orange\"\r\n\r\n# split the string\r\nstring_list = ___.split(', ')\r\n\r\n# print result\r\nprint(string_list)  # ['apple', 'banana', 'orange']",
            "correct_answer": "str",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5740,
            "material": "Operator",
            "instruction": "Write a Python program to generate a dictionary that contains a number (between 1 and n) in the form (x, x*x).",
            "question": "def generate_dict(n):\r\n    my_dict = {}\r\n    for num in range(1, n+1):\r\n        my_dict[num] = ___ * num\r\n    return my_dict\r\n\r\nprint(generate_dict(8)) # {1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64}",
            "correct_answer": "num",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5753,
            "material": "Operator",
            "instruction": "Write a Python program to remove the nth index character from a non-empty string.",
            "question": "def remove_character(string, index):\r\n    return string[:index] + ___[index+1:]\r\n\r\ninput_string =  'Hello World!'\r\nindex = 5\r\n\r\nprint(remove_character(input_string, index))",
            "correct_answer": "string",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5766,
            "material": "Operator",
            "instruction": "Create a Python program to generate the n-th item in the Fibonacci sequence.",
            "question": "def Fibonacci(n): \r\n    if n<0: \r\n        print(\"Incorrect input\") \r\n    # First Fibonacci number is 0 \r\n    elif n==1: \r\n        return 0\r\n    # Second Fibonacci number is 1 \r\n    elif n==2: \r\n        return 1\r\n    else: \r\n        return Fibonacci(n-1)+Fibonacci(n-2) \r\n\r\n# Driver Code \r\nn = ___\r\nprint(Fibonacci(n))",
            "correct_answer": "5",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5767,
            "material": "Operator",
            "instruction": "Modify the following Python code to add a try/except block to catch any errors.",
            "question": "def add_numbers(a, b):\r\n try:\r\n  sum = ___ + b\r\n except:\r\n  print(\"Error: Could not compute the sum of the numbers\")\r\n  return None\r\n else:\r\n  return sum",
            "correct_answer": "a",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5771,
            "material": "Operator",
            "instruction": "Generate a python code to evaluate a given polynomial at a given x-value.",
            "question": "def evaluate_polynomial(polynomial, x):\r\n    result = ___\r\n \r\n    for i in range(len(polynomial)):\r\n        result += polynomial[i] * x**i\r\n \r\n    return result\r\n \r\nprint(evaluate_polynomial(polynomial, x))",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5960,
            "material": "Operator",
            "instruction": "Create a Python function to find the maximum number from a list of non-negative integers.",
            "question": "def find_max(list): \r\n  max_num = ___\r\n  for i in list: \r\n    if i > max_num: \r\n      max_num = i\r\n  \r\n  return max_num\r\n\r\nlist = [1, 3, 12, 5, 8, 10]\r\nmax_num = find_max(list)\r\nprint(\"Maximum number is:\", max_num)",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5998,
            "material": "Operator",
            "instruction": "Write a Python function that takes two integers, n and base, as parameters and returns a string representation of the base-n number.",
            "question": "def base_n(n, base):\r\n    result = \"\"\r\n    while n != ___:\r\n        result += str(n % base)\r\n        n //= base\r\n    return result[::-1]  # Reverse the string",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6015,
            "material": "Operator",
            "instruction": "Create a base-2 binary addition calculator in Python.",
            "question": "def binary_addition(a, b):\r\n    a_bin = ___(int(a,2))[2:]\r\n    b_bin = bin(int(b,2))[2:]\r\n    c_bin = bin(int(a_bin, 2) + int(b_bin, 2))[2:]\r\n    c = c_bin.zfill(max(len(a), len(b)))\r\n    return c\r\n\r\nresult = binary_addition('010', '101')\r\nprint(result)",
            "correct_answer": "bin",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6035,
            "material": "Operator",
            "instruction": "Write a Python program to parse a JSON string and extract a specific key-value pair.",
            "question": "import json\r\n \r\nmyJSON = '{\"key\": \"value1\", \r\n           \"anotherKey\": \"value2\", \r\n           \"somekey\": \"somevalue\"}'\r\n \r\n# parse json\r\nparsedJSON = ___.loads(myJSON)\r\n \r\n# access data\r\nkey = parsedJSON['key']\r\nvalue = parsedJSON['value']\r\n \r\n# print key and value\r\nprint(\"key: \" + key)\r\nprint(\"value: \" + value)",
            "correct_answer": "json",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6065,
            "material": "Operator",
            "instruction": "Create an if-else statement to check if a number is a multiple of 3 in Python.",
            "question": "if num % ___ == 0: \r\n    print(\"Number is multiple of 3\")\r\nelse: \r\n    print(\"Number is not a multiple of 3\")",
            "correct_answer": "3",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6081,
            "material": "Operator",
            "instruction": "Write a Python program that takes a number n and generates a dictionary that contains (i, i*i) such that n is greater than or equal to i >= 1 and",
            "question": "def generate_dict(n):\r\n    d = {}\r\n    for i in range(1, n+1):\r\n       d[i] = ___*i\r\n    return d",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6115,
            "material": "Operator",
            "instruction": "Write a Python code that takes in data points in time-series and returns the average of the data points for the given period.",
            "question": "def average_of_period(arr):\r\n    return sum(arr) / ___(arr)\r\n\r\nresult = average_of_period([1, 3, 4, 5, 3, 9, 6])\r\nprint(result)",
            "correct_answer": "len",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6176,
            "material": "Operator",
            "instruction": "Create a simple Python script that takes a single command-line parameter and prints out \"Hello <parameter>\" to the console.",
            "question": "import sys\r\n\r\nname = ___.argv[1]\r\nprint(\"Hello {}\".format(name)) # Output: Hello John",
            "correct_answer": "sys",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6202,
            "material": "Operator",
            "instruction": "Develop a program using Python to replace all the non-alphanumeric characters in a given string with an asterisk ('*')?",
            "question": "import re\r\n\r\ndef replaceNonAlphanum(s):\r\n    pattern = ___\"[^a-zA-Z0-9]\"\r\n    return re.sub(pattern, \"*\", s)\r\n\r\ns = \"Hello* World_$!\"\r\nprint(replaceNonAlphanum(s))\r\n// Output: Hello** World**$*",
            "correct_answer": "r",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6247,
            "material": "Operator",
            "instruction": "Re-write the following SQL query into Python code.",
            "question": "# define the parameters for the query\r\ncolumn1 = 'value1'\r\ncolumn2 = 'value2'\r\n\r\n# execute the query\r\nresult = ___.objects.filter(column1=column1, column2=column2)",
            "correct_answer": "table",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6301,
            "material": "Operator",
            "instruction": "Develop a Python program for randomly generating a 3-D object of n cubes",
            "question": "from random import random\r\n\r\ndef generate_cubed_object(n):\r\n    objects = []\r\n    for i in range(n):\r\n        x = ___()\r\n        y = random()\r\n        z = random()\r\n        objects.append([x, y, z])\r\n    return objects\r\n\r\nprint(generate_cubed_object(8)) # [[0.4, 0.2, 0.3], [0.5, 0.6, 0.7], ....]",
            "correct_answer": "random",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6320,
            "material": "Operator",
            "instruction": "Write a Python program to add numbers from different columns of a multi-dimensional array.",
            "question": "arr = [[1, 2, 3], \r\n[4, 5, 6], \r\n[7, 8, 9]] \r\n\r\n# Initialize result \r\nresult = ___\r\n\r\n# Iterate every element in the array \r\nfor row in arr: \r\n  for col in row:\r\n    # Adding elements of each row \r\n    result = result + col  \r\n\r\n# Displaying sum \r\nprint(result)\r\n\r\n# Output: 45",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6377,
            "material": "Operator",
            "instruction": "Write a Python program to classify a given set of inputs into clusters using k-means algorithm",
            "question": "from sklearn.cluster import KMeans \r\nimport numpy as np \r\n\r\ndata_points = ___.array(data_points) \r\n\r\nkmeans = KMeans(n_clusters=2,random_state=0).fit(data_points) \r\nclusters = kmeans.labels_ \r\n  \r\nprint(clusters)",
            "correct_answer": "np",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6431,
            "material": "Operator",
            "instruction": "Write a Python program to find the maximum and minimum numbers from a non-empty list.",
            "question": "# Initializing the list\r\nlist1 = [5, 6, 10, -9, 3, 21]\r\n\r\n# Maximum and Minimum in a List\r\n\r\nmax = ___[0]\r\nmin = list1[0]\r\n\r\n# Print all the list elements\r\nfor i in range(0, len(list1)):\r\n    if list1[i]>max:\r\n        max = list1[i]\r\n    if list1[i]<min:\r\n        min = list1[i]\r\n\r\nprint(\"The max value is:\", max)\r\nprint(\"The min value is:\", min)",
            "correct_answer": "list1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6453,
            "material": "Operator",
            "instruction": "Perform a linear-time search on a given list of numbers in Python.",
            "question": "def linear_search(lst, x):\r\n    for i in range(len(lst)):\r\n        if lst[i] == ___:\r\n            return i\r\n    return -1\r\n\r\nprint(linear_search([5,3,7,2,1], 3))",
            "correct_answer": "x",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6461,
            "material": "Operator",
            "instruction": "Write a Python program to identify numbers from a comma-separated string.",
            "question": "mystring = \"1,2,3,4,5,6,7,8,9\"\r\n\r\nnumbers = ___.split(\",\")\r\nfor num in numbers:\r\n    print(int(num))",
            "correct_answer": "mystring",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6475,
            "material": "Operator",
            "instruction": "Create a string manipulation program in Python that takes a user input string and outputs a version of the string with all characters in upper-case.",
            "question": "userString = ___(\"Enter a string: \")\r\nuppercasedString = userString.upper()\r\nprint(uppercasedString)",
            "correct_answer": "input",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6484,
            "material": "Operator",
            "instruction": "Write a Python code that takes a string as input and removes all punctuation and non-alphabetic characters.",
            "question": "def remove_non_alphabetic(string):\r\n    new_string = \"\"\r\n    for char in string:\r\n        if char.isalpha():\r\n            new_string += ___\r\n    return new_string\r\n\r\nprint(remove_non_alphabetic(string)) # prints Thisisstring",
            "correct_answer": "char",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6539,
            "material": "Operator",
            "instruction": "Create a Python program to group a list of numbers into two lists according to their parity (even/odd) in the most efficient way.",
            "question": "even_list = []\r\nodd_list = []\r\n\r\nfor num in input_list:\r\n if num % ___ == 0:\r\n even_list.append(num)\r\n else:\r\n odd_list.append(num)\r\n\r\nprint('Even list:', even_list)\r\nprint('Odd list:', odd_list)",
            "correct_answer": "2",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6543,
            "material": "Operator",
            "instruction": "Edit the given Python code to add a try-except block.",
            "question": "try:\r\n  x = ___\r\n  y = 0\r\n  z = x/y\r\n  print(z)\r\nexcept ZeroDivisionError as e:\r\n  print('Cannot divide by zero!')",
            "correct_answer": "5",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6569,
            "material": "Operator",
            "instruction": "Edit the following Python code to include a try/except block to catch any ValueError errors that occur.",
            "question": "def check_input(val):\r\n try:\r\n if type(val) != ___:\r\n return False\r\n else:\r\n return True\r\n except ValueError:\r\n print('Input is not a string!')",
            "correct_answer": "str",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6577,
            "material": "Operator",
            "instruction": "Write a correct python program to find the minimum value in an array of integers, without using in-built functions.",
            "question": "def find_min(arr):\r\n    # Initialize the minimum value\r\n    min_val = ___[0]\r\n\r\n    # Iterate through the array\r\n    for i in range(1, len(arr)):\r\n        if arr[i] < min_val:\r\n            min_val = arr[i]\r\n\r\n    return min_val",
            "correct_answer": "arr",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6590,
            "material": "Operator",
            "instruction": "Create a Python function to convert Pascal Case string to hyphen-separated string.",
            "question": "def convert_pascal_to_hyphen(string):\r\n    output_string = \"\"\r\n    for char in string:\r\n        if char.isupper():\r\n            output_string += \"-\"+char.lower()\r\n        else:\r\n            output_string += ___\r\n    return output_string[1:]\r\n    \r\nconvert_pascal_to_hyphen(\"HelloWorld\")",
            "correct_answer": "char",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6598,
            "material": "Operator",
            "instruction": "Create a program for counting the number of elements present in a user-provided array using Python.",
            "question": "def count_elements(array):\r\n    count = ___\r\n    for item in array:\r\n        count += 1\r\n    return count\r\n\r\nuser_array = [1, 5, 15, 20]\r\nresult = count_elements(user_array)\r\nprint(result) # 4",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6602,
            "material": "Operator",
            "instruction": "Create a Python program to sort a given list of integers in descending order without using a library/built-in function.",
            "question": "def sort_list(lst):\r\n    for i in range(len(lst) - ___):\r\n        for j in range(i+1, len(lst)):\r\n            if lst[i] < lst[j]:\r\n                lst[i], lst[j] = lst[j], lst[i]\r\n    return lst",
            "correct_answer": "1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6648,
            "material": "Operator",
            "instruction": "Replace the for-loop in the following Python function with an equivalent while loop.",
            "question": "def count_down(value):\r\n    ret = ___\r\n    while value > 0:\r\n        ret *= value\r\n        value -= 1\r\n    return ret",
            "correct_answer": "1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6704,
            "material": "Operator",
            "instruction": "Rewrite the following Python code avoiding nested if-statements.",
            "question": "def check_integer(x):\r\n  if x <= ___:\r\n    return False\r\n  if x*x > 10:\r\n    return True\r\n  return False",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6758,
            "material": "Operator",
            "instruction": "Create a Python program to calculate the sum of series 1 + \u00bd + \u2153 + ... + 1/n.",
            "question": "def seriesSum(n):\r\n    # set the initial sum to 0\r\n    total = ___\r\n\r\n    # loop over the range\r\n    for i in range(1, n+1):\r\n        total += 1 / i\r\n\r\n    return total\r\n\r\nprint(seriesSum(5))",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6760,
            "material": "Operator",
            "instruction": "Improve the following code by simplifying it using Python's built-in functions.",
            "question": "def add_two_nums(a, b):\r\n return a * ___",
            "correct_answer": "b",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6761,
            "material": "Operator",
            "instruction": "Write a function in Python that takes in a size n and returns the n-th prime number.",
            "question": "def nth_prime_number(n):\r\n    prime_numbers = [2]\r\n    i = ___\r\n    while len(prime_numbers) < n:\r\n        for number in prime_numbers:\r\n            if i % number == 0:\r\n                break\r\n        else:\r\n            prime_numbers.append(i)\r\n        i+= 2\r\n    return prime_numbers[-1]\r\n\r\n\r\n# test \r\nprime_number = nth_prime_number(5)\r\nprint(prime_number) # Output: 11",
            "correct_answer": "3",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6841,
            "material": "Operator",
            "instruction": "Create a Python program that takes a 3-word string and prints individual words in the same order on separate lines.",
            "question": "sentence = \"Hooray! Great!\"\r\nwords = ___.split(' ')\r\nfor word in words:\r\n print(word)",
            "correct_answer": "sentence",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6898,
            "material": "Operator",
            "instruction": "Edit the python code to add try-except blocks for any potential error.",
            "question": "def function(num1, num2):\r\n try:\r\n result = ___/num2;\r\n return result;\r\n except ZeroDivisionError:\r\n  print(\"Division by 0 not allowed\")",
            "correct_answer": "num1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6915,
            "material": "Operator",
            "instruction": "Write a function in Python that calculates the maximum value in a 2-dimensional array.",
            "question": "def find_max_val(arr):\r\n    max_val = ___\r\n\r\n    for lst in arr:\r\n        for num in lst:\r\n            if num > max_val:\r\n                max_val = num\r\n    return max_val\r\n\r\nprint(find_max_val([[1, 4, 8], [7, 9, 6]])) # Output: 9",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6934,
            "material": "Operator",
            "instruction": "Write a for-loop in Python to find the average of 5 numbers.",
            "question": "total = ___\r\nfor num in [10, 15, 20, 25, 30]:\r\n    total += num\r\n\r\naverage = total / 5\r\nprint(average)",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6971,
            "material": "Operator",
            "instruction": "Create a python program to find the power of a number without using the built-in functions.",
            "question": "def power_of(x, n):\r\n    result = ___\r\n    for i in range(n):\r\n        result = result * x\r\n    return result\r\n\r\npower = power_of(2, 5)\r\nprint(power)",
            "correct_answer": "1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6974,
            "material": "Operator",
            "instruction": "Develop a Python program to find the distance between two points on the x-axis.",
            "question": "# Calculate distance between two points\r\ndef findDistance(x1, x2):\r\n return abs(x2 - ___)\r\n\r\nx1 = -3\r\nx2 = 4\r\ndistance = findDistance(x1, x2)\r\n\r\nprint(\"Distance:\", distance)",
            "correct_answer": "x1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6997,
            "material": "Operator",
            "instruction": "Create a Python program that takes a list as input and sorts it using bubble-sort algorithm.",
            "question": "def bubble_sort(lst): \r\n    for i in range(len(lst)): \r\n        for j in range(0, len(lst)-i-1): \r\n            if lst[j] > ___[j+1] : \r\n                lst[j], lst[j+1] = lst[j+1], lst[j]\r\n \r\nlist = [3,2,5,6,1,4]\r\nbubble_sort(list)\r\nprint('Sorted list is: ', list)",
            "correct_answer": "lst",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7124,
            "material": "Operator",
            "instruction": "Create a python program to find the fibonacci series up to n-th number.",
            "question": "def fibonacci(n):\r\n    if n == ___:\r\n        return 0\r\n    elif n == 1:\r\n        return 1\r\n    \r\n    fib = [0, 1]\r\n    for i in range(2, n + 1):\r\n        fib.append(fib[i - 1] + fib[i - 2])\r\n    return fib[-1]\r\n\r\nresult = fibonacci(8)\r\nprint(result) # 13",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7156,
            "material": "Operator",
            "instruction": "Write an algorithm in Python that finds the maximum sum of an array of non-negative integers, given an upper limit value.",
            "question": "def findMaxSum(limit, array):\r\n    maxSum = ___\r\n    for i in range(len(array)):\r\n        currentSum = 0\r\n        for j in range(i, len(array)):\r\n            currentSum += array[j]\r\n            if currentSum <= limit and currentSum > maxSum:\r\n                maxSum = currentSum\r\n    return maxSum",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7179,
            "material": "Operator",
            "instruction": "Generate a Python program that will convert an array of strings with comma-separated values to a comma-separated string.",
            "question": "def to_csv(input_list):\r\n  return ','.join(input_list)\r\n\r\nif __name__ == '__main__':\r\n  input_list = ['John','Joseph','Shirley']\r\n  output_str = ___(input_list)\r\n  print(f'Result: {output_str}')",
            "correct_answer": "to_csv",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7211,
            "material": "Operator",
            "instruction": "Write a Python script to generate a dictionary that contains (i, i*i) such that i is an integer from 1 to n (both included).",
            "question": "n = ___\r\nmy_dict = {} \r\nfor i in range(1, n+1): \r\n    my_dict[i] = i * i\r\n\r\nprint(my_dict)",
            "correct_answer": "3",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7264,
            "material": "Operator",
            "instruction": "Design a Python program to switch the indices of two values in a given 2-dimensional array.",
            "question": "def switchIndexes(arr): \r\n    result = [[0 for i in range(len(arr[0]))] for j in range(len(arr))] \r\n    for i in range(0, len(arr)): \r\n        for j in range(0, len(arr[0])): \r\n            result[j][i] = ___[i][j] \r\n    return result \r\n\r\nswitchIndexes(arr)",
            "correct_answer": "arr",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7265,
            "material": "Operator",
            "instruction": "Convert the given Python program from procedural to object-oriented.",
            "question": "class Multiplier:\r\n    def __init__(self):\r\n        pass\r\n \r\n    def multiply(self, a, b):\r\n        c = ___ * b\r\n        print(\"Result is: \", c)\r\n\r\nmult = Multiplier()\r\nmult.multiply(a, b)",
            "correct_answer": "a",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7337,
            "material": "Operator",
            "instruction": "Generate a Python script to sort a given list of numbers without using the built-in function ``sort()``",
            "question": "def sort_list(list):\r\n    '''This function will sort a given list of numbers without using the built-in function sort()'''\r\n    for i in range(len(list)):\r\n        for j in range(i+1, len(list)):\r\n            if list[i] > ___[j]:\r\n                list[i], list[j] = list[j], list[i]\r\n    return list",
            "correct_answer": "list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7361,
            "material": "Operator",
            "instruction": "Write a Python program to find the first non-repeated letter in a string.",
            "question": "def first_non_repeating_letter(str):\r\n    for char in str:\r\n        if str.lower().count(char.lower()) == ___:\r\n            return char\r\n\r\n    return ''\r\n\r\n# main\r\nstr = \"apple\"\r\nprint(\"First non-repeating letter:\", first_non_repeating_letter(str))",
            "correct_answer": "1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7410,
            "material": "Operator",
            "instruction": "Generate a Python Program that sorts a list of numbers in non-increasing order",
            "question": "def descending_sort(list): \r\n    list.sort(reverse=True) \r\n    return list\r\n\r\nlist = [3, 8, 1, 5]\r\nresult = ___(list)\r\nprint(result)",
            "correct_answer": "descending_sort",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7521,
            "material": "Operator",
            "instruction": "Create a Python program to average the elements of a 2-dimensional array.",
            "question": "def averageMatrix(matrix):\r\n sum = ___\r\n for row in matrix:\r\n  for e in row:\r\n   sum += e\r\n\r\n return sum / (len(matrix) * len(matrix[0]))\r\n\r\na = [[3,2,6],\r\n     [8,5,9],\r\n     [4,7,1]]\r\n\r\nprint(averageMatrix(a)) # 4.77",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7537,
            "material": "Operator",
            "instruction": "Write a web scraper in Python that extracts the price of Apple's iPhone from an e-commerce website.",
            "question": "import requests\r\nfrom bs4 import BeautifulSoup\r\n\r\nlink = 'https://store.apple.com/us/buy-iphone/iphone-11'\r\n\r\npage = ___.get(link)\r\nsoup = BeautifulSoup(page.content, 'html.parser')\r\n\r\nprice = soup.find('span', id='pricing-product-price-value').text\r\nprint(price)",
            "correct_answer": "requests",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7541,
            "material": "Operator",
            "instruction": "Develop a Python program to remove all characters from an input string that are not a-z, A-Z, 0-9, or white space.",
            "question": "import re\r\n\r\ndef remove_non_alphanum(s):\r\n  return re.sub('[^a-zA-Z0-9 \\n\\.]', '', s)\r\n\r\nstring = \"Hello,@ $World.\"\r\nres = ___(string) \r\n\r\nprint(res)",
            "correct_answer": "remove_non_alphanum",
            "attempts": "1",
            "duration": "20"
        }
    ]
}