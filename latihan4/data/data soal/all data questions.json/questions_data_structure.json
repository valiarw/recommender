{
    "quiz": [
        {
            "question_id": 8,
            "material": "Data Structure",
            "instruction": "Please generate a Python script that calculates the mean of a given array of numbers.",
            "question": "def calculateMean(array):\r\n    # sum up all elements in the array ___ = 0\r\n    for i in range(len(array)):\r\n        mean += array[i]\r\n    # calculate the mean by dividing the sum by number of elements\r\n    mean /= len(array)\r\n    return mean\r\n\r\narray = [4, 9, 3, 5]\r\nmean = calculateMean(array)\r\nprint(mean)",
            "correct_answer": "mean",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 15,
            "material": "Data Structure",
            "instruction": "Suggest a way to randomize the order of the following list using Python.",
            "question": "import random\r\narray = [1, 2, 3, 4, 5, 6]\r\nrandom.shuffle(array)  # shuffle list ___-place using a random permutation",
            "correct_answer": "in",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 19,
            "material": "Data Structure",
            "instruction": "Write a Python program to remove an item from a list whose index is specified.",
            "question": "def removeSpecifiedIndex(list, index): \r\n  # using list ___ \r\n  new_list = [list[i] for i in range(len(list)) if i != index]  \r\n\r\n  return new_list \r\n\r\nlist = ['Apple', 'Orange', 'Banana', 'Mango']  \r\nindex = 2\r\n\r\nprint(removeSpecifiedIndex(list, index))",
            "correct_answer": "comprehension",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 28,
            "material": "Data Structure",
            "instruction": "Write a function in Python that takes an array of integers and its size as parameters and returns the maximum value in the array.",
            "question": "def findMax(arr, n):\r\n # Initializing max with first element of array ___ = arr[0]\r\n\r\n # Starting loop from second element\r\n for i in range(1, n):\r\n # Comparing max with remaining elements of array\r\n if arr[i] > max:\r\n max = arr[i]\r\n\r\n # Returning maximum\r\n return max",
            "correct_answer": "max",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 44,
            "material": "Data Structure",
            "instruction": "Create an algorithm using Python to find the largest number in a list.",
            "question": "def find_largest_number(numbers):\r\n    # Finds the largest number from the given list ___ = 0\r\n    for num in numbers:\r\n        if num > largest:\r\n            largest = num\r\n    return largest\r\n \r\nnumbers = [8, 5, 10, 3]\r\nlargest = find_largest_number(numbers)\r\nprint(largest)",
            "correct_answer": "largest",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 95,
            "material": "Data Structure",
            "instruction": "Write code in Python to calculate the mean for a given list of numbers.",
            "question": "import numpy as np \r\n\r\n# given list ___ numbers \r\nlist = [4, 17, 12, 78, 43, 13, 94, 77] \r\n\r\n# calculating mean \r\nmean = np.mean(list) \r\n\r\n# printing mean \r\nprint(\"Mean:\", mean)",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 111,
            "material": "Data Structure",
            "instruction": "Write a Python program for computing the sum of a given array of integers.",
            "question": "def compute_sum(int_arry):\r\n    sum = 0\r\n    # loop through each element in the array ___ i in int_arry:\r\n        sum += i\r\n    return sum\r\n\r\n# example testing code\r\nint_arry = [1, 2, 3, 4, 5]\r\ntotal_sum = compute_sum(int_arry)\r\n\r\nprint(\"Sum of array elements is\", total_sum)",
            "correct_answer": "for",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 169,
            "material": "Data Structure",
            "instruction": "Write a Python program to edit a list given some criteria.",
            "question": "def edit_list(list, criteria):\r\n    return [x for x in list ___ criteria(x) == True]",
            "correct_answer": "if",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 192,
            "material": "Data Structure",
            "instruction": "Create a function in Python that shuffles the order of the items in a list.",
            "question": "import random \r\n  \r\ndef shuffle_list(arr): \r\n      \r\n    # Shuffle given list ___.shuffle(arr) \r\n    return arr \r\n  \r\n# Driver function \r\narr = [1,2,3,4,5]\r\n\r\nprint(\"Initial list: \\n\",arr)\r\nprint(\"\\nFinal list: \\n\",shuffle_list(arr))",
            "correct_answer": "random",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 205,
            "material": "Data Structure",
            "instruction": "Create a python program that takes a list of numbers and returns the sum of all the numbers in the list.",
            "question": "def sum_list(list_of_numbers):\r\n  total = 0\r\n  for num in list_of_numbers:\r\n    total += num\r\n  return total\r\n  \r\n# Main\r\nnums = [1, 2, 3, 4, 5]\r\ntotal_sum = sum_list(nums)\r\n\r\nprint('Sum of list ___: ', total_sum)",
            "correct_answer": "elements",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 214,
            "material": "Data Structure",
            "instruction": "Write a Python program to find all palindromic words in a given list.",
            "question": "def palindrome_words(words): \r\n    \"\"\"This function takes in a list ___ words and returns a list of palindromic words\"\"\"\r\n\r\n    palindrome_words = []\r\n\r\n    for word in words:\r\n        if word == word[::-1]:\r\n            palindrome_words.append(word)\r\n\r\n    return palindrome_words",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 238,
            "material": "Data Structure",
            "instruction": "Write a Python code snippet which sorts a list by the values of the 2nd element of each tuple in the list.",
            "question": "unsorted_list = [(1, 2), (3, 1), (2, 3)]\r\n\r\ndef take_second(el):\r\n     return el[1]\r\n\r\n# sorting list \r\n# the second elements of tuples \r\nsorted_list = sorted(unsorted_list, key = take_second) \r\n\r\n# printing sorted list ___(sorted_list)",
            "correct_answer": "print",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 254,
            "material": "Data Structure",
            "instruction": "Write a Python program to read a list of integers from the user and find the smallest number.",
            "question": "list_of_numbers = input(\"Please enter a list ___ numbers: \").split()\r\nlist_of_numbers = [int(x) for x in list_of_numbers] \r\n\r\nmin_number = min(list_of_numbers)\r\nprint(\"The smallest number is:\", min_number)",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 291,
            "material": "Data Structure",
            "instruction": "Design a function in Python to sort the given list of numbers in descending order.",
            "question": "def descendingSort(nums):\r\n    # sort list ___ reverse order\r\n    nums.sort(reverse=True)\r\n    return nums\r\n\r\nprint(descendingSort([2, 4, 1, 6, 9, 8]))",
            "correct_answer": "in",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 320,
            "material": "Data Structure",
            "instruction": "Convert a list of numbers into strings using Python.",
            "question": "# Create an empty list ___ strings\r\nnumber_strings = []\r\n\r\n# Loops through the list of numbers\r\nfor n in [5, 10, 15]:\r\n    # Appends a string version of the number to the list\r\n    number_strings.append(str(n))\r\n\r\nprint(number_strings)   # ['5', '10', '15']",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 323,
            "material": "Data Structure",
            "instruction": "Generate a program in Python to find the median of a list of numbers.",
            "question": "def median(nums):\r\n    nums.sort()\r\n    length = len(nums)\r\n \r\n    if length % 2 == 0:\r\n        return (nums[length//2] + nums[(length//2)-1])/2.0\r\n    else:\r\n        return nums[length//2] \r\n\r\nlist = [5, 8, 2, 7, 4]\r\nmed = median(list)\r\nprint('The median of the list ___ ' + str(med))",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 346,
            "material": "Data Structure",
            "instruction": "Create a program in Python that given a list of integer inputs, sorts them in descending order.",
            "question": "list = [4, 9, 2, 6, 5]\r\n\r\n# sort list ___ descending order\r\nlist.sort(reverse=True)\r\n\r\nprint(list) # [9, 6, 5, 4, 2]",
            "correct_answer": "in",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 355,
            "material": "Data Structure",
            "instruction": "Create a function in Python that takes in an array of integers and returns the odd numbers from that array.",
            "question": "def get_odd_numbers(arr):\r\n    # Create an empty list ___ store the odd numbers\r\n    odd_numbers = []\r\n\r\n    # Iterate through and check for odd numbers\r\n    for num in arr:\r\n        if num % 2 != 0:\r\n            odd_numbers.append(num)\r\n    \r\n    return odd_numbers\r\n\r\narr = [1, 2, 3, 4, 5]\r\n\r\nodd_numbers = get_odd_numbers(arr)\r\n\r\nprint('Odd numbers: ', odd_numbers)",
            "correct_answer": "to",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 386,
            "material": "Data Structure",
            "instruction": "Create a function to perform list sorting using Python.",
            "question": "def sortList(list):\r\n    list.sort()\r\n    return list ___ = sortList([4, 5, 2, 1, 3])\r\nprint(sortedList)",
            "correct_answer": "sortedList",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 407,
            "material": "Data Structure",
            "instruction": "Design a program in Python to filter a given array of integers and output only the even numbers.",
            "question": "def filterEvenNo(arr): \r\n\r\n  # return a list ___ only even numbers\r\n  return [num for num in arr if num % 2 == 0]",
            "correct_answer": "containing",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 435,
            "material": "Data Structure",
            "instruction": "Generate a Python script that takes in a list of numbers, rearranges them in ascending order, and prints out the result.",
            "question": "def sort_list(nums): \r\n    # Sort list ___ ascending order\r\n    nums.sort()\r\n    \r\n    # Print out the sorted list\r\n    for num in nums: \r\n        print(num) \r\n  \r\n# Test the function\r\nnums = [3, 2, 5, 7, 1, 4]\r\nsort_list(nums)",
            "correct_answer": "in",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 505,
            "material": "Data Structure",
            "instruction": "Develop a python program that sorts a given list of words in lexicographic order.",
            "question": "# Sort a list ___ words in lexicographic order\r\nwords = [\"apple\", \"bike\", \"dog\", \"cat\"]\r\n\r\n# Sort the list\r\nwords.sort()\r\n\r\n# Print the list\r\nprint(words)\r\n\r\n# Output:\r\n# ['apple', 'bike', 'cat', 'dog']",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 554,
            "material": "Data Structure",
            "instruction": "Create an algorithm in Python to calculate the mean of a given list.",
            "question": "def calculate_mean(numbers):\r\n    # Get the length of the list ___ = len(numbers)\r\n    # Sum up all the elements in the list\r\n    total = 0\r\n    for num in numbers:\r\n        total += num\r\n    # Divide the total with the length of the list\r\n    mean = total / numbers_len\r\n    # Return the mean\r\n    return mean\r\n\r\nmean = calculate_mean([1,2,3,4])\r\nprint(mean)",
            "correct_answer": "numbers_len",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 607,
            "material": "Data Structure",
            "instruction": "Create an algorithm in Python to sort an array of integers.",
            "question": "def quicksort(array):\r\n  if len(array) <= 1:\r\n    return array ___ = array[len(array) // 2]\r\n  left = [x for x in array if x < pivot]\r\n  middle = [x for x in array if x == pivot]\r\n  right = [x for x in array if x > pivot]\r\n  return quicksort(left) + middle + quicksort(right)\r\n\r\n# test\r\narray = [2, 1, 6, 5, 8]\r\nprint(quicksort(array))",
            "correct_answer": "pivot",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 628,
            "material": "Data Structure",
            "instruction": "Create an algorithm in Python to find the average of numbers in a list.",
            "question": "def find_average(lst):\r\n    sum = 0\r\n    for num in lst: \r\n        sum += num \r\n    # average calculation \r\n    avg = sum / len(lst)  \r\n      \r\n    return avg\r\n\r\naverage = find_average([3, 5, 7, 9, 11])\r\nprint(\"The average of the numbers in the list ___:\", average)",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 733,
            "material": "Data Structure",
            "instruction": "Create a Python script to sort the numbers in an array.",
            "question": "def sort_array(array):\r\n    array.sort()\r\n    return array ___ = sort_array([2, 4, 5, 1, 3])\r\nprint(result)",
            "correct_answer": "result",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 743,
            "material": "Data Structure",
            "instruction": "Optimize the following Python code for calculating the sum of an array.",
            "question": "arr = [1, 2, 3, 4, 5, 6]\r\ntotal = sum(arr) # use sum() to sum up all elements of the array ___ one line",
            "correct_answer": "in",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 774,
            "material": "Data Structure",
            "instruction": "Modify this Python code to insert the number 5 into a list at the 5th position.",
            "question": "data = [1, 2, 3, 4] \r\n\r\n# insert ___ '5' at 5th position \r\ndata.insert(4, 5) \r\nprint(\"Modified list:\") \r\nprint(data)",
            "correct_answer": "element",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 776,
            "material": "Data Structure",
            "instruction": "Write a Python script for finding the maximum and minimum value in a given list.",
            "question": "list = [1,5,6,8,7]\r\nmin_val = min(list)\r\nmax_val = max(list)\r\n\r\nprint(\"Minimum value in list ___: %d\"%min_val)\r\nprint(\"Maximum value in list is: %d\"%max_val)",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 792,
            "material": "Data Structure",
            "instruction": "Implement a program in Python to find the average of an array of length n.",
            "question": "def findAverage(arr):\r\n    # Initialize sum\r\n    sum = 0\r\n \r\n    # Iterate over the array ___ calculate sum\r\n    for n in arr:\r\n        sum += n\r\n \r\n    # Calculate the average and return  \r\n    return sum/len(arr)\r\n\r\n\r\n# Driver code\r\narr = [2, 4, 6, 8, 10]\r\nprint(findAverage(arr))",
            "correct_answer": "to",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 809,
            "material": "Data Structure",
            "instruction": "Create an algorithm in Python 3 to find the largest number in a list.",
            "question": "def find_largest(list): \r\n    n = len(list) \r\n    max = list[0] \r\n    for i in range(1,n): \r\n        if list[i] > max: \r\n            max = list[i] \r\n    return max \r\n\r\nlist = [1, 7, 3, 4, 9, 2]\r\nlargest_number = find_largest(list) \r\nprint(\"Largest number in the given list ___:\", largest_number)",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 814,
            "material": "Data Structure",
            "instruction": "Create a Python program to search a list for the maximum value.",
            "question": "def findMax(list): \r\n    max = list[0] \r\n    for i in range(1, len(list)): \r\n        if list[i] > max: \r\n            max = list[i] \r\n    return max\r\n\r\nlist = [1, 2, 3, 9, 8, 4] \r\nprint(\"The maximum element in the list ___:\", findMax(list))",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 839,
            "material": "Data Structure",
            "instruction": "Edit the following Python code to reverse the list.",
            "question": "list1 = [1,2,3,4,5,6]\r\n\r\n# Reversing the list ___ = list1[::-1] # Output: [6, 5, 4, 3, 2, 1]",
            "correct_answer": "list1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 846,
            "material": "Data Structure",
            "instruction": "Provide a python program that computes the maximum value from a given set of values",
            "question": "# Create a list ___ our values\r\nvalues = [13, 33, 45, 3, 5, 17, 19, 21]\r\n\r\n# Initialize maximum value\r\nmax_val = 0\r\n\r\n# Iterate over the list\r\nfor val in values:\r\n    # Compare with current maximum value\r\n    if val > max_val:\r\n        # Update maximum value\r\n        max_val = val\r\n\r\n# Print the maximum value\r\nprint(\"Maximum value:\", max_val)",
            "correct_answer": "for",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 867,
            "material": "Data Structure",
            "instruction": "Compose a Python program for finding the median value of an unsorted array.",
            "question": "def median(arr):\r\n    # Sort the array ___.sort()\r\n\r\n    # Calculate length\r\n    n = len(arr)\r\n\r\n    # Check if n is even\r\n    if n % 2 == 0:\r\n        median1 = arr[n // 2]\r\n        median2 = arr[n // 2 - 1]\r\n        median = (median1 + median2) / 2\r\n    else:\r\n        median = arr[n // 2]\r\n\r\n    return median\r\n\r\narr = [4, 5, 6, 7, 8, 1, 2]\r\nresult = median(arr)\r\nprint(result) # 4.5",
            "correct_answer": "arr",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 893,
            "material": "Data Structure",
            "instruction": "Generate a Python script for sorting a list in ascending order.",
            "question": "def sortList(list): \r\n    list.sort() \r\n    return list ___ = [3, 4, 8, 5, 10]\r\nsorted_list = sortList(unsorted_list)\r\n\r\nprint(\"Sorted list:\", sorted_list)",
            "correct_answer": "unsorted_list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 913,
            "material": "Data Structure",
            "instruction": "Create a function in Python that takes in a list and sorts it in ascending order.",
            "question": "def sortList(list):\r\n list.sort()\r\n return list ___(sortList([3, 5, 1, 2, 9])) # Output: [1, 2, 3, 5, 9]",
            "correct_answer": "print",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 914,
            "material": "Data Structure",
            "instruction": "Create a function in Python to produce a ``new_list`` which contains substring elements from the given ``list``",
            "question": "def produce_new_list(list):\r\n    '''This function will return a new list ___ substrings from the given list'''\r\n    new_list = []\r\n\r\n    for item in list:\r\n        for i in range(0, len(item)):\r\n            new_list.append(item[0:i+1])  \r\n\r\n    return new_list",
            "correct_answer": "containing",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 926,
            "material": "Data Structure",
            "instruction": "Create a Python script to calculate the median of an array of integers.",
            "question": "def median(arr): \r\n # Sort the array ___.sort() \r\n n = len(arr) \r\n  \r\n # If number of elements is odd, \r\n # return the middle element \r\n if n % 2 != 0: \r\n  return arr[n//2] \r\n  \r\n # If number of elements is even, \r\n # return the average of the middle \r\n # two elements \r\n else:\r\n  return (arr[n//2] + arr[(n//2)-1]) / 2\r\n\r\n# Driver code \r\narr = [3, 1, 4, 5, 2] \r\nprint(median(arr))",
            "correct_answer": "arr",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 977,
            "material": "Data Structure",
            "instruction": "Design and program a Python function to find the maximum number from an array of integers",
            "question": "def max_num(arr):\r\n    max_num = arr[0]\r\n    for i in arr:\r\n        if i > max_num:\r\n            max_num = i\r\n    return max_num\r\n\r\nif __name__ == '__main__':\r\n    arr = [10, 2, 4, 6, 8, 9]\r\n    print('The maximum number in array ___', max_num(arr))",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 984,
            "material": "Data Structure",
            "instruction": "Write a Python program to display the most commonly occurring item in a list.",
            "question": "from collections import Counter\r\n\r\nlist_items = [1, 7, 3, 8, 2, 9, 3, 5, 5, 8, 7, 3]\r\n\r\ncounter = Counter(list_items)\r\nmost_common_item = counter.most_common()[0][0]\r\n\r\nprint(f'The most commonly occuring item in the list ___ {most_common_item}.')",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 996,
            "material": "Data Structure",
            "instruction": "Generate a Python program to check if any element of a given list is palindrome or not.",
            "question": "list1 = [12, 121, 3]\r\n\r\n# Iterate through the list ___ element in list1:\r\n    # Convert the element to a string\r\n    element = str(element)\r\n    \r\n    # Check if the element is a palindrome\r\n    if element == element[::-1]:\r\n        print(element + \" is a palindrome\")\r\n    else:\r\n        print(element + \" is not a palindrome\")",
            "correct_answer": "for",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 999,
            "material": "Data Structure",
            "instruction": "Write Python code to create a new list from the given list based on a condition",
            "question": "new_list = []\r\nfor i, v in enumerate(list):\r\n    if (i+1) % 2 == 0: # +1 since your list ___ 0 indexed\r\n        new_list.append(v)\r\nprint(new_list) # prints [2,4]",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1037,
            "material": "Data Structure",
            "instruction": "Create a program in Python that takes a list of strings as input, sorts the strings in alphabetical order, and prints out the list in reverse alphabetical order.",
            "question": "# create a list ___ = [\"cat\", \"bird\", \"dog\", \"zebra\", \"ant\"]\r\n \r\n# sort the list\r\nsample_list.sort()\r\n \r\n# reverse the list\r\nsample_list.reverse()\r\n \r\n# print the reversed list\r\nprint(sample_list)\r\n# ['zebra', 'dog', 'cat', 'bird', 'ant']",
            "correct_answer": "sample_list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1038,
            "material": "Data Structure",
            "instruction": "Can you build a program in Python to calculate the median of a given list of integers?",
            "question": "def median(list): \r\n\tlist.sort() \r\n\tlength = len(list) \r\n\tif length % 2 == 0: \r\n\t\treturn sum(list[int(length / 2) - 1:int(length / 2) + 1]) / 2\r\n\telse: \r\n\t\treturn list[int(length / 2)] \r\n\r\nmedian_of_list = median([4, 9, 12, 8, 1]) \r\nprint(\"Median of the list ___: \" + str(median_of_list)) \r\n# Output: 8",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1055,
            "material": "Data Structure",
            "instruction": "Create a Python script to calculate the running sum of an array.",
            "question": "# Create a function to compute running sum\r\ndef running_sum(lst):\r\n    running_sum = 0\r\n    running_lst = []\r\n    for num in lst:\r\n        running_sum += num\r\n        running_lst.append(running_sum)\r\n    return running_lst\r\n\r\n# Test array ___ = [1, 2, 3, 4, 5]\r\n\r\n# Print the result\r\nprint(running_sum(test))",
            "correct_answer": "test",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1073,
            "material": "Data Structure",
            "instruction": "Generate a Python program to delete an item from a given list.",
            "question": "def remove_item(item, list): \r\n    list.remove(item) \r\n    return list ___ = [8, 4, 5, 9, 2]\r\n  \r\nresult = remove_item(5, list_org)\r\nprint(result)",
            "correct_answer": "list_org",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1084,
            "material": "Data Structure",
            "instruction": "Create a function in Python to read specified properties from a list.",
            "question": "def read_props(props):\r\n    \"\"\"\r\n    Read listed properties from a list.\r\n    \r\n    Args:\r\n        props (list): The list ___ properties to be read.\r\n    \r\n    Returns:\r\n        tuple: Returns a tuple with values of the specified properties.\r\n    \"\"\"\r\n    data = list()\r\n    for prop in props:\r\n        data.append(input(\"Enter {}: \".format(prop)))\r\n    return tuple(data)",
            "correct_answer": "containing",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1086,
            "material": "Data Structure",
            "instruction": "Generate a python program to assign each row of a 2D array to a variable.",
            "question": "def assign_variables(matrix):\r\n    # Create an empty list ___ contain all the row variables\r\n    variables = []\r\n    \r\n    # Iterate over the matrix\r\n    for row in matrix:\r\n        # Assign each row to a variable\r\n        rowVar = row\r\n        # Add the row variable to the list\r\n        variables.append(rowVar)\r\n        \r\n    # Return the list of row variables\r\n    return variables",
            "correct_answer": "to",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1087,
            "material": "Data Structure",
            "instruction": "Write Python code to select values greater than 2 in a given list.",
            "question": "list = [1, 2, 3, 4, 5]\r\n \r\nresult = [value for value in list ___ value > 2]\r\n \r\nprint(result)",
            "correct_answer": "if",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1103,
            "material": "Data Structure",
            "instruction": "Implement a sorting algorithm in Python that sorts a given array of numbers.",
            "question": "def sort_array(array):\r\n    for i in range(len(array)): \r\n        min_idx = i \r\n        for j in range(i+1, len(array)): \r\n            if array[min_idx] > array[j]: \r\n                min_idx = j       \r\n        array[i], array[min_idx] = array[min_idx], array[i]\r\n    return array ___ = sort_array(array)\r\nprint(result) // Output: [1, 2, 3, 4, 5, 7]",
            "correct_answer": "result",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1203,
            "material": "Data Structure",
            "instruction": "Rewrite the following code to use list comprehension in Python.",
            "question": "big_list = [value for value in list ___ value % 2 == 0]",
            "correct_answer": "if",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1205,
            "material": "Data Structure",
            "instruction": "Modify a given Python list by adding a certain value to each element.",
            "question": "# Modifying the list ___ adding 'value' to each element\r\nfor i in range(len(list)):\r\n    list[i] = list[i] + value\r\n\r\n# Print the modified list\r\nprint(list)\r\n# [11, 12, 13, 14, 15]",
            "correct_answer": "by",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1223,
            "material": "Data Structure",
            "instruction": "Compute the sum of list integers using Python.",
            "question": "mylist = [3, 5, 7, 9]\r\ntotal = 0\r\n\r\nfor item in mylist:\r\n   total = total + item\r\n\r\nprint(\"The sum of list ___ is:\", total)",
            "correct_answer": "items",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1241,
            "material": "Data Structure",
            "instruction": "Implement a bubble sort algorithm in Python to sort a list of numbers from lowest to highest.",
            "question": "def bubble_sort(array):\r\n    for i in range(len(array)):\r\n        for j in range(i + 1, len(array)):\r\n            if array[i] > array[j]:\r\n                array[i], array[j] = array[j], array[i]\r\n    return array ___ = [5, 3, 1, 4, 7]\r\nsorted_arr = bubble_sort(arr)\r\nprint(sorted_arr)",
            "correct_answer": "arr",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1278,
            "material": "Data Structure",
            "instruction": "Design a Python program which sorts a list of integers from lowest to highest.",
            "question": "def sort_list(list):\r\n     for i in range(0, len(list)): \r\n          for j in range(0, len(list) - 1 - i): \r\n               if list[j] > list[j + 1]: \r\n                    list[j], list[j + 1] = list[j + 1], list[j]\r\n     return list ___ = [5, 2, 4, 1, 3]\r\n\r\nsorted_list = sort_list(list)\r\n\r\nprint(sorted_list)",
            "correct_answer": "list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1282,
            "material": "Data Structure",
            "instruction": "Can you write a python program to identify the last index of a given element in a list?",
            "question": "# Define the list ___ = [2, 5, 9, 2, 4]\r\n  \r\n# Find the last index of element 2\r\nlast_index = len(list_) - list_[::-1].index(2) - 1\r\n  \r\n# Print the result\r\nprint(last_index)",
            "correct_answer": "list_",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1293,
            "material": "Data Structure",
            "instruction": "Design a Python script that prints out all the even numbers in a given list of numbers.",
            "question": "# given list ___ numbers\r\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\n# empty list for even numbers\r\neven_list = []\r\n\r\n# iterate over the list\r\nfor num in nums:\r\n    # check if number is even\r\n    if num % 2 == 0:\r\n        # append number to even list\r\n        even_list.append(num)\r\n\r\n# print even numbers\r\nprint(even_list)",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1461,
            "material": "Data Structure",
            "instruction": "Generate a function in Python that takes an array of numbers and returns an array of the squares of the numbers.",
            "question": "\"\"\"\r\nA function to return the squares of an array ___ Python \r\n\"\"\"\r\n\r\ndef square_array(input_array): \r\n  squared_array = []\r\n  for i in input_array: \r\n    squared_array.append(i*i)\r\n  return squared_array",
            "correct_answer": "in",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1473,
            "material": "Data Structure",
            "instruction": "Generate a Python program that takes a numerical list and finds the index of the largest value.",
            "question": "# list ___ numbers \r\nlist = [3, 5, 9, 10] \r\n\r\n# maximum number \r\nMaxNum = max(list) \r\n\r\n# index of the maximum number \r\nindex = list.index(MaxNum) \r\n\r\nprint(\"Maximum number is:\", MaxNum) \r\nprint(\"Index of maximum number is:\", index)",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1509,
            "material": "Data Structure",
            "instruction": "Create a python program that takes a sentence and returns a list of words in alphabetical order.",
            "question": "sentence = \"The quick brown fox jumped over the lazy dog.\"\r\n\r\n# Split sentence into words\r\nwords = sentence.split()\r\n\r\n# Sort list ___ words alphabetically\r\nwords.sort()\r\n\r\n# Print sorted list of words\r\nprint(words)\r\n\r\n# Output: ['brown', 'dog.', 'fox', 'The', 'jumped', 'lazy', 'over', 'quick', 'the']",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1526,
            "material": "Data Structure",
            "instruction": "Formulate a script in Python that takes as input an array of integers, and returns the highest number in the array.",
            "question": "def highest_number(arr):\r\n    '''\r\n    Function to get the highest number in an array ___ integers\r\n    \r\n    Parameters\r\n    arr: list of integers\r\n    \r\n    Returns\r\n    highest number in the array\r\n    '''\r\n    highest_num = arr[0]\r\n    for num in arr:\r\n        if num > highest_num:\r\n            highest_num = num\r\n    return highest_num",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1528,
            "material": "Data Structure",
            "instruction": "Is it possible to write a function in Python to convert a given list of lists into a CMOV instruction?",
            "question": "def listoflists_to_cmov(listoflists): \r\n    # Initialise CMOV array ___ = [0]*9\r\n  \r\n    # Fill CMOV array with given list of lists\r\n    for i, list_ in enumerate(listoflists): \r\n        cmov[i*3:(i+1)*3] = list_\r\n\r\n    # Return CMOV array \r\n    return cmov",
            "correct_answer": "cmov",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1534,
            "material": "Data Structure",
            "instruction": "Build a Python program to find the maximum element in a list of numbers.",
            "question": "def maxNum(numsList):\r\n    maxNum = numsList[0]\r\n    for num in numsList:\r\n        if num > maxNum:\r\n            maxNum = num\r\n    return maxNum\r\n\r\nnumList = [4, 9, 10, 11, 12]\r\nprint(\"The maximum number in the list ___:\", maxNum(numList))",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1658,
            "material": "Data Structure",
            "instruction": "Create a Python script to filter out all numbers divisible by 3 in a list.",
            "question": "# Initialize list ___ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\r\n\r\n# Function\r\ndef filter_divisible_by_3(n):\r\n    return [num for num in n if num % 3 != 0]\r\n\r\n# Output\r\nprint(filter_divisible_by_3(n))\r\n# Output: [1, 2, 4, 5, 7, 8, 10, 11, 13]",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1676,
            "material": "Data Structure",
            "instruction": "Write a Python program to optimize an array of numbers so that the sum of elements is maximum and all the elements are greater than 0.",
            "question": "import numpy as np\r\n\r\n# Get the input array ___ = [1,-2,3,4,-5]\r\n\r\n# Optimize the array so that the sum of elements is maximized\r\n# and all the elements are greater than 0\r\nnew_arr = np.max(arr,0)\r\n\r\n# Print the optimized array\r\nprint(\"Optimized Array : \",*new_arr)",
            "correct_answer": "arr",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1729,
            "material": "Data Structure",
            "instruction": "Create a program in Python for finding the maximum in a list of numbers.",
            "question": "def find_max(lst): \r\n \r\n    # Initialize maximum element \r\n    max = lst[0] \r\n   \r\n    # Traverse list ___ \r\n    # from second and compare \r\n    # every element with current max  \r\n    for i in range(1, len(lst)): \r\n        if lst[i] > max: \r\n            max = lst[i] \r\n   \r\n    return max\r\n\r\nmax_num = find_max([2, 3, 4, 9, 5])\r\nprint(\"The maximum number in the list is:\",max_num)",
            "correct_answer": "element",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1736,
            "material": "Data Structure",
            "instruction": "Write a Python function that takes a dictionary as input and returns a list of values sorted in ascending order.",
            "question": "def sort_dict_values(d):\r\n    # create a list ___ values from the dictionary\r\n    values = list(d.values())\r\n    # sort the list \r\n    values.sort()\r\n    return values\r\n\r\nresult = sort_dict_values(mydict)\r\nprint(result)",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1743,
            "material": "Data Structure",
            "instruction": "Create a Python program to calculate the average number of items in a list. The list should be taken as input from the user.",
            "question": "list_elements = input('List elements: ').split()\r\n\r\nsum = 0\r\nfor num in list_elements:\r\n sum += int(num)\r\n\r\naverage = sum / len(list_elements)\r\n\r\nprint(f'The average number of items in the list ___ {average}.')",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1748,
            "material": "Data Structure",
            "instruction": "Create a Python function to remove the items in a list that appear multiple times.",
            "question": "def remove_extras(lst):\r\n    # Create a new list ___ unique items\r\n    unique_items = []\r\n    for item in lst:\r\n        if item not in unique_items:\r\n            unique_items.append(item)\r\n\r\n    # Return the list with unique items\r\n    return unique_items\r\n\r\ntest = [\"Apple\", \"Banana\", \"Orange\", \"Apple\", \"Banana\"]\r\nprint(remove_extras(test))",
            "correct_answer": "with",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1827,
            "material": "Data Structure",
            "instruction": "Create a Python program to sort the elements of a list in descending order (largest value first).",
            "question": "numbers = [1, 7, 25, 8, 14]\r\n\r\n# Sort the list ___ descending order\r\nnumbers.sort(reverse=True)\r\n\r\n# Print the sorted list\r\nprint(numbers)\r\n\r\n# Output\r\n[25, 14, 8, 7, 1]",
            "correct_answer": "in",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1833,
            "material": "Data Structure",
            "instruction": "Write a code to convert a JSON object to an array of dictionaries in Python.",
            "question": "#Function to convert a JSON object to an array ___ dictionaries in Python\r\nimport json\r\n\r\ndef json_to_array(data):\r\n    my_dict = json.loads(data)\r\n    return [{k: v} for k, v in my_dict.items()]\r\n\r\n# Driver code\r\ndata = '{ \"Fruit\": \"Apple\", \"Shape\": \"Round\", \"Color\": \"Red\" }'\r\ndict_array = json_to_array(data)\r\nprint(dict_array)",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1884,
            "material": "Data Structure",
            "instruction": "Write a Python program that takes an input list of integers and finds out the sum of all the odd elements in the list.",
            "question": "def sum_odd_elements(int_list):\r\n    '''This function takes a list ___ integers and returns the sum of all the odd elements.'''\r\n    total = 0\r\n    for num in int_list:\r\n        if num % 2 != 0:\r\n            total += num\r\n    return total\r\n\r\nint_list = [2, 3, 4, 5, 6]\r\nsum = sum_odd_elements(int_list)\r\n\r\nprint(sum) # 8",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1885,
            "material": "Data Structure",
            "instruction": "Create a function in Python which takes a list of integers as input and returns a sorted list.",
            "question": "def sort_list(list):\r\n    list.sort()\r\n    return list ___ = sort_list([3, 2, 5, 1, 4])\r\nprint(sorted_list) # output: [1, 2, 3, 4, 5]",
            "correct_answer": "sorted_list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1891,
            "material": "Data Structure",
            "instruction": "Sort a given list using bubble sort in Python.",
            "question": "def bubble_sort(list):\r\n    for i in range(len(list)):\r\n        for j in range(len(list)-1):\r\n            if list[j]>list[j+1]:\r\n                list[j],list[j+1] = list[j+1],list[j]\r\n    return list ___ __name__ == '__main__':\r\n    list = [3,5,2,4,7,5]\r\n    print(bubble_sort(list))",
            "correct_answer": "if",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1896,
            "material": "Data Structure",
            "instruction": "Generate a Python program to calculate the total price of a grocery list given a list of items and their prices.",
            "question": "items = [\r\n    ['apple', 2.00], \r\n    ['banana', 4.00], \r\n    ['bread', 3.50], \r\n    ['orange', 1.50]\r\n]\r\n\r\ntotal = 0\r\n\r\nfor item in items:\r\n    total += item[1]\r\n\r\nprint(\"The total price of the grocery list ___:\", total)",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1942,
            "material": "Data Structure",
            "instruction": "Edit this python code to remove all even numbers from a given list.",
            "question": "\"\"\"\r\nEdit this python code to remove ___ even numbers from a given list.\r\n\"\"\"\r\n\r\nmy_list = [1,2,3,4,5,6,7,8,9,10]\r\n\r\n# Use a list comprehension to remove even numbers\r\nmy_list = [i for i in my_list if i % 2 != 0]\r\n \r\nprint(my_list) # [1, 3, 5, 7, 9]",
            "correct_answer": "all",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1984,
            "material": "Data Structure",
            "instruction": "Optimize a Python program for speed. The program should calculate the sum of a list of numbers and return the result.",
            "question": "def sum_of_numbers(list_of_numbers):\r\n# initialize the result to 0\r\n result = 0\r\n \r\n# Iterate over the list ___ numbers\r\n for num in list_of_numbers:\r\n result += num\r\n \r\n# return the result\r\n return result\r\n \r\n# testing the function\r\nlist_of_numbers = [2, 4, 6, 8, 10]\r\nprint(sum_of_numbers(list_of_numbers))",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1985,
            "material": "Data Structure",
            "instruction": "Construct a code snippet in Python to eliminate all the negative numbers in a given list.",
            "question": "list = [-3, -2, 0, 4, 5]\r\n\r\nlist = [x for x in list ___ x >= 0] \r\n\r\nprint(list)",
            "correct_answer": "if",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2014,
            "material": "Data Structure",
            "instruction": "Create a program in Python that shuffles an array of numbers.",
            "question": "import random\r\n\r\n# Create an array ___ = [1, 5, 8, 11, 3]\r\n\r\n# Function to shuffle an array\r\ndef shuffle_array(arr):\r\n    random.shuffle(arr)\r\n    return arr\r\n\r\n# Shuffle the array and print the result\r\nprint(shuffle_array(arr))",
            "correct_answer": "arr",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2020,
            "material": "Data Structure",
            "instruction": "Construct a python program to flatten a nested list recursively.",
            "question": "# Defining a function to flatten a nested list ___ flatten(list):\r\n    flatlist = []\r\n    for item in list:\r\n        if isinstance(item, list):\r\n            flatlist.extend(flatten(item))\r\n        else:\r\n            flatlist.append(item)\r\n    return flatlist\r\n\r\n# Testing the flatten function\r\nlist = [[1,2,3], [4,5], [6]]\r\nprint(flatten(list)) # [1, 2, 3, 4, 5, 6]",
            "correct_answer": "def",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2024,
            "material": "Data Structure",
            "instruction": "Suggest a function to remove elements of an array that are greater than a given limit",
            "question": "# Python program to remove ___ of an array that are greater than a given limit\r\n\r\ndef remove_above_limit(arr, limit):\r\n    new_arr = [x for x in arr if x <= limit]\r\n    return new_arr",
            "correct_answer": "elements",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2074,
            "material": "Data Structure",
            "instruction": "Create a Python function that sorts the numbers in a given list in ascending order.",
            "question": "def sort_list(list):\r\n    list.sort()\r\n    return list ___ __name__ == \"__main__\":\r\n    l = [8,3,5,2,9,7]\r\n    print(sort_list(l))",
            "correct_answer": "if",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2105,
            "material": "Data Structure",
            "instruction": "Create a Python script to implement a linear search for a given list of numbers.",
            "question": "def linear_search(numbers_list, number):\r\n    \"\"\"Implements a linear search for a given list ___ numbers and returns the index of the number if exists\"\"\"\r\n    \r\n    for index, element in enumerate(numbers_list):\r\n        if element == number:\r\n            return index\r\n    return -1",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2133,
            "material": "Data Structure",
            "instruction": "Give a Python function that shuffles the elements of a given list.",
            "question": "import random\r\n\r\ndef shuffle(list):\r\n    random.shuffle(list)\r\n    return list ___ = [1, 2, 3, 4, 5]\r\nshuffledList = shuffle(list)\r\n\r\nprint(shuffledList)",
            "correct_answer": "list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2142,
            "material": "Data Structure",
            "instruction": "Create a Python script to generate all the combinations of a given list of integers.",
            "question": "def generate_combinations(input_list):\r\n    import itertools\r\n    comb_list = []\r\n    # Get all possible combinations of the list ___ subset in itertools.combinations(input_list,\r\n                                       len(input_list)):\r\n        comb_list.append(subset)\r\n    return comb_list",
            "correct_answer": "for",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2143,
            "material": "Data Structure",
            "instruction": "Write a Python program to edit an array of strings to filter out all the strings that do not contain the given substring.",
            "question": "# Filtering out the strings that don't contain the substring\r\nfiltered_array = [s for s in array ___ substring in s]\r\n\r\nprint(filtered_array)",
            "correct_answer": "if",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2171,
            "material": "Data Structure",
            "instruction": "Create an algorithm in Python that finds all subsets of a given set.",
            "question": "def subsets(S):\r\n\t\"Return all subsets of set ___.\"\r\n\tif len(S) == 0:\r\n\t\treturn [[]]  # list of the empty set\r\n\tT = subsets(S[1:])  # recur on S[1:]\r\n\treturn T + [s + [S[0]] for s in T]  # add S[0] to front of each set in T\r\n\r\n# Sample use\r\nS = ['a', 'b', 'c', 'd']\r\nprint(subsets(S))",
            "correct_answer": "S",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2185,
            "material": "Data Structure",
            "instruction": "Generate a Python program to remove all occurrences of the character 'x' from a list",
            "question": "def remove_x(lst):\r\n    \"\"\"\r\n    Function to remove ___ occurrences of a character 'x' from a list.\r\n\r\n    Args:\r\n        lst (list): The list to process.\r\n\r\n    Returns:\r\n        A list with all occurrences of the character 'x' removed.\r\n    \"\"\"\r\n    \r\n    return [item for item in lst if item != 'x']",
            "correct_answer": "all",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2196,
            "material": "Data Structure",
            "instruction": "Write a Python program to calculate the total sum of a given list of numbers",
            "question": "\"\"\"\r\nCalculate the total sum of a given list ___ numbers using Python\r\n\"\"\"\r\n\r\n# Function to calculate the total sum of a given list of numbers\r\ndef get_total_sum(num_list):\r\n    total = 0\r\n    \r\n    for num in num_list:\r\n        total += num\r\n\r\n    return total\r\n\r\nif __name__ == '__main__':\r\n    num_list = [1,2,3,4,5]\r\n    total_sum = get_total_sum(num_list)\r\n    print(total_sum)",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2210,
            "material": "Data Structure",
            "instruction": "Create a Python program to remove all duplicate elements from a list and preserving the original order.",
            "question": "# Program to remove ___ elements\r\n\r\ndef remove_duplicates(nums):\r\n new_list = []\r\n for num in nums:\r\n if num not in new_list:\r\n new_list.append(num)\r\n \r\nreturn new_list\r\n\r\n# Main program\r\nnums = [1, 3, 3, 5, 5, 7]\r\ndedup_nums = remove_duplicates(nums)\r\nprint(dedup_nums) # [1, 3, 5, 7]",
            "correct_answer": "duplicate",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2218,
            "material": "Data Structure",
            "instruction": "Generate a Python function to classify the given list of numbers into two subgroups (positives and negatives).",
            "question": "def classify_numbers(list):\r\n    '''This function will classify the list ___ numbers into positives and negatives'''\r\n\r\n    positives = []\r\n    negatives = []\r\n\r\n    for n in list:\r\n        if n >= 0:\r\n            positives.append(n)\r\n        else:\r\n            negatives.append(n)\r\n\r\n    return positives, negatives",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2263,
            "material": "Data Structure",
            "instruction": "Write a Python program to create a list of odd numbers between x and y.",
            "question": "# Generate a list ___ odd numbers between x and y\r\ndef odd_numbers(x, y):\r\n  # Initialize an empty list \r\n  odd_list = [] \r\n  \r\n  # Loop through the range\r\n  for i in range(x, y): \r\n    # If the number is odd\r\n    if (i % 2 != 0): \r\n      odd_list.append(i)\r\n  \r\n  return odd_list \r\n  \r\nx = 3\r\ny = 10\r\n\r\n# Get the list of odd numbers\r\nodd_list = odd_numbers(x, y)\r\n\r\n# Print the list\r\nprint(odd_list)",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2270,
            "material": "Data Structure",
            "instruction": "Generate a python program to calculate the number of elements in a set.",
            "question": "# calculate the number of elements in a set ___ = {1, 2, 3, 4, 5}\r\nnum_elements = len(my_set)\r\n\r\nprint(\"Number of elements in the set:\", num_elements)",
            "correct_answer": "my_set",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2294,
            "material": "Data Structure",
            "instruction": "Create a Python package that contains a collection of functions for finding the average value of an array.",
            "question": "def average(array):\r\n '''\r\n Finds the average of all numbers in an array ___:\r\n array (list): List of numbers\r\n\r\n Returns:\r\n float: The average of all values in the array\r\n '''\r\n\r\n total = 0\r\n for value in array:\r\n total += value\r\n\r\n return total / len(array)",
            "correct_answer": "Args",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2313,
            "material": "Data Structure",
            "instruction": "Write a Python program to create a set from a given list and calculate its intersection, union and difference with another set.",
            "question": "# create set ___ list\r\nset1 = set(list1)\r\nset2 = set(list2)\r\n\r\n# calculate set intersection\r\nintersection = set1.intersection(set2)\r\n\r\n# calculate set union\r\nunion = set1.union(set2)\r\n\r\n# calculate set difference\r\ndifference = set1.difference(set2)",
            "correct_answer": "from",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2322,
            "material": "Data Structure",
            "instruction": "Design a class in Python that finds the highest number in a given array of integers.",
            "question": "class HighestNumberFinder:\r\n    def __init__(self, array):\r\n        self.array = array ___ find_highest_number(self):\r\n        highest_number = self.array[0]\r\n        for number in self.array:\r\n            if (number > highest_number):\r\n                highest_number = number\r\n        return highest_number",
            "correct_answer": "def",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2341,
            "material": "Data Structure",
            "instruction": "Write a Python program to delete the third element of a list.",
            "question": "def delete_third_element(list): \r\n    \"\"\"Function to delete the third element of a list\"\"\" \r\n    del ___[2] \r\n    return list\r\n\r\n#Example:\r\nprint(delete_third_element(list))",
            "correct_answer": "list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2347,
            "material": "Data Structure",
            "instruction": "Sum the integers in a Python list.",
            "question": "def sumList(list): \r\n    sum = 0\r\n    for ele in list:\r\n        sum += ele     \r\n    return sum\r\n  \r\nlist = [1, 2, 3, 4, 5] \r\nprint(\"Sum of the elements in given list ___ :\", sumList(list))",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2354,
            "material": "Data Structure",
            "instruction": "Write a function to reverse the elements of a given array in Python.",
            "question": "def reverse_array(arr):\r\n    \"\"\"This function reverses the elements of a given array ___ numbers\r\n    \r\n    Parameters: \r\n        arr (list): The list of numbers to reverse.\r\n\t\r\n    Returns: The reversed array\r\n    \"\"\"\r\n    return arr[::-1]",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2369,
            "material": "Data Structure",
            "instruction": "Generate a Python function that sorts a list of numbers using the bubble sort algorithm",
            "question": "def bubbleSort(list): \r\n\tn = len(list) \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, n-i-1): \r\n\t\t\tif list[j] > list[j+1] : \r\n\t\t\t\tlist[j], list[j+1] = list[j+1], list[j] \r\n\treturn list ___(bubbleSort([8,2,11,9,20,7]))",
            "correct_answer": "print",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2385,
            "material": "Data Structure",
            "instruction": "Given a list of integers, write a Python program to find the maximum value in the array and display its index.",
            "question": "mylist = [3, 2, 5, 8, 6]\r\n\r\n# initialize maximum value and index\r\nmaxval = 0\r\nmaxindex = 0\r\n\r\n# iterate through list ___ i, val in enumerate(mylist):\r\n # check if the current value is greater than the maximum value\r\n if val > maxval:\r\n  maxval = val\r\n  maxindex = i\r\n\r\n# print the result\r\nprint('Maximum value:', maxval)\r\nprint('Index of maximum value:', maxindex)",
            "correct_answer": "for",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2396,
            "material": "Data Structure",
            "instruction": "Find the maximum value of a 10 element array in Python.",
            "question": "# Max value in array ___ max_val(array):\r\n    max_val = array[0]\r\n    for num in array[1:]:\r\n        if num > max_val:\r\n            max_val = num\r\n    return max_val",
            "correct_answer": "def",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2403,
            "material": "Data Structure",
            "instruction": "Create a Python program that takes a list of numbers as an input from the user and prints out the number that appears the most in the list.",
            "question": "list_of_numbers = [int(x) for x in input(\"Please enter a list ___ numbers: \").split(',')]\r\n\r\nc = collections.Counter(list_of_numbers)\r\n\r\nmost_common_num = c.most_common(1)[0][0]\r\n\r\nprint(\"The most common number in the list is \" + str(most_common_num))",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2413,
            "material": "Data Structure",
            "instruction": "Sort a list in Python using the Quick Sort algorithm",
            "question": "def quicksort (array) :\r\n    if len(array) <= 1 :\r\n        return array ___:\r\n        pivot = array[len(array) // 2]\r\n        left = [x for x in array if x < pivot]\r\n        middle = [x for x in array if x == pivot]\r\n        right = [x for x in array if x > pivot]\r\n        return quicksort(left) + middle + quicksort(right)\r\n\r\narray = [5, 2, 9, 1, 4, 12]\r\nresult = quicksort(array)\r\nprint(result)",
            "correct_answer": "else",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2434,
            "material": "Data Structure",
            "instruction": "Using the provided inputs, write a python code that calculates the sum of all the elements in the list.",
            "question": "def calculate_sum(my_list):\r\n    \"\"\" Calculate the sum of all the elements in the list. \"\"\"\r\n    sum = 0\r\n    for elem in my_list:\r\n        sum += elem\r\n    return sum\r\n\r\nmy_list = [1,2,3,4,5,6]\r\ntotal_sum = calculate_sum(my_list)\r\nprint(\"The sum of all elements in the list ___: %d\" %total_sum)",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2450,
            "material": "Data Structure",
            "instruction": "Create a function in Python to perform a linear search on a list of numbers.",
            "question": "def linear_search(numbers, x):\r\n    \"\"\"This function will perform a linear search on a list ___ numbers and return the index of the number if it is present in the list.\"\"\"\r\n    for i in range(len(numbers)):\r\n        if numbers[i] == x:\r\n            return i \r\n    # if the number is not found\r\n    return -1",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2455,
            "material": "Data Structure",
            "instruction": "Generate a Python program to output the maximum element in a given array.",
            "question": "def findMax(arr):\r\n    max_number = arr[0]\r\n    for i in range(1, len(arr)):\r\n        if arr[i] > max_number:\r\n            max_number = arr[i]\r\n    return max_number\r\n\r\narr = [1, 4, 9, 3, 6, 5]\r\nmax_number = findMax(arr)\r\nprint(\"The maximum element in the array ___:\", max_number)",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2475,
            "material": "Data Structure",
            "instruction": "Design a program in Python that uses a loop to iterate through the items in a list.",
            "question": "def loop_through_list(items):\r\n    \"\"\"Iterates through a list ___ items and prints each one\"\"\"\r\n    for item in items:\r\n        print(item)",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2496,
            "material": "Data Structure",
            "instruction": "Write a Python function to sort the following list of numbers with bubble sort algorithm.",
            "question": "def bubble_sort(list): \r\n    n = len(list)  \r\n    for i in range(n-1): \r\n        for j in range(0, n-i-1): \r\n            if list[j] > list[j+1] : \r\n                list[j], list[j+1] = list[j+1], list[j]\r\n    return list\r\n  \r\n# Sample list ___ = [5, 4, 3, 2, 1]\r\n  \r\n# Function Call \r\nbubble_sort(list)",
            "correct_answer": "list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2501,
            "material": "Data Structure",
            "instruction": "Generate a Python program to delete the element at a given index from the given array.",
            "question": "def delete_element_at_index(arr, index):\r\n    if index >= len(arr):\r\n        raise Exception('index out of range')\r\n    \r\n    # Delete the element at the index\r\n    del ___[index]\r\n\r\n# Example array and index\r\nmy_arr = [1,2,3,4,5];\r\nindex = 3;\r\n\r\n# Call the function\r\ndelete_element_at_index(my_arr, index)\r\n\r\n# Print the array\r\nprint(my_arr)",
            "correct_answer": "arr",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2511,
            "material": "Data Structure",
            "instruction": "Create a program in Python to delete all the elements from the list which have a value greater than a given number.",
            "question": "def removeGreaterNum(list, num): \r\n  \r\n    return [x for x in list ___ x < num] \r\n      \r\nlist = [1, 5, 6, 8, 9, 10] \r\nnum = 7\r\nprint(removeGreaterNum(list, num))",
            "correct_answer": "if",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2528,
            "material": "Data Structure",
            "instruction": "Write a python function to remove duplicates from an array.",
            "question": "\"\"\"\r\nRemove duplicates from an array\r\n\"\"\"\r\n\r\ndef remove_duplicates(arr):\r\n    # Create a set ___ = set()\r\n    \r\n    # Traverse the array\r\n    for i in range(len(arr)):\r\n        if arr[i] not in seen:\r\n            seen.add(arr[i])\r\n            \r\n    return seen\r\n\r\nif __name__ == '__main__':\r\n    arr = [1, 2, 3, 3, 3, 4, 5, 6]\r\n    print(remove_duplicates(arr))",
            "correct_answer": "seen",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2553,
            "material": "Data Structure",
            "instruction": "Create a Python program that creates a new list containing only even numbers from a given list.",
            "question": "# create a list ___ = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\n# create a new list with only even numbers \r\neven_list = [num for num in original_list if num % 2 == 0] \r\n  \r\n# display the even list \r\nprint(even_list)",
            "correct_answer": "original_list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2554,
            "material": "Data Structure",
            "instruction": "Create a Python script to remove all empty elements from a list.",
            "question": "list = [\"a\", \"\", \"b\", \"\", \"c\", \"\"] \r\n\r\nresult = [element for element in list ___ len(element) > 0] \r\n\r\nprint(result)",
            "correct_answer": "if",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2567,
            "material": "Data Structure",
            "instruction": "Create a script in Python which receives a list of numbers, and prints the sorted list in ascending order.",
            "question": "list_of_numbers = [7, 3, 4, 2]\r\n\r\n# sort the list ___.sort()\r\n\r\n# print the sorted list\r\nprint(list_of_numbers)",
            "correct_answer": "list_of_numbers",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2571,
            "material": "Data Structure",
            "instruction": "Generate a Python program to insert an element into a given sorted array.",
            "question": "def insert(arr, x):\r\n    i = len(arr)-1\r\n    while (i >= 0 and x < arr[i]):\r\n        arr[i+1] = arr[i]\r\n        i = i-1\r\n    arr[i+1] = x\r\n    return arr\r\n  \r\n# Input array ___ element \r\narr = [1, 2, 3, 5] \r\nx = 4\r\n  \r\n# Calling Insert Function \r\narr = insert(arr, x) \r\n  \r\n# Print the modified array \r\nprint(arr)",
            "correct_answer": "and",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2586,
            "material": "Data Structure",
            "instruction": "Create a Python program to sort a given list according to the second element",
            "question": "def sortList(list):\r\n    list.sort(key=lambda x: x[1]) \r\n    return list ___ = [[2,4], [3,2], [4,1], [1,3]]\r\nsorted_list = sortList(list)\r\n\r\nprint(sorted_list)\r\n\r\n# output\r\n[[4, 1], [3, 2], [1, 3], [2, 4]]",
            "correct_answer": "list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2595,
            "material": "Data Structure",
            "instruction": "Generate a program in Python for sorting the elements of an array in descending order.",
            "question": "def sort_descending(arr):\r\n    # Sort array ___ largest to smallest\r\n    arr.sort(reverse=True)\r\n\r\n    # Print result\r\n    print(arr)\r\n\r\n# Test\r\narr = [2, 4, 1, 6, 5]\r\nsort_descending(arr)\r\n# Output: [6, 5, 4, 2, 1]",
            "correct_answer": "from",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2617,
            "material": "Data Structure",
            "instruction": "Write a Python code snippet to remove the last element from a list.",
            "question": "def remove_last_element(lst):\r\n    last_index = len(lst) - 1\r\n    del ___[last_index]\r\n\r\nexample_list = [3, 1, 5, 7, 4, 8, 2]\r\nremove_last_element(example_list)\r\nprint(example_list) \r\n# Output: [3, 1, 5, 7, 4, 8]",
            "correct_answer": "lst",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2626,
            "material": "Data Structure",
            "instruction": "Design a solution in Python that creates a deep copy of an array of numbers.",
            "question": "original_list = [1,2,3,4,5]\r\n\r\n# Create a copy ___ the original list\r\ncopied_list = original_list[:]\r\n\r\n# Modify the copied list so we can verify that it is a deep copy\r\ncopied_list[0] = 10\r\n\r\n# Print both lists - the original list should be unchanged\r\nprint(\"Original list:\", original_list)\r\nprint(\"Copied list:\", copied_list)",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2649,
            "material": "Data Structure",
            "instruction": "Write a Python program to find the sum of all integers in a given list that are multiples of 8.",
            "question": "# Initializing list ___ = [4, 8, 12, 17, 30] \r\n\r\n# Function to calculate sum \r\ndef sum_multiples(l): \r\n\tsum = 0\r\n\t\r\n\t# iterating over list \r\n\tfor num in l: \r\n\t\t\r\n\t\t# checking for multiples of 8 \r\n\t\tif num % 8 == 0: \r\n\t\t\tsum += num \r\n\t\t\t\r\n\treturn sum\r\n\r\n# Driver code \r\nprint(sum_multiples(l)) \r\n# Output: 20",
            "correct_answer": "l",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2685,
            "material": "Data Structure",
            "instruction": "Write a Python program to create a 1D array of random numbers from 1 to 100.",
            "question": "import random\r\n\r\n# Create a 1-dimensional array ___ size 5\r\narray = [0] * 5\r\n\r\n# Fill the array with random numbers\r\nfor i in range(len(array)):\r\n array[i] = random.randint(1,100)\r\n\r\nprint(array)\r\n\r\n# Output:\r\n# [83, 5, 46, 69, 89]",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2726,
            "material": "Data Structure",
            "instruction": "In Python, create a list comprehension to extract the elements which are even in the given list.",
            "question": "even_list = [x for x in list ___ x%2 == 0]",
            "correct_answer": "if",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2747,
            "material": "Data Structure",
            "instruction": "Design a program to filter out strings in a list that have length 3.",
            "question": "def filter_by_length(list):\r\n    \"\"\"\r\n    Filters out strings in the given list ___ have length 3.\r\n    \"\"\"\r\n    filtered_list = [word for word in list if len(word) == 3]\r\n    return filtered_list\r\n\r\nif __name__ == '__main__':\r\n    list = ['ada', 'python', 'ruby', 'egg', 'coffee']\r\n    print(filter_by_length(list))",
            "correct_answer": "that",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2756,
            "material": "Data Structure",
            "instruction": "Generate a Python script to sort the given list of words.",
            "question": "# function to sort the given list ___ words\r\ndef sort_words(words):\r\n    # sort the list of words in alphabetical order\r\n    words.sort()\r\n\r\n    # print the sorted list of words\r\n    print(words)\r\n\r\n# driver code\r\nwords = ['bubble', 'selection', 'quicksort', 'insertion']\r\nsort_words(words)\r\n\r\n# output\r\n['bubble', 'insertion', 'quicksort', 'selection']",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2773,
            "material": "Data Structure",
            "instruction": "Write a function in Python that accepts a list of numbers and returns the  highest and lowest values in the list.",
            "question": "def max_min(numbers):\r\n  '''returns a tuple ___ highest and lowest values in a given list'''\r\n  return (max(numbers), min(numbers))",
            "correct_answer": "containing",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2786,
            "material": "Data Structure",
            "instruction": "Create a Python script to sort a list of tuples by the second element in the tuple in ascending order.",
            "question": "def sortList(myList): \r\n # sort list ___ second element  \r\n myList.sort(key = lambda x: x[1]) \r\n  \r\n # printing the sorted list  \r\n print (\"The sorted list in ascending order is : \") \r\n for i in range(len(myList)): \r\n  print(myList[i]), \r\n\r\nmyList = [('Tom',7),('Harry',5),('Bob',8)]\r\nsortList(myList)",
            "correct_answer": "by",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2792,
            "material": "Data Structure",
            "instruction": "Create a Python function to identify the number of even numbers present in a given list of numbers.",
            "question": "def countEvenNum(list):\r\n    return len([x for x in list ___ x % 2 == 0])\r\n\r\nlist = [1, 2, 3, 4, 5]\r\nprint(countEvenNum(list))",
            "correct_answer": "if",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2813,
            "material": "Data Structure",
            "instruction": "Write a Python program to split a given list into two lists based on a given condition.",
            "question": "list = [1, 2, 3, 4, 5, 6, 7, 8]\r\n\r\n#Split the list ___ two lists based on a given condition\r\nlist_a = [x for x in list if x % 2 == 0]\r\nlist_b = [x for x in list if x % 2 != 0]\r\n\r\nprint(list_a) #[2, 4, 6, 8]\r\nprint(list_b) #[1, 3, 5, 7]",
            "correct_answer": "into",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2821,
            "material": "Data Structure",
            "instruction": "Create a function in Python to sort a list of dictionaries by a particular key.",
            "question": "def sort_list(lst, key):\r\n    # Sorts a list ___ dictionaries\r\n    return sorted(lst, key=lambda k: k[key])",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2843,
            "material": "Data Structure",
            "instruction": "Write a code to sort a list of strings according to their lengths",
            "question": "def sortByLength(strings):\r\n    \"\"\"Sort a list ___ strings according to their lengths\"\"\"\r\n    # Sort the list using a key function\r\n    return sorted(strings, key=len)\r\n\r\nif __name__ == '__main__':\r\n    strings = [\"Python\", \"is\", \"a\", \"programming\", \"language\"]\r\n    print(sortByLength(strings))",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2855,
            "material": "Data Structure",
            "instruction": "Create a python function which takes a list as an argument and returns the largest number in the list.",
            "question": "def largest_number(numbers):\r\n    largest = numbers[0]\r\n    for num in numbers:\r\n        if num > largest:\r\n            largest = num\r\n    return largest\r\n\r\nlargest = largest_number(numbers)\r\nprint('The largest number in the list ___: ', largest)",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2871,
            "material": "Data Structure",
            "instruction": "Create a Python script that orders a list of strings alphabetically from a to z.",
            "question": "def sort_list(list):\r\n    list.sort()\r\n    return list ___ = sort_list([\"Banana\", \"Apple\", \"Orange\", \"Pear\"])\r\nprint(sorted_list)",
            "correct_answer": "sorted_list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2879,
            "material": "Data Structure",
            "instruction": "Use Python to sort the list of words in descending alphabetical order.",
            "question": "words = [\"correct\", \"tango\", \"apple\", \"banana\"] \r\n\r\n# Sort words in reverse alphabetical order \r\nwords.sort(reverse=True) \r\n\r\n# Print list ___ descending order \r\nprint(words)",
            "correct_answer": "in",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2961,
            "material": "Data Structure",
            "instruction": "Write a Python function that takes an array of integers as input and computes the average of the elements.",
            "question": "def compute_average(arr):\r\n sum = 0\r\n for i in arr:\r\n sum += i\r\n return sum / len(arr)\r\n \r\n arr = [1, 2, 3, 4]\r\n avg = compute_average(arr)\r\n print(\"Average of array ___ is:\", avg)",
            "correct_answer": "elements",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2969,
            "material": "Data Structure",
            "instruction": "Write a function in Python to return the kth smallest element in the given array.",
            "question": "def find_kth_smallest(arr, k):\r\n    \"\"\"\r\n    This function finds the kth smallest element in an array. \r\n    :param arr: array ___ integers\r\n    :param k: integer\r\n    :return: kth smallest element\r\n    \"\"\"\r\n    sorted_arr = sorted(arr)\r\n    return sorted_arr[k-1]",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2977,
            "material": "Data Structure",
            "instruction": "Generate an efficient python code which finds the most frequent element in an array.",
            "question": "# Find the most frequent element in the array ___ = 0\r\ncount = 0\r\n\r\nfor x in arr:\r\n    freq = arr.count(x)\r\n    if freq > count:\r\n        most_freq = x\r\n        count = freq\r\n\r\n# Print the most frequent element\r\nprint(\"Most frequent element:\",most_freq)",
            "correct_answer": "most_freq",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2991,
            "material": "Data Structure",
            "instruction": "Write a code to remove a specific value from a list in Python.",
            "question": "mylist = [10, 20, 30, 40, 10]\r\nvalue_to_remove = 10\r\n\r\n# new list ___ value is removed\r\nnew_list = [item for item in mylist if item != value_to_remove] \r\n\r\nprint(new_list)",
            "correct_answer": "after",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3044,
            "material": "Data Structure",
            "instruction": "Use Python loops to generate a new list containing the square of all numbers in the following list.",
            "question": "\"\"\"\r\nGenerate a new list ___ the square of all numbers in a list\r\n\"\"\"\r\n# input list\r\nin_list = [1,2,3,4,5]\r\n\r\n# output list\r\nout_list = []\r\n\r\n# loop over the input list\r\nfor i in in_list:\r\n    # calculate the square of the element and append it to output list\r\n    out_list.append(i**2)\r\n\r\n# print the output list\r\nprint(out_list)",
            "correct_answer": "containing",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3067,
            "material": "Data Structure",
            "instruction": "Construct a python program which takes in input the size of a jagged array and prints it(no values).",
            "question": "def print_jagged_array(array_size):    \r\n    # Initialize a jagged array ___ the given size\r\n    array = [None] * array_size\r\n    \r\n    # Populate the array with empty arrays\r\n    for i in range(array_size):\r\n        array[i] = []\r\n    \r\n    # Print the output array\r\n    print(array)\r\n\r\nif __name__ == \"__main__\":\r\n    array_size = 4\r\n    print_jagged_array(array_size)",
            "correct_answer": "with",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3087,
            "material": "Data Structure",
            "instruction": "Generate a function in Python that takes an unsorted list of integers, and sorts it using a bubble sort algorithm.",
            "question": "def bubble_sort(list):\r\n  for i in range(len(list)-1):\r\n    for j in range(len(list)-i-1):\r\n      if list[j] > list[j+1]:\r\n        temp = list[j]\r\n        list[j] = list[j+1]\r\n        list[j+1] = temp\r\n  return list ___(bubble_sort([9, 4, 5, 1, 0])) // [0, 1, 4, 5, 9]",
            "correct_answer": "print",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3096,
            "material": "Data Structure",
            "instruction": "Craft a program in Python to take in a list of integers, and return the sum of the even numbers in the list.",
            "question": "def sum_even(arr):\r\n    '''\r\n    Function to calculate the sum of even numbers in an array ___\r\n    arr: list of integers\r\n    \r\n    Returns\r\n    sum of even numbers in the array\r\n    '''\r\n    total = 0\r\n    for num in arr:\r\n        if num % 2 == 0:\r\n            total += num\r\n    return total",
            "correct_answer": "Parameters",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3108,
            "material": "Data Structure",
            "instruction": "Compose a Python program to move zeros in a given list to the end.",
            "question": "def move_zeroes(nums):\r\n    \"\"\"\r\n    Moves all the zeros in a given list ___ the end.\r\n    @param nums: List\r\n    @return: List\r\n    \"\"\"\r\n    i = 0\r\n    for num in nums:\r\n        if num != 0:\r\n            nums[i] = num\r\n            i += 1\r\n    while i < len(nums):\r\n        nums[i] = 0\r\n        i += 1\r\n    return nums",
            "correct_answer": "to",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3120,
            "material": "Data Structure",
            "instruction": "Develop a Python program to check if a list contains any duplicates",
            "question": "def contains_duplicates(nums):\r\n    seen = set()\r\n    for num in nums:\r\n        if num in seen:\r\n            return True\r\n        seen.add(num)\r\n    return False\r\n\r\nif __name__ == '__main__':\r\n    nums = [1, 4, 5, 1]\r\n    contains = contains_duplicates(nums)\r\n    if contains:\r\n        print('The list ___ duplicates.')\r\n    else:\r\n        print('The list doesn\\'t contain duplicates.')",
            "correct_answer": "contains",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3168,
            "material": "Data Structure",
            "instruction": "Generate a Python program to find the maximum number in a given set of numbers.",
            "question": "def find_maximum(nums):\r\n    # Initialize the maximum number \r\n    max_num = nums[0]\r\n    # Loop through the list ___ num in nums:\r\n        # Check if the current number is bigger\r\n        if num > max_num:\r\n            # If it is, save the number\r\n            max_num = num\r\n\r\n    return max_num\r\n\r\n# call the function\r\nmaximum = find_maximum(nums)\r\nprint(\"The maximum is \" + str(maximum))",
            "correct_answer": "for",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3180,
            "material": "Data Structure",
            "instruction": "Given a list of student records consisting of student name, roll number, and marks, write a Python program to sort the records based on marks in descending order.",
            "question": "def sort_by_marks(records):\r\n    # Sort the records list ___ to the marks \r\n    sorted_records =sorted(records, key = lambda x: x[2], reverse=True)\r\n\r\n    # Return the sorted list\r\n    return sorted_records",
            "correct_answer": "according",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3213,
            "material": "Data Structure",
            "instruction": "Design a linear search algorithm in Python that returns the index of an item in an array.",
            "question": "def linear_search(arr, target):\r\n    \"\"\"\r\n    Searches through a given input array ___ find the index of a provided target number.\r\n    Returns -1 if the target number is not found.\r\n    \"\"\"\r\n    for i in range(len(arr)):\r\n        if arr[i] == target:\r\n            return i\r\n    return -1",
            "correct_answer": "to",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3258,
            "material": "Data Structure",
            "instruction": "Create a method in Python to search through a list and return all elements which are divisible by 5.",
            "question": "def find_division_by_5(lst):\r\n    \"\"\"Search through a list ___ return all elements which are divisible by 5\"\"\"\r\n    result = []\r\n    for item in lst:\r\n        if item % 5 == 0:\r\n            result.append(item)\r\n    \r\n    return result\r\n    \r\nif __name__ == '__main__':\r\n    lst = [4, 9, 5, 20, 21, 33]\r\n    print(find_division_by_5(lst))",
            "correct_answer": "and",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3292,
            "material": "Data Structure",
            "instruction": "Write a Python script to find all prime numbers in a given list of numbers.",
            "question": "\"\"\"\r\nFind all prime numbers in a given list ___ numbers\r\n\"\"\"\r\n\r\ndef is_prime(n):\r\n    for i in range(2, n):\r\n        if n % i == 0:\r\n            return False\r\n        else:\r\n            return True\r\n\r\nnumbers = [13, 19, 23, 5, 7]\r\nfor num in numbers:\r\n    if is_prime(num):\r\n        print(num,\"is a prime number\")",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3358,
            "material": "Data Structure",
            "instruction": "Write a Python program to sort the input list according to its length.",
            "question": "list = [\"Hello\", \"World\", \"This is a test\"]\r\n\r\ndef sort_list_length(list):\r\n    '''\r\n    Function to sort the list ___ to its length\r\n    '''\r\n    return sorted(list, key=len)\r\n\r\nif __name__ == \"__main__\":\r\n    list = [\"Hello\", \"World\", \"This is a test\"]\r\n    sorted_list = sort_list_length(list)\r\n    print(sorted_list)",
            "correct_answer": "according",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3360,
            "material": "Data Structure",
            "instruction": "Create a Python program that sorts a list of integers.",
            "question": "def sort_list(list):\r\n    for i in range(len(list)):\r\n        for j in range(i+1, len(list)):\r\n            if list[i] > list[j]:\r\n                list[i], list[j] = list[j], list[i]\r\n    return list ___ = [9, 3, 6, 7, 1]\r\nmy_list = sort_list(my_list)\r\nprint(my_list)",
            "correct_answer": "my_list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3365,
            "material": "Data Structure",
            "instruction": "Develop a program to normalize a list of numbers in Python.",
            "question": "def normalize_list(lst):\r\n    '''Normalizes a list ___ numbers'''\r\n    max_val = max(lst)\r\n    min_val = min(lst)\r\n\r\n    normalized_lst = []\r\n    for num in lst:\r\n        normalized_val = (num - min_val)/(max_val - min_val)\r\n        normalized_lst.append(normalized_val)\r\n\r\n    return normalized_lst",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3383,
            "material": "Data Structure",
            "instruction": "Create a new program in Python that creates a list of prime numbers ranging from 2 to n.",
            "question": "\"\"\"\r\nCreate a list ___ prime numbers ranging from 2 to n.\r\n\"\"\"\r\n\r\ndef prime_list(n):\r\n    prime_list = []\r\n    for num in range(2, n + 1):\r\n        for prime in prime_list:\r\n            if num % prime == 0: \r\n                break\r\n        else: \r\n            prime_list.append(num)\r\n    return prime_list\r\n\r\nif __name__ == '__main__':\r\n    n = 15\r\n    print(prime_list(n))",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3403,
            "material": "Data Structure",
            "instruction": "Design a program in Python and select features from list A and list B, given the following constraints:",
            "question": "features = [a, c, 2] # Selecting a, c from list ___ and 2 from list B.",
            "correct_answer": "A",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3404,
            "material": "Data Structure",
            "instruction": "Design a Python program to sort the given list using insertion sort.",
            "question": "def insertionSort(arr): \r\n    for i in range(1, len(arr)): \r\n  \r\n        j = i-1\r\n        key = arr[i] \r\n  \r\n        while j >=0 and key < arr[j] : \r\n                arr[j+1] = arr[j] \r\n                j -= 1\r\n        arr[j+1] = key \r\n  \r\narr = [3,8,15,2,6,10]\r\ninsertionSort(arr) \r\nprint (\"Sorted array ___:\") \r\nfor i in range(len(arr)): \r\n    print (\"%d\" %arr[i])",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3405,
            "material": "Data Structure",
            "instruction": "Create a program using Python to generate a histogram given a list of numbers.",
            "question": "# importing matplotlib module\r\nimport matplotlib.pyplot as plt\r\n\r\n# list ___ numbers \r\nnumbers = [2, 5, 2, 8, 3, 9, 4, 10]\r\n\r\n# draw histogram \r\nplt.hist(numbers, bins = [0, 2, 4, 6, 8, 10])\r\n\r\n# x label, y label and title\r\nplt.xlabel('Numbers');\r\nplt.ylabel('Frequency');\r\nplt.title('Histogram for Numbers')\r\n\r\n# display histogram \r\nplt.show()",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3425,
            "material": "Data Structure",
            "instruction": "Create a Python program to randomly filter out half of the elements of an array.",
            "question": "import random\r\n\r\ndef filter_half_array(arr):\r\n    while len(arr)>0:\r\n        el = random.choice(arr) # randomly select an element of the list ___.remove(el) # remove the selected item from the list\r\n    return arr\r\n\r\narr = [9, 2, 7, 4, 5, 6, 8, 1, 4, 0]\r\nfilter_half_array(arr)",
            "correct_answer": "arr",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3442,
            "material": "Data Structure",
            "instruction": "Generate a function in Python to find the maximum element from a given array.",
            "question": "def findMaxElement(array):\r\n    maxElement = 0\r\n    for element in array:\r\n        if element > maxElement:\r\n            maxElement = element\r\n    return maxElement\r\n\r\narray = [10, 15, 20, 11, 99] \r\nmaxElement = findMaxElement(array)\r\nprint(\"The maximum element in the array ___\", maxElement)",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3508,
            "material": "Data Structure",
            "instruction": "Construct a Python program to sort an array in descending order.",
            "question": "def descending_sort(arr): \r\n    for i in range(len(arr)): \r\n        for j in range(0, len(arr)-i-1): \r\n            if arr[j] < arr[j+1] : \r\n                arr[j], arr[j+1] = arr[j+1], arr[j]\r\n    return arr\r\n  \r\narr = [4, 5, 2, 6, 1, 3]\r\n  \r\ndescending_sort(arr)\r\n\r\nprint (\"Sorted array ___:\") \r\nfor i in range(len(arr)): \r\n    print (\"%d\" %arr[i])",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3517,
            "material": "Data Structure",
            "instruction": "Write a python code to sort the given array of numbers in ascending order.",
            "question": "\"\"\"\r\nSort array ___ numbers in ascending order\r\n\"\"\"\r\n\r\ndef sort_in_ascending(arr):\r\n    arr.sort()\r\n    return arr\r\n\r\nif __name__==\"__main__\":\r\n    arr = [3, 5, 1, 6, 9, 4]\r\n    sorted_arr = sort_in_ascending(arr)\r\n    print(\"Sorted array in ascending order is \"+str(sorted_arr))",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3530,
            "material": "Data Structure",
            "instruction": "Given a list of numbers, write a Python program to find the number which occurs the most in the list",
            "question": "def most_frequent(list1): \r\n\treturn max(set(list1), key = list1.count) \r\n\r\nlist1 = [1, 2, 3, 4, 4, 3, 3, 3]\r\nprint(\"Number that occurs the most in the list ___ : \", most_frequent(list1))",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3543,
            "material": "Data Structure",
            "instruction": "Write a script in Python to sort a list of words alphabetically.",
            "question": "def sort_words(words):\r\n    '''\r\n    Function to sort a list ___ words alphabetically\r\n    \r\n    Parameters\r\n    words: list of strings\r\n    \r\n    Returns\r\n    sorted list of strings\r\n    '''\r\n    sorted_list = sorted(words)\r\n    return sorted_list",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3554,
            "material": "Data Structure",
            "instruction": "Create a code generation task to generate a Python program to calculate the sum of a list of numbers.",
            "question": "def list_sum(nums): \r\n    '''This function will take a list ___ input and return the sum of its elements.'''\r\n    result = 0\r\n    for num in nums:\r\n        result += num\r\n    return result\r\n\r\nnums = [2, 5, 10, 15]\r\nprint(list_sum(nums))",
            "correct_answer": "as",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3592,
            "material": "Data Structure",
            "instruction": "What is the best way to optimize the following Python code which prints the first and last letters of an array of strings?",
            "question": "# optimized version \r\nwords = [\"cat\", \"dog\", \"snake\", \"elephant\"]\r\n\r\nfirst_letters = [word[0] for word in words] # list ___ first letters\r\nlast_letters = [word[-1] for word in words] # list of last letters\r\n\r\n# print the results\r\nprint(first_letters)\r\nprint(last_letters)",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3618,
            "material": "Data Structure",
            "instruction": "Create a Python script that uses a for loop to display the items from a list.",
            "question": "# Create a list ___ = ['apple', 'orange', 'banana']\r\n\r\n# Loop over the list\r\nfor item in list:\r\n    print(item)",
            "correct_answer": "list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3621,
            "material": "Data Structure",
            "instruction": "Opitmize a Python program to search a list of numbers for a given target number.",
            "question": "def search(list, target):\r\n  \r\n for i in range(len(list)):\r\n  if list[i] == target:\r\n   return i\r\n return -1\r\n\r\nlist = [10,20,30,40,50]\r\ntarget = 40\r\n\r\n# linear search in list ___ = search(list, target)\r\n\r\nif index != -1:\r\n print(\"Element found at index :\", index)\r\nelse:\r\n print(\"Element not found\")",
            "correct_answer": "index",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3639,
            "material": "Data Structure",
            "instruction": "Generate a Python script that sorts a given array of integers.",
            "question": "def array_sort(array):\r\n  # Iterate over the array ___ i in range(len(array)):\r\n    # Find the minimum element\r\n    min_position = i\r\n    for j in range(i + 1, len(array)):\r\n      if array[min_position] > array[j]:\r\n        min_position = j\r\n\r\n    # Swap minimum element to current position\r\n    array[i], array[min_position] = array[min_position], array[i]\r\n  \r\n  return array",
            "correct_answer": "for",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3669,
            "material": "Data Structure",
            "instruction": "Create a Python program which sorts elements of an array in ascending order.",
            "question": "def sort_ascending(array):\r\n    for i in range(len(array)-1):\r\n        for j in range(i, len(array)):\r\n            if array[i] > array[j]:\r\n                array[i], array[j] = array[j], array[i]\r\n\r\n    return array ___([5, 2, 1, 3, 6, 4]) # Output = [1, 2, 3, 4, 5, 6]",
            "correct_answer": "sort_ascending",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3689,
            "material": "Data Structure",
            "instruction": "Produce a Python program that calculates the average of a list of numbers.",
            "question": "def average(numbers):\r\n\ttotal = 0\r\n\tfor num in numbers:\r\n\t\ttotal += num\r\n\treturn total/len(numbers)\r\n\r\nnums = [1,2,3,4,5,6]\r\nprint(\"Average of the list ___ numbers is:\", average(nums))",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3699,
            "material": "Data Structure",
            "instruction": "Using the given input, sort a list containing both numerical and strings data types in Python.",
            "question": "# define list ___ = [1, 'c', 3, 'a', 2, 'b']\r\n\r\n# sort list\r\nsorted_lst = sorted(lst, key=lambda x:str(x))\r\n\r\n# print sorted list\r\nprint(sorted_lst)",
            "correct_answer": "lst",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3743,
            "material": "Data Structure",
            "instruction": "Create a Python script to divide two sets and store the results in a new set.",
            "question": "set1 = {2, 4, 6, 8, 10} \r\nset2 = {3, 5, 7, 9}\r\n\r\n# Divide two sets and store the results in a new set ___ = set1.difference(set2) \r\n \r\n# Print the result\r\nprint(new_set) # Output: {2, 4, 6, 8, 10}",
            "correct_answer": "new_set",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3754,
            "material": "Data Structure",
            "instruction": "Can you provide a Python program to generate all possible combinations of a given list of numbers?",
            "question": "import itertools\r\n\r\n# list ___ numbers\r\nlist_of_nums = [1, 2, 3]\r\n\r\n# get all possible combinations of numbers\r\ncombinations = itertools.combinations(list_of_nums, 3)\r\n\r\n# print all possible combinations\r\nfor combination in combinations:\r\n    print(combination)",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3792,
            "material": "Data Structure",
            "instruction": "Using the input, create a Python program which generates a random array of length n filled with binary values.",
            "question": "import random\r\n\r\ndef random_binary_array(n):\r\n    \"\"\"Return a random array ___ length n with binary values.\"\"\"\r\n    array = []\r\n    for i in range(n):\r\n        array.append(random.choice([0, 1]))\r\n    return array",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3817,
            "material": "Data Structure",
            "instruction": "Create a python program to remove all the values in a list that are greater than a given value.",
            "question": "# Defining a function to remove ___ the values in a list that are greater than a given value\r\ndef remove_greater(list, n):\r\n\u00a0\u00a0return [val for val in list if val <= n]\r\n\r\n# Testing the remove_greater() function\r\nlist = [10, 15, 20, 25, 30]\r\nprint(remove_greater(list, 15)) # [10, 15]",
            "correct_answer": "all",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3845,
            "material": "Data Structure",
            "instruction": "Write a Python code snippet to check if a list contains duplicated elements.",
            "question": "\"\"\"\r\nPython code snippet to check if a list ___ duplicated elements\r\n\"\"\"\r\n\r\ndef has_duplicates(arr):\r\n    seen_elements = set()\r\n    for elem in arr:\r\n        if elem in seen_elements:\r\n            return True\r\n        seen_elements.add(elem)\r\n    return False\r\n\r\nif __name__ == '__main__':\r\n    arr = [3, 6, 8, 9, 10, 3]\r\n    print(has_duplicates(arr)) # True",
            "correct_answer": "contains",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3846,
            "material": "Data Structure",
            "instruction": "Fill in the blanks to create a Python program to calculate the total number of words in a list.",
            "question": "words = [\"Hello\", \"World\", \"!\"]\r\n\r\ntotal_words = 0\r\nfor word in words:\r\n____ total_words = total_words + ____\r\n\r\nprint(total_words)\r\n\r\n# Output: 3\r\n\r\ntotal_words = 0\r\nfor word in words:\r\n    length = len(word)\r\n    total_words = total_words + length\r\n\r\nprint(total_words)\r\n\r\n# Output: 3",
            "correct_answer": null,
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3863,
            "material": "Data Structure",
            "instruction": "Write a function in Python to sort the given list of strings based on the length of the words in ascending order.",
            "question": "def sort_by_word_length(word_list):\r\n\t\"\"\"\r\n\tFunction to sort a given list ___ strings \r\n\tbased on the length of the words in ascending order.\r\n\t@param word_list: list\r\n\t@return: list\r\n\t\"\"\"\r\n    return sorted(word_list, key=lambda x: len(x))",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3873,
            "material": "Data Structure",
            "instruction": "Write a Python algorithm to convert the following text into a list of integers.",
            "question": "# convert a string to list ___ numbers\r\ndef convert_to_list(s):\r\n    numbers = s.split(',')\r\n    return [int(num) for num in numbers]\r\n\r\ntext = \"3, 17, 2, 9, 11\"\r\nint_list = convert_to_list(text)\r\nprint(int_list)",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3897,
            "material": "Data Structure",
            "instruction": "Create a program in Python which can calculate the median of an array of integers.",
            "question": "def median(arr):\r\n    arr.sort()\r\n\r\n    if len(arr) % 2 != 0:\r\n        return arr[len(arr)//2]\r\n    else: \r\n        return (arr[len(arr)//2 - 1] + arr[len(arr)//2]) / 2\r\n\r\narr = [3, 5, 7, 4, 8, 1, 9]\r\n\r\nmed = median(arr)\r\nprint('Median of the given array ___:', med)",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3905,
            "material": "Data Structure",
            "instruction": "Create a command line application in Python which takes a list of numbers and returns whether the list is sorted.",
            "question": "import sys\r\n\r\ndef is_sorted(nums):\r\n for i in range(len(nums) - 1):\r\n  if nums[i] > nums[i + 1]:\r\n   return False\r\n return True\r\n\r\nnums = [int(x) for x in sys.argv[1:]]\r\n\r\nif is_sorted(nums):\r\n print('The list ___ sorted')\r\nelse:\r\n print('The list is not sorted')",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3915,
            "material": "Data Structure",
            "instruction": "Create a Python program that takes a list of numbers, sorts them in descending order, calculates the average of the numbers, and prints the result.",
            "question": "# Calculating average of [3, 7, 9, 4, 5]\r\nsorted_nums = sorted([3, 7, 9, 4, 5], reverse=True)\r\nsum_nums = sum(sorted_nums)\r\n\r\n# Calculating average\r\naverage = sum_nums/len(sorted_nums)\r\n\r\n# Printing the average\r\nprint('The average of the list ___: ', average)",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3933,
            "material": "Data Structure",
            "instruction": "Write a Python program to find the largest and smallest number from a given list of numbers.",
            "question": "def find_num(input_list):\r\n    \"\"\"Finds the largest and smallest number from a given list ___ numbers.\"\"\"\r\n    max_num = max(input_list)\r\n    min_num = min(input_list)\r\n    return max_num, min_num\r\n\r\nlargest, smallest = find_num([7, 4, 2, 9, 0, 5])\r\nprint('The largest number is', largest)\r\nprint('The smallest number is', smallest)",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3943,
            "material": "Data Structure",
            "instruction": "Implement a function in Python to remove all instances of an item from a list.",
            "question": "def remove_item(list, item):\r\n    while item in list:\r\n        list.remove(item)\r\n    return list ___ = remove_item([1, 2, 1, 3, 4, 1], 1)\r\nprint(result)",
            "correct_answer": "result",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3956,
            "material": "Data Structure",
            "instruction": "Design a method in Python to deduplicate a given list of elements.",
            "question": "# store the given list ___ = [4, 5, 1, 9, 5, 4, 3]\r\n\r\n# remove the duplicates\r\ndeduplicated_list = list(set(my_list))\r\n\r\n# print the result\r\nprint(\"Deduplicated list:\", deduplicated_list)",
            "correct_answer": "my_list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3959,
            "material": "Data Structure",
            "instruction": "Output a program in Python to find the most frequent occurring item in an array",
            "question": "from collections import Counter\r\n\r\narr = [1,3,3,3,4,4,4,4,5,5]\r\ndata = Counter(arr)\r\nget_mode = dict(data)\r\nmode = [k for k, v in get_mode.items() if v == max(list(data.values()))]\r\n\r\nprint(f\"Mode of the given list ___ {mode}\")",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3973,
            "material": "Data Structure",
            "instruction": "Write a Python program to find the list of words that are longer than given length",
            "question": "# Create a list ___ store the result\r\nlong_words_list = []\r\n\r\n# Iterate the list to find words longer than the given length\r\nfor word in word_list:\r\n    if len(word) > length:\r\n        long_words_list.append(word)\r\n\r\n# Print the result\r\nprint(long_words_list)",
            "correct_answer": "to",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3987,
            "material": "Data Structure",
            "instruction": "Write a python program to split a list into two halves",
            "question": "def split_list(data):\r\n    # Calculate the length of data\r\n    length = len(data)\r\n    # calculate the midpoint of the list ___ = length//2\r\n    \r\n    # split the data into two halves \r\n    first_half = data[:midpoint]\r\n    second_half = data[midpoint:]\r\n    \r\n    return first_half, second_half\r\n    \r\nsplit_list([1, 2, 3, 4, 5]) # Returns ([1, 2], [3, 4, 5])",
            "correct_answer": "midpoint",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4038,
            "material": "Data Structure",
            "instruction": "Write a python program to search through a list of integers and find the smallest number.",
            "question": "def find_smallest(int_list):\r\n    # set ___ minimum value to the first item in the list initially\r\n    min_val = int_list[0]\r\n    # loop over the list and compare each item to the minimum value\r\n    for num in int_list:\r\n        if num < min_val:\r\n            min_val = num\r\n    # return the minimum value\r\n    return min_val",
            "correct_answer": "the",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4047,
            "material": "Data Structure",
            "instruction": "Create a sorting algorithm in Python for evaluating and sorting a list of tuples with two elements.",
            "question": "def sort_list_tuples(tuples):\r\n  # sort by the second element in each tuple ___ sorted(tuples, key=lambda x: x[1])\r\n\r\n# test code\r\ntuples = [('a', 3), ('b', 2), ('c', 1)] \r\nprint(sort_list_tuples(tuples))",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4066,
            "material": "Data Structure",
            "instruction": "Write a Python code to normalize a list of numbers.",
            "question": "\"\"\"\r\nNormalize a list ___ numbers using Python\r\n\"\"\"\r\n\r\ndef normalize_list(list_numbers):\r\n  max_val = max(list_numbers)\r\n  normalized = [n/max_val for n in list_numbers]\r\n  return normalized\r\n\r\nif __name__ == '__main__':\r\n  list_numbers = [1, 4, 4, 5, 7]\r\n  print(normalize_list(list_numbers))",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4100,
            "material": "Data Structure",
            "instruction": "Write an algorithm in Python to find the maximum element of a given array.",
            "question": "def find_max_element(arr):\r\n  \r\n  max = arr[0]\r\n  \r\n  for i in range(1, len(arr)):\r\n    # compare current max with the next array ___\r\n    if arr[i] > max:\r\n      max = arr[i]\r\n  \r\n  return max\r\n\r\narr = [2, 7, 1, 6, 5]\r\nmax_element = find_max_element(arr)\r\nprint(\"Max element in the array:\", max_element)",
            "correct_answer": "element",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4103,
            "material": "Data Structure",
            "instruction": "Write a function in Python that takes an array of integer values and reverses the order of the values.",
            "question": "def reverse_array(arr):\r\n  return arr[::-1]  # Returns a slice of the list ___ reverse order",
            "correct_answer": "in",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4108,
            "material": "Data Structure",
            "instruction": "Write a Python code to sort the given array.",
            "question": "# Bubble sort algorithm\r\ndef sort_array(array):\r\n    for i in range(len(array)):\r\n        for j in range(len(array)-i-1):\r\n            if array[j] > array[j+1]:\r\n               array[j], array[j+1] = array[j+1], array[j]\r\n    return array\r\n\r\n# Sample array ___ = [2, 4, 1, 3, 7, 5]\r\n\r\n# Function call\r\nsorted_array = sort_array(array)\r\n\r\n# Print sorted output\r\nprint(sorted_array)",
            "correct_answer": "array",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4132,
            "material": "Data Structure",
            "instruction": "Produce a Python code section to calculate the average value for all elements of a given array.",
            "question": "array = [2, 7, 5, 4]\r\n\r\ntotal = 0\r\nfor num in array:\r\n total += num\r\naverage = total/len(array)\r\n\r\nprint(\"The average of the array ___:\", average)",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4146,
            "material": "Data Structure",
            "instruction": "Construct a python program that randomly swaps two elements within a list of numbers.",
            "question": "import random\r\n\r\n# input list ___ = [1, 2, 3, 4, 5]\r\n\r\n# choose two random indices\r\ni, j = random.sample(range(len(data_list)), 2)\r\n\r\n# store the values before swapping\r\na = data_list[i]\r\nb = data_list[j]\r\n\r\n# swap two elements in a list\r\ndata_list[i] = b\r\ndata_list[j] = a\r\n\r\n# print the list after swapping\r\nprint(data_list)",
            "correct_answer": "data_list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4174,
            "material": "Data Structure",
            "instruction": "Write a Python program to classify a given array of numbers into even number and odd number arrays.",
            "question": "# Create empty lists to store odd and even elements\r\nodd_elements = []\r\neven_elements = []\r\n\r\n# Iterate through the array ___ element in my_array:\r\n    # Check if the element is even or odd\r\n    if element % 2 == 0:\r\n        even_elements.append(element)\r\n    else:\r\n        odd_elements.append(element)\r\n\r\nprint(odd_elements)\r\nprint(even_elements)",
            "correct_answer": "for",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4212,
            "material": "Data Structure",
            "instruction": "Given a list of strings, write a Python snippet to sort the strings in ascending order according to word length.",
            "question": "strings = [\"Code\", \"Python\", \"JavaScript\", \"Java\"]\r\n\r\n# sort the list ___ word length\r\nstrings.sort(key = lambda x: len(x))\r\n\r\nprint(strings)\r\n# Output: [\"Code\", \"Java\", \"Python\", \"JavaScript\"]",
            "correct_answer": "by",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4231,
            "material": "Data Structure",
            "instruction": "Develop a Python program to reverse a list of numbers.",
            "question": "def reverse_list(nums):\r\n    \"\"\"Function to reverse a list ___ numbers.\r\n\r\n    Parameters\r\n    ----------\r\n    nums : list\r\n        List of numbers to be reversed.\r\n\r\n    Returns\r\n    -------\r\n    reversed_list : list\r\n        Reversed list of numbers.\r\n    \"\"\"\r\n\r\n    reversed_list = nums[::-1]\r\n\r\n    return reversed_list",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4253,
            "material": "Data Structure",
            "instruction": "Build a Python program to take a given list and create a dictionary with the elements and their corresponding indices.",
            "question": "def create_dict(L):\r\n    dict = {}\r\n    for i in range(len(L)): \r\n        dict[L[i]] = i\r\n    return dict ___ = dict(create_dict([\"a\",\"b\",\"c\"]))\r\nprint(dict_list)",
            "correct_answer": "dict_list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4269,
            "material": "Data Structure",
            "instruction": "Write a Python function to remove a specific element from a list.",
            "question": "def remove_element(list, element):\r\n    for i in range(len(list)):\r\n        if list[i] == element:\r\n            del ___[i]\r\n            break\r\n    return list\r\n\r\nlist = remove_element(list,40)",
            "correct_answer": "list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4352,
            "material": "Data Structure",
            "instruction": "Write an algorithm in Python that takes a list of elements and determines if the list is sorted or not.",
            "question": "def is_sorted(lst):\r\n # base case: if the list ___ empty then it is sorted\r\n if not lst:\r\n  return True\r\n # compare the first two element\r\n if lst[0] > lst[1]:\r\n  return False\r\n # recursively call the function with the remaining elements in the list\r\n return is_sorted(lst[1:])",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4357,
            "material": "Data Structure",
            "instruction": "Develop a Python program to delete the third element of a given list.",
            "question": "# Input list ___ = [\"A\", \"B\", \"C\", \"D\", \"E\"]\r\n\r\n# Deleting the third element\r\nlist.pop(2)\r\n\r\n# Printing the list after deletion\r\nprint(list)\r\n# Output: ['A', 'B', 'D', 'E']",
            "correct_answer": "list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4359,
            "material": "Data Structure",
            "instruction": "Generate a solution for finding all possible subsets of a given set in Python.",
            "question": "\"\"\"\r\nGenerate a solution for finding all possible subsets of a given set ___ Python.\r\n\"\"\"\r\n\r\ndef find_subsets(nums):\r\n  subsets = [[]]\r\n\r\n  for current_num in nums:\r\n    for i in range(len(subsets)):\r\n      set_to_add = subsets[i] + [current_num]\r\n      subsets.append(set_to_add)\r\n\r\n  return subsets\r\n\r\nnums = [1, 2, 3]\r\nprint(find_subsets(nums))",
            "correct_answer": "in",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4449,
            "material": "Data Structure",
            "instruction": "Write a python script to compute the mean of a list of integers.",
            "question": "def find_mean(X):\r\n    # Compute the sum of all the elements in the list ___ = 0\r\n    for x in X:\r\n        sum_x += x\r\n    \r\n    # Compute the mean\r\n    mean = sum_x / len(X)\r\n    \r\n    return mean\r\n\r\nif __name__ == '__main__':\r\n    X = [2,4,6,8,10]\r\n    print(find_mean(X))",
            "correct_answer": "sum_x",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4474,
            "material": "Data Structure",
            "instruction": "Write an algorithm in Python that takes as input an array of numbers and returns the maximum element.",
            "question": "def maxElement(arr): \r\n    maxElement = arr[0]; \r\n  \r\n    for i in range(1, len(arr)): \r\n        if maxElement < arr[i]: \r\n            maxElement = arr[i]; \r\n  \r\n    return maxElement; \r\n  \r\narr = [15, 25, 7, 1];\r\nmaxElement = maxElement(arr); \r\nprint (\"Maximum element in the array ___:\", maxElement);",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4496,
            "material": "Data Structure",
            "instruction": "Generate a Python program to add new elements to an existing tuple.",
            "question": "# create a new tuple ___ the elements from the old tuple and the new elements\r\nnewTuple = oldTuple + newElements",
            "correct_answer": "adding",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4523,
            "material": "Data Structure",
            "instruction": "Implement a function in Python that takes a number n and generates a random list of integers between 0 and n.",
            "question": "import random\r\n\r\ndef randomList(n):\r\n list = []\r\n \r\n for i in range(n):\r\n list.append(random.randint(0, n))\r\n \r\n return list ___(randomList(10))",
            "correct_answer": "print",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4545,
            "material": "Data Structure",
            "instruction": "Generate an algorithm in Python that returns the kth smallest number in a given array.",
            "question": "def kthSmallest(arr, k):\r\n # sort the array ___.sort()\r\n \r\n # return the kth element\r\n return arr[k-1]\r\n \r\n# Driver Code\r\narr = [3,2,4,1,5]\r\nk = 3\r\n\r\nprint(kthSmallest(arr, k)) # 3",
            "correct_answer": "arr",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4570,
            "material": "Data Structure",
            "instruction": "Create a Python function to sort a list of strings alphabetically.",
            "question": "def sort_list(list):\r\n    list.sort()\r\n    return list ___(my_list)",
            "correct_answer": "sort_list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4572,
            "material": "Data Structure",
            "instruction": "Write a Python program to flatten a list of lists into a single list.",
            "question": "import itertools\r\n\r\n# flatten a list ___ lists\r\nlist_of_lists = [[1,2], [3], [4,5,6]]\r\nflattened_list = list(itertools.chain.from_iterable(list_of_lists))\r\n\r\n# print the flattened list\r\nprint(flattened_list)  # Output: [1, 2, 3, 4, 5, 6]",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4582,
            "material": "Data Structure",
            "instruction": "Can you create a Python program that returns the largest number in a list of numbers?",
            "question": "def largestNumber(list): \r\n    maximum = list[0] \r\n      \r\n    for num in list: \r\n        if num > maximum: \r\n            maximum = num \r\n    return maximum \r\n  \r\nlist = [4, 8, 2, 6, 9] \r\nlargestNumber = largestNumber(list) \r\n  \r\nprint(\"Largest number in the given list ___:\", largestNumber)",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4663,
            "material": "Data Structure",
            "instruction": "Write a Python program to sort a given array in ascending order.",
            "question": "def sort_ascending(array):\r\n    n = len(array)\r\n    for i in range(n):\r\n        for j in range(0, n-i-1):\r\n            if array[j] > array[j+1]:\r\n                array[j], array[j+1] = array[j+1], array[j]\r\n    return array ___ = [3, 1, 5, 4, 2]\r\nprint(sort_ascending(array))",
            "correct_answer": "array",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4666,
            "material": "Data Structure",
            "instruction": "Write a python script to generate an array of random numbers between two specified values.",
            "question": "import random\r\n\r\n# Generate an array ___ random numbers between two specified values\r\ndef generate_array(min, max):\r\n array = []\r\n \r\n for i in range(min, max):\r\n  array.append(random.randint(min, max))\r\n \r\n return array\r\n \r\nmin = 0\r\nmax = 50\r\nprint(generate_array(min, max))",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4696,
            "material": "Data Structure",
            "instruction": "Develop a function in python to find the index of an element in a list.",
            "question": "def find_index(a, x):\r\n    indices = []\r\n    if x not in a:\r\n        return -1\r\n    else:\r\n        for i in range(len(a)):\r\n            if a[i] == x:\r\n                indices.append(i)\r\n    return indices\r\n\r\nindices = find_index(a, x)\r\nprint(\"The index of element 2 in the list ___\", indices)",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4711,
            "material": "Data Structure",
            "instruction": "Create a Python program to sort a list of strings according to the length of the strings in ascending order.",
            "question": "# Function to sort the list ___ to string length\r\ndef sort_string_list(string_list):\r\n    return sorted(string_list, key=len)\r\n\r\nif __name__ == '__main__':\r\n    string_list = ['Python', 'JS', 'C++', 'Java', 'PHP']\r\n    sorted_string_list = sort_string_list(string_list)\r\n    print(sorted_string_list)",
            "correct_answer": "according",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4724,
            "material": "Data Structure",
            "instruction": "Create a Python program to sort a list of tuples in ascending order by their second element.",
            "question": "def sort_tuples(tup): \r\n  \r\n    # reverse = None (Sorts in Ascending order) \r\n    # key is set ___ sort using second element of  \r\n    # sublist lambda has been used \r\n    tup.sort(key = lambda x: x[1])  \r\n    return tup  \r\n  \r\n# Driver Code \r\ntuple1 = [(4, 2), (3, 7), (2, 3)]  \r\nprint(sort_tuples(tuple1))",
            "correct_answer": "to",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4771,
            "material": "Data Structure",
            "instruction": "Create a function in Python that will sort a list of tuples based on the second elements in the tuples.",
            "question": "def sort_by_second_element(tuples):\r\n    return sorted(tuples, key=lambda element: element[1])\r\n\r\n// testing\r\ntuples_list = [(2, 1), (3, 7), (6, 5)]\r\nprint(\"Original list ___ tuples:\")\r\nprint(tuples_list)\r\nprint(\"Sorted list of tuples based on the second element of tuples:\")\r\nprint(sort_by_second_element(tuples_list))",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4833,
            "material": "Data Structure",
            "instruction": "Design an automated system in Python to remove all even numbers from a list.",
            "question": "def remove_even(list):\r\n    return [i for i in list ___ i%2 != 0]",
            "correct_answer": "if",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4853,
            "material": "Data Structure",
            "instruction": "Write a Python function to generate an array of numbers from 1 to n in random order.",
            "question": "import random\r\n\r\ndef generate_random_array(n):\r\n    array = [i for i in range(1, n + 1)]\r\n    random.shuffle(array)\r\n    return array ___ = generate_random_array(7)\r\nprint(result)",
            "correct_answer": "result",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4872,
            "material": "Data Structure",
            "instruction": "Develop a program in Python that sums up all the numbers of a list.",
            "question": "# define the list ___ = [1, 2, 3, 4, 5]\r\n\r\n# compute the total\r\ntotal = 0\r\nfor num in my_list:\r\n total += num\r\n\r\n# print the result\r\nprint(\"The sum of all numbers in the list is: \" + str(total))",
            "correct_answer": "my_list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4907,
            "material": "Data Structure",
            "instruction": "Create a function to find the mean of a given array in Python.",
            "question": "def mean(arr): \r\n  return sum(arr)/len(arr)\r\n\r\narr = [2, 4, 5, 7]\r\nmean_val = mean(arr)\r\nprint(\"Mean of the array ___\", mean_val)\r\n# Output: Mean of the array is 4.5",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4951,
            "material": "Data Structure",
            "instruction": "Edit this Python code to raise an error if the length of the list less than 3",
            "question": "def check_list_length(lists):\r\n    if len(lists) > 3:\r\n        return True\r\n    else:\r\n        raise ValueError(\"list ___ should be more than 3\")",
            "correct_answer": "length",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4966,
            "material": "Data Structure",
            "instruction": "Produce a program in Python to search for an element in a list",
            "question": "# function to search an element  \r\n# in a list ___ linear_search(list, x): \r\n    for index, element in enumerate(list): \r\n        if element == x: \r\n            return index \r\n    return -1",
            "correct_answer": "def",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4991,
            "material": "Data Structure",
            "instruction": "Modify the following python program to create a new list whose elements are a tuple with the values of both lists?",
            "question": "list1 = [1, 2, 3, 4] \r\nlist2 = [5, 6, 7, 8] \r\n\r\n#create an empty list ___ = []\r\n\r\n#iterate through each item in the two lists\r\nfor x, y in zip(list1, list2):\r\n    #append each tuple as a single element in the new list\r\n    list3.append((x, y))\r\n\r\nprint(list3)",
            "correct_answer": "list3",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4995,
            "material": "Data Structure",
            "instruction": "Generate a Python code snippet for sorting an array of strings in ascending alphabetical order.",
            "question": "def sort_words(words):\r\n    # Sort the list ___ ascending alphabetical order.\r\n    sorted_words = sorted(words)\r\n    # Return the sorted list.\r\n    return sorted_words\r\n    \r\nwords = [\"apple\", \"banana\", \"orange\", \"kiwi\"]\r\n\r\nsorted_words = sort_words(words)\r\n\r\nprint(sorted_words)",
            "correct_answer": "in",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5011,
            "material": "Data Structure",
            "instruction": "Design an algorithm in Python, that takes an array and sort it in ascending order.",
            "question": "def sort_ascending(array):\r\n  array.sort()\r\n  return array ___([10, 3, 9, 1, 15, 2])  # [1, 2, 3, 9, 10, 15]",
            "correct_answer": "sort_ascending",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5068,
            "material": "Data Structure",
            "instruction": "Create a Python program that takes a list of strings and filters out strings that do not contain the letter 'a'.",
            "question": "# Filtering out strings without letter 'a'\r\nfiltered_words = [word for word in words if 'a' in word]\r\n\r\n# Print the filtered list ___(filtered_words)\r\n# Output: ['apple', 'banana', 'grape']",
            "correct_answer": "print",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5093,
            "material": "Data Structure",
            "instruction": "Generate Python code to filter a given list of numbers such that only the odd numbers are removed.",
            "question": "def filter_odd(list):\r\n    return [num for num in list ___ num % 2 == 0]",
            "correct_answer": "if",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5096,
            "material": "Data Structure",
            "instruction": "Create a Python script that finds the longest word in a given array of words.",
            "question": "#  find the longest word\r\ndef findLongestWord(arr):\r\n  \r\n longestWord = \"\"\r\n \r\n for word in arr:\r\n if(len(word) > len(longestWord)):\r\n longestWord = word\r\n \r\n return longestWord\r\n\r\n# Driver code\r\nwords = ['Python', 'JavaScript', 'C++', 'Java', 'Kotlin']\r\nprint(\"Longest word in the array ___ \"+ findLongestWord(words))",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5100,
            "material": "Data Structure",
            "instruction": "Create a python loop to reduce a list of data points to their averages.",
            "question": "def averageList(arr):\r\n    '''This function takes in an array ___ returns the average of all elements'''\r\n    # initialize sum\r\n    s = 0\r\n    # traverse the array\r\n    for i in arr:\r\n        s += i\r\n    # calculate average\r\n    avg = s / len(arr)\r\n    # return the average\r\n    return avg\r\n\r\n# Test\r\narr = [1, 2, 3, 4]\r\nprint(averageList(arr))\r\n# Output 2.5",
            "correct_answer": "and",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5104,
            "material": "Data Structure",
            "instruction": "Create a Python script to sort a list of integers from lowest to highest.",
            "question": "def sort_list(list):\r\n  # loop through the list ___ i in range(len(list)):\r\n    # find the smallest number in the list\r\n    lowest = min(list[i:])\r\n    # find its index\r\n    lowest_index = list.index(lowest)\r\n    # swap the numbers\r\n    list[i], list[lowest_index] = list[lowest_index], list[i]\r\n  # return the sorted list  \r\n  return list\r\n\r\nprint(sort_list([3, 5, 1, 7, 4, 2]))",
            "correct_answer": "for",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5120,
            "material": "Data Structure",
            "instruction": "Create a Python program to detect cycles in a given array.",
            "question": "def is_cycle_detected(array):\r\n    # create a set ___ store visited indices\r\n    visited = set()\r\n    for i, num in enumerate(array):\r\n        # check if num has been visited\r\n        if i in visited or num not in visited:\r\n            return False\r\n        # mark the index as visited\r\n        visited.add(i)\r\n    return True",
            "correct_answer": "to",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5138,
            "material": "Data Structure",
            "instruction": "Using Python, find the mean of a randomly generated array of integers of size 10.",
            "question": "import numpy as np\r\n\r\ndef get_mean(array):\r\n    '''This function returns the mean of the given array ___ integers.'''\r\n    array = np.array(array)\r\n    return np.mean(array)\r\n\r\nif __name__ == '__main__':\r\n    array = [61, 28, 79, 75, 73, 89, 81, 92, 83, 10]\r\n    mean = get_mean(array)\r\n    print(mean) # 63.2",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5140,
            "material": "Data Structure",
            "instruction": "Write an efficient Python program to find the second largest element in an array.",
            "question": "def secondLargestElement(arr):\r\n  # Sort the array ___ ascending order \r\n  arr.sort() \r\n    \r\n  # Return the second last element \r\n  return arr[-2] \r\n\r\n# Driver code \r\narr = [14, 46, 47, 86, 92, 52, 48, 36, 66, 85] \r\n\r\nprint(secondLargestElement(arr))",
            "correct_answer": "in",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5182,
            "material": "Data Structure",
            "instruction": "Using the input provided, make a program to sort a given array in ascending order in Python.",
            "question": "def insertionSort(arr): \r\n    for i in range(1, len(arr)): \r\n        key = arr[i] \r\n        j = i-1\r\n        while j >=0 and key < arr[j] : \r\n                arr[j+1] = arr[j] \r\n                j -= 1\r\n        arr[j+1] = key \r\n\r\narr = [9, 4, 7, 2, 3]\r\ninsertionSort(arr) \r\nprint (\"Sorted array ___:\") \r\nfor i in range(len(arr)): \r\n    print (\"%d\" %arr[i]),",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5183,
            "material": "Data Structure",
            "instruction": "Generate a Python script to randomly select k elements from a list.",
            "question": "import random\r\n\r\n# Initialize the array ___ = [11, 22, 7, 12, 3, 8]\r\nk = 3\r\n\r\n# Randomly select k elements from array\r\nselected = random.sample(array, k)\r\n\r\n# Output the result\r\nprint(f'Randomly selected {k} elements: {selected}')",
            "correct_answer": "array",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5213,
            "material": "Data Structure",
            "instruction": "Write a python program to filter a list of numbers by removing duplicate items.",
            "question": "# Create an empty set ___ = set()\r\nnums = [1,2,3,4,5,2,3]\r\n\r\n# Iterate over the list\r\nfor num in nums:\r\n # Add each item to the set if it is not already present\r\n if num not in result:\r\n  result.add(num)\r\n\r\n# Print the resulting list\r\nprint(list(result)) #[1, 2, 3, 4, 5]",
            "correct_answer": "result",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5219,
            "material": "Data Structure",
            "instruction": "Write a function in Python to compute the sum of the given list of numbers.",
            "question": "def sum_list(nums):\r\n sum = 0\r\n for n in nums:\r\n  sum += n\r\n return sum\r\n\r\nresult = sum_list([1, 24, 47, 98, 22, 45])\r\nprint(\"Sum of the list ___\", result)",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5228,
            "material": "Data Structure",
            "instruction": "Generate a program in Python that takes as input an array of numbers and returns the sum of all numbers in the array.",
            "question": "def sum_elements(nums):\r\n    \"\"\"Given an array ___ number, return the sum of all elements in the array \"\"\"\r\n    result = 0\r\n    for num in nums:\r\n        result += num\r\n    return result\r\n\r\nprint(sum_elements([2,3,4]))",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5258,
            "material": "Data Structure",
            "instruction": "Develop a Python program to create a frequency table for an array of integer elements.",
            "question": "from collections import Counter\r\n\r\ndef frequency(arr):\r\n    \"\"\"\r\n    Develop a Python program to create a frequency table for an array ___ integer elements\r\n    \"\"\"\r\n    return Counter(arr)\r\n\r\nif __name__ == '__main__':\r\n    arr = [1,1,3,5,3,3,5] \r\n    print(frequency(arr))",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5267,
            "material": "Data Structure",
            "instruction": "Write a Python program to sort a list of tuples by their second element.",
            "question": "def sortBySecondElement(lst):\r\n    # Sort the list ___ tuples by their second elements\r\n    return sorted(lst, key=lambda x : x[1])\r\n\r\n# Testing\r\nlst = [(1, 3), (3, 2), (4, 1), (2, 4)]\r\n\r\nsortedLst = sortBySecondElement(lst)\r\n\r\nprint(sortedLst)\r\n\r\n# Output\r\n# [(4, 1), (3, 2), (1, 3), (2, 4)]",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5275,
            "material": "Data Structure",
            "instruction": "Write a Python script to implement the quick sort algorithm on a list.",
            "question": "def quick_sort(array):\r\n    if len(array) < 2:\r\n        return array ___ = array[0]\r\n    less = [i for i in array[1:] if i <= pivot]\r\n    greater = [i for i in array[1:] if i > pivot]\r\n    return quick_sort(less) + [pivot] + quick_sort(greater)",
            "correct_answer": "pivot",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5285,
            "material": "Data Structure",
            "instruction": "Write a python script to compute the average value in an array.",
            "question": "# Funciton to compute the average value in an array ___ computeAverage(values):\r\n # Initialize sum\r\n sum = 0\r\n \r\n # Iterate through values\r\n for value in values:\r\n sum+=value\r\n \r\n # Compute average\r\n average = sum / len(values)\r\n \r\n # Return average\r\n return average\r\n \r\n# Call function\r\ncomputeAverage(values); // Returns 6.0",
            "correct_answer": "def",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5333,
            "material": "Data Structure",
            "instruction": "Create an algorithm in Python to count the number of unique elements in a list.",
            "question": "def countUnique(arr):\r\n    # create a lookup to keep track of elements\r\n    lookup = set()\r\n    # loop over list ___ add elements to set\r\n    for elem  in arr:\r\n        if elem not in lookup:\r\n            lookup.add(elem)\r\n    # return the length of the lookup set\r\n    return len(lookup)\r\n\r\n# test program\r\narr = [1, 2, 3, 1, 2]\r\nprint(countUnique(arr))",
            "correct_answer": "to",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5376,
            "material": "Data Structure",
            "instruction": "Write a Python script that filters a list of integers and returns only even numbers.",
            "question": "def filter_even_numbers(lst):\r\n    # Filter out even numbers from the given list ___ = [num for num in lst if num % 2 == 0]\r\n    return even_numbers\r\n\r\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nresult = filter_even_numbers(list)\r\nprint(result)",
            "correct_answer": "even_numbers",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5378,
            "material": "Data Structure",
            "instruction": "Write a Python program to sort a list of tuples by the second item in each tuple.",
            "question": "# sort a list ___ tuples by the second item in each tuple\r\ndef sort_tuple(tuples):\r\n    # sort in ascending order\r\n    tuples.sort(key=lambda x: x[1])\r\n    # return the list\r\n    return tuples",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5396,
            "material": "Data Structure",
            "instruction": "Write a Python program to get the index of the largest item in a given list.",
            "question": "# get the index of the largest item in a list ___ get_max_index(arr):\r\n    max_index = 0\r\n    for i in range(1, len(arr)):\r\n        if arr[i] > arr[max_index]:\r\n            max_index = i\r\n    return max_index\r\n\r\nresult = get_max_index([4, 3, 5, 7, 6])\r\nprint(result) # 3",
            "correct_answer": "def",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5408,
            "material": "Data Structure",
            "instruction": "Calculate the sum of the numbers in this list in Python.",
            "question": "# Calculate the sum of the numbers in the list ___ = sum(lst)\r\n\r\n# Print the result\r\nprint(total) # prints 25",
            "correct_answer": "total",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5416,
            "material": "Data Structure",
            "instruction": "Implement a function in Python to reverse a given list of numbers.",
            "question": "def reverseList(list):\r\n    start = 0\r\n    end = len(list) - 1\r\n  \r\n    while start < end:\r\n        list[start], list[end] = list[end], list[start]\r\n        start += 1\r\n        end -= 1\r\n  \r\n    return list ___ = [1, 2, 4, 7, 9]\r\n\r\nreverseList(list)\r\n# Output: [9, 7, 4, 2, 1]",
            "correct_answer": "list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5445,
            "material": "Data Structure",
            "instruction": "Find the minimum element in a Python list called 'nums'",
            "question": "\"\"\"\r\nFind the minimum element in a Python list ___ 'nums'\r\n\"\"\"\r\n\r\ndef find_min(nums):\r\n    min = nums[0]\r\n    for num in nums:\r\n        if num < min:\r\n            min = num\r\n    return min\r\n    \r\nif __name__ == '__main__':\r\n    nums = [2, 3, 4, 1, 7, 8, 5]\r\n    print(find_min(nums))",
            "correct_answer": "called",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5465,
            "material": "Data Structure",
            "instruction": "You are given a 2D list that needs to be flattened into a single dimensional list. Write some python code to achieve this transformation.",
            "question": "def flatten_list(input_list): \r\n    flattened_list = [] \r\n      \r\n    # traversing the 2d list ___ row in input_list: \r\n        # traversing the row \r\n        for column in row: \r\n            flattened_list.append(column) \r\n    return flattened_list",
            "correct_answer": "for",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5481,
            "material": "Data Structure",
            "instruction": "Create a function in Python that takes an array of integers as input and outputs the number of unique values in the array.",
            "question": "def get_unique_values(arr):\r\n    # convert to set ___ = set(arr) \r\n  \r\n    # return length \r\n    return len(unique_arr) \r\n  \r\n# driver code \r\narr = [1, 5, 5, 4, 4, 6, 7, 7] \r\n  \r\n# function call \r\nunique_values = get_unique_values(arr) \r\n  \r\n# print unique values \r\nprint(unique_values)",
            "correct_answer": "unique_arr",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5505,
            "material": "Data Structure",
            "instruction": "Generate a Python script to find the top 5 most popular items in a given list.",
            "question": "from collections import Counter\r\n\r\n# Get the input list ___ = [1, 3, 5, 3, 6, 2, 4, 6, 8, 4]\r\n\r\n# Use Counter library to get a dictionary of the top 5 items\r\ntop_five = Counter(list).most_common(5)\r\n\r\n# Print the top five items\r\nprint(\"Top five items in the list:\")\r\nfor key, val in top_five:\r\n    print(key, \":\", val, \"occurrences\")",
            "correct_answer": "list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5507,
            "material": "Data Structure",
            "instruction": "Write a Python program to calculate the average of a list of positive integers and output the result.",
            "question": "list_of_positive_integers = [1, 5, 6, 7, 8]\r\ntotal = sum(list_of_positive_integers)\r\n\r\navg = total/len(list_of_positive_integers)\r\n\r\nprint(\"The average of the list ___ positive integers is {}\".format(avg))",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5509,
            "material": "Data Structure",
            "instruction": "Create a Python program that removes duplicate elements from a list.",
            "question": "def remove_duplicates(nums): \r\n  \r\n    # A list ___ storing final output \r\n    new_list = [] \r\n  \r\n    # Looping over the elements \r\n    for num in nums: \r\n        # If num is not in new_list, then add it \r\n        if num not in new_list: \r\n            new_list.append(num) \r\n  \r\n    return new_list \r\n\r\n# Main code \r\ninput_list = [1,2,3,4,4,2,7,8,8,1]\r\nprint(remove_duplicates(input_list))",
            "correct_answer": "for",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5515,
            "material": "Data Structure",
            "instruction": "Generate a Python dictionary from a given list of strings.",
            "question": "# Create a dictionary from a list ___ = {key: value for key, value in enumerate([\"Apple\", \"Banana\", \"Carrot\"])}\r\n\r\n# Print dictionary\r\nprint(my_dict)",
            "correct_answer": "my_dict",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5518,
            "material": "Data Structure",
            "instruction": "Write a short python script to get the average of numbers stored in the list.",
            "question": "# Compute the average of the numbers\r\nnumbers = [1, 2, 3, 4, 5]\r\ntotal = 0\r\nfor number in numbers:\r\n    total += number\r\n\r\n# Divide the total by the number of elements in the list ___ = total / len(numbers)\r\n\r\n# Print the average\r\nprint(average)",
            "correct_answer": "average",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5604,
            "material": "Data Structure",
            "instruction": "Create a sorting algorithm in Python to sort an unsorted set of names.",
            "question": "def sort_names(names):\r\n    # sorted() returns an alphabetically sorted list ___ sorted(names)\r\n\r\nunsorted_names = [\"John\", \"Jack\", \"Joan\", \"Adam\", \"Elena\", \"Mia\"]\r\n\r\nprint(sort_names(unsorted_names)) # ['Adam', 'Elena', 'Jack', 'Joan', 'John', 'Mia']",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5646,
            "material": "Data Structure",
            "instruction": "Write a Python program to create two separate lists containing the even and odd elements of the given list.",
            "question": "# Program to create two separate lists containing the even and odd elements of the given list ___ = [1, 2, 3, 4, 5, 6, 7, 8] \r\n\r\neven_list = [] \r\nodd_list = [] \r\n\r\nfor element in given_list: \r\n    if element % 2 == 0 : \r\n        even_list.append(element) \r\n    else: \r\n        odd_list.append(element) \r\n\r\nprint(even_list)\r\nprint(odd_list)",
            "correct_answer": "given_list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5681,
            "material": "Data Structure",
            "instruction": "Optimize the following Python program to find the given number in a list.",
            "question": "def find_number(lst, num):\r\n  for i, v in enumerate(lst):\r\n    if v == num:\r\n      return i\r\n  \r\n  return -1\r\n\r\nlist_of_numbers = [2, 4, 9, 8, 10]\r\nnumber_to_find = 8\r\n\r\n# Find the given number in the list ___ = find_number(list_of_numbers, number_to_find)\r\nif index != -1:\r\n  print(f'Number {number_to_find} found at index {index}.')\r\nelse:\r\n  print('Number not found.')",
            "correct_answer": "index",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5682,
            "material": "Data Structure",
            "instruction": "Write a function in Python to find the maximum two numbers in a list.",
            "question": "def max_two(list):\r\n    #sort the list ___ ascending order\r\n    list.sort()\r\n    #return the last two elements\r\n    return list[-2:]\r\n\r\n#example\r\nnumber_list = [2, 4, 5, 9, 10, 11]\r\nresult = max_two(number_list)\r\n\r\nprint(result)\r\n# Output: [10, 11]",
            "correct_answer": "in",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5702,
            "material": "Data Structure",
            "instruction": "Create a program in Python to remove all the occurrences of an item from a list.",
            "question": "def removeItem(list, item):\r\n    # loop through the list ___ i in list:\r\n        # check if the element is the item to remove\r\n        if i == item:\r\n            # remove the item\r\n            list.remove(i)\r\n    # return the list\r\n    return list\r\n\r\n#example\r\nlist = [1, 2, 3, 4, 2, 5, 2]\r\nresult = removeItem(list, 2)\r\n\r\nprint(result)\r\n# Output: [1, 3, 4, 5]",
            "correct_answer": "for",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5707,
            "material": "Data Structure",
            "instruction": "Develop a Python program to calculate the sum of all the elements in a given 2D array.",
            "question": "def sum_2d_array(array):\r\n  # Initialize sum\r\n  _sum = 0\r\n  # Iterate over array ___ add each element\r\n  for row in array:\r\n    for element in row:\r\n      _sum += element\r\n  # Return sum\r\n  return _sum\r\n\r\narr = [[1, 2], [3, 4], [5, 6]]\r\nprint(sum_2d_array(arr))",
            "correct_answer": "and",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5743,
            "material": "Data Structure",
            "instruction": "Create a class in Python that implements the count() method to count the number of elements in a given array.",
            "question": "class ArrayCounter:\r\n def __init__(self, array):\r\n self.array = array ___ count(self):\r\n return len(self.array)\r\n\r\narr_counter = ArrayCounter([1, 2, 3, 4])\r\nprint(arr_counter.count())",
            "correct_answer": "def",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5744,
            "material": "Data Structure",
            "instruction": "Write a Python program to fliter a list of strings and return a new list containing only the strings containing the letter 'a'.",
            "question": "list_strings = ['ant', 'bar', 'cat', 'dog', 'eel']\r\n\r\n# using list ___\r\nfiltered_list = [x for x in list_strings if 'a' in x]\r\n \r\nprint(filtered_list)\r\n# output: ['ant', 'bar', 'cat']",
            "correct_answer": "comprehension",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5754,
            "material": "Data Structure",
            "instruction": "Create a Python program to filter a list of words and keep only those words that are longer than 8 characters.",
            "question": "# Filter list ___ = ['hello', 'world', 'this', 'is', 'a', 'test', 'foobar']\r\n\r\n# Keep only words longer than 8 characters\r\nfiltered_words = [word for word in words if len(word) > 8]\r\n\r\nprint(filtered_words)\r\n# Output: ['foobar']",
            "correct_answer": "words",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5817,
            "material": "Data Structure",
            "instruction": "Create a Python program that will take an array of integers as input and output a reversed version of the array.",
            "question": "def reverseArray(arr): \r\n    return arr[::-1] \r\n  \r\narr = [1,2,3,4,5] \r\nreverseArr = reverseArray(arr) \r\n  \r\nprint(\"Reversed array ___\", reverseArr)",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5831,
            "material": "Data Structure",
            "instruction": "Generate code for a function in Python for finding the sum of a given list of numbers.",
            "question": "def add_numbers(numbers):\r\n    \"\"\"\r\n    Find the sum of a given list ___ numbers.\r\n    Args:\r\n        numbers: a list of numbers.\r\n    Returns:\r\n        The sum of the numbers.\r\n    \"\"\"\r\n    sum = 0\r\n\r\n    # Iterate over numbers\r\n    for num in numbers:\r\n        # Add number to total\r\n        sum += num\r\n\r\n    return sum\r\n\r\ntotal = add_numbers([4, 7, 6, 2])\r\n\r\nprint(total)",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5870,
            "material": "Data Structure",
            "instruction": "Create a Python program to generate a 2D array of a defined size and fill it with random numbers.",
            "question": "import random\r\n\r\n# define the size of the array ___, y = 10, 10\r\n\r\n# create an empty array of the given size\r\narr = [[0 for j in range(x)] for i in range(y)]\r\n\r\n# fill the array with random numbers\r\nfor i in range(x):\r\n for j in range(y):\r\n arr[i][j] = random.randint(0, 9)\r\n\r\n# print the array\r\nfor i in range(x):\r\n print(arr[i])",
            "correct_answer": "x",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5881,
            "material": "Data Structure",
            "instruction": "Edit the following Python program to find the maximum number in a given list of numbers.",
            "question": "numbers = [25, 12, 15, 32, 7]\r\n\r\n# initialize maximum number\r\nmax = numbers[0]\r\n\r\n# loop through list ___ num in numbers:\r\n    # compare each number to find the max\r\n    if num > max:\r\n        max = num\r\n\r\n# print maximum number\r\nprint(max)",
            "correct_answer": "for",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5901,
            "material": "Data Structure",
            "instruction": "Write an algorithm in Python to find the average value in an array of integers.",
            "question": "def avg(arr): \r\n  \r\n    # calculating length of array ___ = len(arr) \r\n    total_sum = 0\r\n\r\n    for i in range(0, n): \r\n        total_sum += arr[i] \r\n  \r\n    return total_sum / n \r\n\r\n# Driver code \r\narr = [4, 10, 6, 8] \r\nassert avg(arr) == 7.0",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5968,
            "material": "Data Structure",
            "instruction": "Using the list and additional libraries, write a python program to calculate the sum of all elements in the list.",
            "question": "#Importing the libraries\r\nimport numpy as np\r\n\r\n#Defining the list ___ = [2, 3, 5, 8, 9]\r\n\r\n#Calculating the sum\r\nsum = np.sum(list)\r\n\r\n#Printing the result\r\nprint(sum)",
            "correct_answer": "list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6018,
            "material": "Data Structure",
            "instruction": "Compose Python code to remove all elements from a list by value.",
            "question": "def remove_by_val(mylist, val):\r\n     return [i for i in mylist if i != val]\r\n\r\nmylist = [1,2,3,4,2]\r\nresult = remove_by_val(mylist, 2)\r\nprint(\"Updated list ___ removing elements are: \", result)",
            "correct_answer": "after",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6034,
            "material": "Data Structure",
            "instruction": "Edit the following Python program to accept a list of numbers as input and find the second largest number from the list.",
            "question": "# Find the second largest number from a given list ___ = [12, 23, 45, 22, 50]\r\n\r\n# Sort the list in ascending order\r\nnumbers.sort()\r\n\r\n# Get the second largest number\r\nsecond_largest_num = numbers[-2]\r\n\r\nprint('The second largest number in the list is:', second_largest_num)",
            "correct_answer": "numbers",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6050,
            "material": "Data Structure",
            "instruction": "Given a list of integers, write a program in Python to determine which is the maximum number.",
            "question": "# take a list ___ = [19,7,32,1,8,27] \r\n  \r\n# initializinf max_val to INT_MIN so that \r\n# any int number would be greater that it \r\nmax_val = float(\"-inf\") \r\n  \r\n# traversing through the list \r\nfor item in list: \r\n    if item > max_val: \r\n        max_val = item \r\n  \r\n# printing the maximum value \r\nprint(\"The maximum value of the list is:\", max_val)",
            "correct_answer": "list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6087,
            "material": "Data Structure",
            "instruction": "Given the following array of numbers, write a Python program to find the maximum element.",
            "question": "#import max from the built-in library\r\nfrom max import max\r\n\r\n#initialize array ___ numbers\r\nnumbers = [1, 43, 78, 3, 92, 42]\r\n\r\n#find maximum element\r\nprint(max(numbers))\r\n\r\n#output\r\n92",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6111,
            "material": "Data Structure",
            "instruction": "Create a Python script that normalizes a given list of strings.",
            "question": "\"\"\"\r\nNormalize a given list ___ strings\r\n\"\"\"\r\n\r\ndef normalize(lst):\r\n    output = []\r\n    for item in lst:\r\n        output.append(item.lower())\r\n    return output\r\n    \r\nif __name__ == '__main__':\r\n    input_list = ['Red', 'red', 'WhITE', 'white', 'bLUE', 'blue']\r\n    print(normalize(input_list))",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6167,
            "material": "Data Structure",
            "instruction": "Design a Python program to remove a specified element from a list.",
            "question": "def remove_element(list, element):\r\n  return [ el for el in list ___ el != element]\r\n\t \r\nlist = [1, 2, 3, 4, 5]\r\n\t\r\nlist = remove_element(list, 4)\r\n\t\r\nprint(list)",
            "correct_answer": "if",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6181,
            "material": "Data Structure",
            "instruction": "Create a program in Python that outputs the kth smallest element in a given list of numbers.",
            "question": "list = [15, 28, 12, 7, 9] # List of numbers\r\nk = 4 # kth smallest element\r\n\r\nsorted_list = sorted(list) # sorting the list ___ numbers\r\n\r\nprint(\"The {}th smallest element is {}\".format(k, sorted_list[k-1])) # print the kth smallest element in the sorted_list using the index (k-1)",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6223,
            "material": "Data Structure",
            "instruction": "Create a Python script to remove specific items from a given list of strings.",
            "question": "strings = [\"apple\", \"orange\", \"banana\", \"grape\"]\r\nwords_to_remove = [\"apple\", \"grape\"]\r\n\r\n# Using list ___\r\nfiltered_list = [word for word in strings if word not in words_to_remove] \r\n\r\n# Output\r\nprint(filtered_list)\r\n\r\n# Output\r\n['orange', 'banana']",
            "correct_answer": "comprehension",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6228,
            "material": "Data Structure",
            "instruction": "Design a python program that reads a list of numbers and prints the number of even numbers",
            "question": "# Get list ___ numbers\r\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8]\r\n\r\n# Initialize a count\r\ncount = 0\r\n\r\n# Iterate through the list of numbers and count the even numbers\r\nfor num in numbers:\r\n    if num % 2 == 0:\r\n        count += 1\r\n\r\n# Print the result\r\nprint(f\"The number of even numbers is: {count}\")",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6246,
            "material": "Data Structure",
            "instruction": "Generate a Python script to generate all combinations of a list.",
            "question": "import itertools\r\n\r\ndef combinations(list):\r\n comb = itertools.combinations(list, 2)\r\n return [list(x) for x in set(comb)]\r\n\r\nlist = [1, 2, 3]\r\n\r\nresult = combinations(list)\r\n\r\nprint(f'The list ___ combinations is {result}')",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6255,
            "material": "Data Structure",
            "instruction": "Construct an algorithm in Python for calculating the median of a given list of numbers.",
            "question": "def calculateMedian(numbers):\r\n    n = len(numbers)\r\n    if n % 2 == 0:\r\n        num1 = numbers[n//2]\r\n        num2 = numbers[n//2 - 1]\r\n        median = (num1 + num2)/2\r\n    else: \r\n        median = numbers[n//2]\r\n    return median\r\n        \r\nnumbers = [2, 4, 3, 5, 7]\r\nmedian = calculateMedian(numbers)\r\nprint(\"Median of list ___:\", median)",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6302,
            "material": "Data Structure",
            "instruction": "Create a python function that takes a list of integers as input and returns the list with the numbers sorted in descending order.",
            "question": "def sortList(nums): \r\n \r\n    # sort the list ___ descending order \r\n    nums.sort(reverse = True) \r\n   \r\n    # return the sorted list \r\n    return nums \r\n   \r\n# driver code \r\nlist = [5, 4, 3, 2, 1] \r\nprint(sortList(list))",
            "correct_answer": "in",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6305,
            "material": "Data Structure",
            "instruction": "Design a program in Python that takes a list of numbers as input and returns the average.",
            "question": "# Function to return average\r\ndef average(lst):\r\n    \r\n    # Calculate sum of list ___ = 0\r\n    for x in lst:\r\n        sum_num += x\r\n        \r\n    # Return average \r\n    return sum_num / len(lst)\r\n\r\n# Sample List\r\nlst = [1, 2, 3, 4, 5, 6, 7]\r\n\r\n# Calling average function\r\nprint(average(lst))",
            "correct_answer": "sum_num",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6368,
            "material": "Data Structure",
            "instruction": "Write a Python program to pad a 3D array along its first two axes.",
            "question": "import numpy as np\r\n\r\narr = np.array([[[1, 2, 3], [4, 5, 6]],\r\n                [[7, 8, 9], [10, 11, 12]]])\r\n\r\n# Pad the array ___ 0s along its first two axes\r\n\r\narr_pad = np.pad(arr, ((1, 1), (1, 1), (0, 0)), 'constant', constant_values=0)",
            "correct_answer": "with",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6395,
            "material": "Data Structure",
            "instruction": "Create a class in Python that takes an array as an argument and reverses the elements.",
            "question": "class ReverseArray:\r\n def __init__(self, array):\r\n self.array = array ___ reverse(self):\r\n self.array.reverse()\r\n \r\n # To test with given input\r\n array = [1, 2, 3, 4]\r\n rev_array = ReverseArray(array)\r\n rev_array.reverse()\r\n print(array) # Output: [4, 3, 2, 1]",
            "correct_answer": "def",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6396,
            "material": "Data Structure",
            "instruction": "Develop an algorithm in Python for clustering a set of data points.",
            "question": "from sklearn.cluster import KMeans\r\nimport numpy as np\r\n\r\n# Create array ___ the data points\r\ndata_points = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\r\n\r\n# Calculate clusters\r\nkmeans = KMeans(n_clusters=3).fit(data_points)\r\n\r\n# Get labels for each point\r\nlabels = kmeans.predict(data_points)\r\n\r\n# Print clusters\r\nprint(labels) # Output: [0, 1, 2]",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6410,
            "material": "Data Structure",
            "instruction": "Develop a python code to find out the frequent items from a given list.",
            "question": "from collections import Counter\r\nlist1 = [1,2,3,4,5,6,7,2,2,2,2,8,8,8,8,9,9,9]\r\n\r\n# Most common items in the list ___ = Counter(list1) \r\n  \r\n# Printing most common items \r\nprint(data.most_common()) # Output: [(2, 4), (8, 4), (9, 3), (1, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1)]",
            "correct_answer": "data",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6415,
            "material": "Data Structure",
            "instruction": "Generate a python program that creates a new list by appending an element to the last of an existing list.",
            "question": "def appendElementToList(list, element):\r\n     list.append(element)\r\n     return list ___ = [1, 2, 3]\r\nelement = 4\r\nprint(appendElementToList(list, element))",
            "correct_answer": "list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6470,
            "material": "Data Structure",
            "instruction": "Create a function in Python to filter a list of numbers by a given criteria.",
            "question": "# Filter a list ___ a given criteria\r\ndef filter_list(input_list, criteria):\r\n    filtered_list = []\r\n    for num in input_list:\r\n        if num % criteria == 0:\r\n            filtered_list.append(num)\r\n    return filtered_list\r\n\r\nresult = filter_list([2, 3, 4, 5, 6, 7], 3)\r\nprint(result)",
            "correct_answer": "with",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6516,
            "material": "Data Structure",
            "instruction": "Create a program that sorts a list of strings in alphabetical order.",
            "question": "\"\"\"\r\nCreate a program that sorts a list ___ strings in alphabetical order.\r\n\"\"\"\r\n\r\ndef sort_list(lst):\r\n    \"\"\"\r\n    This function sorts a list of strings in alphabetical order.\r\n    \"\"\"\r\n    lst.sort()\r\n    return lst\r\n \r\nif __name__ == '__main__':\r\n    lst = ['python', 'javascript', 'java', 'go']\r\n    print(sort_list(lst))",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6522,
            "material": "Data Structure",
            "instruction": "In Python, create a function that takes a list of strings and capitalizes the first letter of each word.",
            "question": "def capitalize_each_word(string_list):\r\n  \"\"\"Capitalizes the first letter of each word in a list ___ strings.\"\"\"\r\n  capitalized_strings = []\r\n  for s in string_list:\r\n    capitalized_strings.append(s.title())\r\n\r\n  return capitalized_strings\r\n\r\nif __name__ == \"__main__\":\r\n  string_list = ['hello', 'world']\r\n  print(capitalize_each_word(string_list))",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6579,
            "material": "Data Structure",
            "instruction": "Optimize a code snippet in Python that sorts the given array.",
            "question": "# optimized code snippet to sort the given array ___ = [5, 4, 3, 2, 1]\r\narr.sort()\r\nprint(arr)\r\n# arr is now sorted in ascending order as [1, 2, 3, 4, 5]",
            "correct_answer": "arr",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6616,
            "material": "Data Structure",
            "instruction": "Implement a sorting algorithm in Python to sort a given list of numbers in ascending order.",
            "question": "def sort(list):\r\n  for i in range(len(list)):\r\n    min_idx = i\r\n    for j in range(i+1, len(list)):\r\n      if list[min_idx] > list[j]:\r\n        min_idx = j\r\n  list[i], list[min_idx] = list[min_idx], list[i]\r\n\r\n  return list ___ = [3,7,1,4,9,5]\r\nsorted_list = sort(list)\r\n\r\nprint(sorted_list)",
            "correct_answer": "list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6770,
            "material": "Data Structure",
            "instruction": "Generate an optimized Python data structure for sorting a large list of numbers.",
            "question": "def optimized_sort(numbers):\r\n    # Create a heap\r\n    heap = []\r\n\r\n    # Insert each element into the heap\r\n    for num in numbers:\r\n        heapq.heappush(heap, num)\r\n\r\n    # Pop elements from the heap and append ___ result list\r\n    sorted_nums = []\r\n    while heap:\r\n        sorted_nums.append(heapq.heappop(heap))\r\n\r\n    return sorted_nums",
            "correct_answer": "to",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6777,
            "material": "Data Structure",
            "instruction": "Write a Python program to take a list of numbers and reverse the order of the elements in the list in place.",
            "question": "def reverse_list(numbers):\r\n # get the length of the list ___ = len(numbers)\r\n\r\n # loop through the list\r\n for i in range(n // 2):\r\n # swap the elements\r\n numbers[i], numbers[n - i - 1] = numbers[n - i - 1], numbers[i]\r\n\r\nnumbers = [1, 2, 3, 4, 5]\r\nreverse_list(numbers)\r\nprint(numbers) # [5, 4, 3, 2, 1]",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6785,
            "material": "Data Structure",
            "instruction": "Create a Python program to list all the integers between a given range input.",
            "question": "def list_integers(start, end):\r\n    integers_list=[]\r\n    while (start <= end):\r\n        integers_list.append(start)\r\n        start = start + 1\r\n    return integers_list\r\n  \r\nprint(\"The list ___ integers in the given range is:\")\r\nresult = list_integers(3,10)\r\nprint(result)",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6798,
            "material": "Data Structure",
            "instruction": "Create a unique list of items from a given list in Python.",
            "question": "# Unique list ___ = list(set(given_list))\r\n\r\n#Print unique list\r\nprint(unq_list)",
            "correct_answer": "unq_list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6844,
            "material": "Data Structure",
            "instruction": "Write a python program to generate a random password given a set of letters, numbers, and characters.",
            "question": "import random \r\n  \r\n  \r\n# All the possible characters \r\n# that could go into the password \r\nstring = \"abcdefghijklmnopqrstuvwxyz01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()?\"\r\n  \r\n# Using the choice function of the \r\n# random module choose any \r\n# character randomly from the set ___ characters \r\npassword =  \"\".join(random.sample(string, 8)) \r\nprint(password)",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6859,
            "material": "Data Structure",
            "instruction": "Incorporate AI into an existing Python program to sort a list of integers.",
            "question": "def AI_sort(list):\r\n  sorted_list = sorted(list) \r\n  return sorted_list\r\n\r\nlist = [4,3,7,8,2,1,6]\r\nprint(\"Sorted list ___ :\", AI_sort(list))",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6872,
            "material": "Data Structure",
            "instruction": "Generate a Python function that takes in a list of numbers, and creates a new list with each number doubled.",
            "question": "def double_numbers(numbers):\r\n    # use list ___ to double each number\r\n    doubled_numbers = [num * 2 for num in numbers]\r\n    return doubled_numbers\r\n\r\nnumbers = [1, 2, 3, 4]\r\ndoubled_numbers = double_numbers(numbers)\r\nprint(doubled_numbers) # [2, 4, 6, 8]",
            "correct_answer": "comprehesion",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6880,
            "material": "Data Structure",
            "instruction": "Create a Python Program to sort a list of strings according to the length of their elements.",
            "question": "def ascending_sort(list):\r\n    list.sort(key=len)\r\n    return list ___ = [\"apple\", \"cat\", \"banana\", \"dog\"]\r\nresult = ascending_sort(list)\r\nprint(result)",
            "correct_answer": "list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6907,
            "material": "Data Structure",
            "instruction": "Write a script in Python to get the largest and smallest number from a given list.",
            "question": "# Solution\r\n# First, let's define our list ___ numbers\r\nmy_list = [9, 10, -12, 0, 5]\r\n\r\n# Now, let's get the largest and the smallest numbers\r\nmax_val = max(my_list)\r\nmin_val = min(my_list)\r\n\r\n# Finally, we can print out the results\r\nprint(\"Largest number:\", max_val)\r\nprint(\"Smallest number:\", min_val)",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6909,
            "material": "Data Structure",
            "instruction": "Create a python program to calculate the average of the numbers in a list (not including null values).",
            "question": "# Calculate the average\r\ndef avg(lst): \r\n    sum = 0\r\n    count = 0\r\n    for num in lst:\r\n        if num is not None:\r\n            sum += num\r\n            count += 1\r\n    return sum / count\r\n\r\n# Create list ___ numbers\r\nlst = [30, 28, 40, 10, 0, None, 33, None]\r\n\r\n# Print average\r\nprint(avg(lst))\r\n\r\n# Output: 25.5",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6923,
            "material": "Data Structure",
            "instruction": "Write a Python script to find the second highest number in a list of numbers.",
            "question": "list_nums = [12, 2, 6, 8, 19, 15] \r\n  \r\n# sorting the list ___ ascending order\r\nlist_nums.sort() \r\n  \r\n# printing the second last element \r\nprint(\"Second highest number is:\", list_nums[-2])",
            "correct_answer": "in",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6951,
            "material": "Data Structure",
            "instruction": "Write a function in Python to remove duplicates from a list.",
            "question": "def remove_duplicates(nums):\r\n    # create a set ___ remove duplicates\r\n    unique_list = set(nums)\r\n    # convert the set back to a list\r\n    nums = list(unique_list)\r\n    return nums\r\n\r\ninput_list = [2, 2, 3, 4, 5, 5]\r\nresult = remove_duplicates(input_list)\r\nprint(result)",
            "correct_answer": "to",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6960,
            "material": "Data Structure",
            "instruction": "Sort a list of dictionaries in Python by a given key.",
            "question": "list_of_dicts = [{'food': 'apple', 'color': 'red'}, {'food': 'banana', 'color': 'yellow'}, {'food': 'pear', 'color': 'green'}]\r\n\r\n# Sort list ___ given key\r\nsorted_list = sorted(list_of_dicts, key=lambda item:item['color'])\r\n\r\nprint(sorted_list)",
            "correct_answer": "by",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6975,
            "material": "Data Structure",
            "instruction": "Develop a Python script which sorts a list of names in alphabetical order",
            "question": "names = [\"John\", \"Anna\", \"David\", \"Bob\", \"Alex\"]\r\n  \r\n# sorting the names \r\nnames.sort() \r\n  \r\n# printing the first name in the sorted list ___(\"The first name in the sorted list is:\") \r\nprint(names[0])",
            "correct_answer": "print",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6980,
            "material": "Data Structure",
            "instruction": "Write a function in Python to sort a given list according to the second element in the sublist",
            "question": "def sort_by_second_element(list):\r\n    list.sort(key= lambda x : x[1])\r\n    return list ___ = [['B', 'b'], ['A', 'a'], ['C', 'c']]\r\n\r\nprint(sort_by_second_element(list)) # [['A', 'a'], ['B', 'b'], ['C', 'c']]",
            "correct_answer": "list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7004,
            "material": "Data Structure",
            "instruction": "Develop a Python script to calculate the standard deviation of a list of numbers.",
            "question": "import statistics\r\n\r\n# Store the list ___ numbers \r\nnumber_list = [3, 8, 19, 24, 7, 50]\r\n \r\n# Calculate the standard deviation  \r\nstdev = statistics.stdev(number_list) \r\n \r\n# Print the standard deviation \r\nprint(stdev)",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7005,
            "material": "Data Structure",
            "instruction": "Generate a Python script to calculate the total cost of items in a grocery list.",
            "question": "# Calculating the total cost of items in a grocery list ___ = 0\r\nlist_items = {\"banana\": 2.5, \"apple\": 3.7, \"orange\": 4.2, \"tomato\": 1.2}\r\n\r\nfor item, price in list_items.items():\r\n    list_cost += price\r\n    \r\nprint('The total cost of the items in the list is {}'.format(list_cost)",
            "correct_answer": "list_cost",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7024,
            "material": "Data Structure",
            "instruction": "Write a Python function that takes a list of integers as an argument and returns a list of the squares of all the elements in the input list.",
            "question": "def squareList(inputList): \r\n\t# Returns a list ___ the squares of all the elements in inputList\r\n\tsquaredList = [] \r\n\r\n\tfor num in inputList:\r\n\t\tsquaredList.append(num ** 2) \r\n\r\n\treturn squaredList\r\n\r\n# Example \r\ninputList = [1, 2, 3, 4, 5] \r\n\r\nsquaredList = squareList(inputList) \r\n\r\nprint(squaredList)\r\n\r\n# Output: [1, 4, 9, 16, 25]",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7028,
            "material": "Data Structure",
            "instruction": "Generate a Python program to transform a given list of integers into a dictionary with each list element as the key and its square root as the value.",
            "question": "def to_dict(lst): \r\n    # Initialize a new dictionary \r\n    new_dict = {}\r\n      \r\n    # Iterate over the list ___ assign the square root of each element as value  \r\n    for item in lst:\r\n        new_dict[item] = item**0.5\r\n      \r\n    # Return the dictionary  \r\n    return new_dict",
            "correct_answer": "and",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7041,
            "material": "Data Structure",
            "instruction": "Implement a Python program to find the maximum and minimum of a list.",
            "question": "# Function to find the maximum and minimum of a list ___ find_max_min(nums):\r\n    max = nums[0]\r\n    min = nums[0]\r\n    for num in nums:\r\n        if num > max:\r\n            max = num\r\n        if num < min:\r\n            min = num\r\n    return (max, min)\r\n\r\n# Test program\r\nnums = [3, 2, 8, 9, 5]\r\nmax, min = find_max_min(nums)\r\nprint('Maximum:', max)\r\nprint('Minimum:', min)",
            "correct_answer": "def",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7050,
            "material": "Data Structure",
            "instruction": "Create a program in Python to find the second highest number in a list of numbers.",
            "question": "# Create an array ___ numbers\r\nnums = [8, 5, 11, 6, 9, 15]\r\n\r\n# Sort the array in descending order\r\nnums.sort(reverse=True)\r\n\r\n# Get the second highest number\r\nsecond_highest = nums[1]\r\n\r\n# Output the result\r\nprint(\"The second highest number is\", second_highest)",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7052,
            "material": "Data Structure",
            "instruction": "Sum up all the elements of a given list in Python.",
            "question": "my_list = [10,20,30,40]\r\n\r\ntotal = 0\r\nfor num in my_list:\r\n    total += num\r\n\r\nprint(\"The sum of all elements in the list ___: \" + str(total))",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7056,
            "material": "Data Structure",
            "instruction": "Rewrite the following Python program using recursion to sum the numbers in a list.",
            "question": "# Using recursion to sum the numbers in a list ___ recursive_sum(arr):\r\n    if len(arr) == 0:  \r\n        return 0   # Base case \r\n    else:\r\n        return arr[0] + recursive_sum(arr[1:])   # Recursive case\r\n\r\nprint(\"Sum of the list:\", recursive_sum([2, 4, 6, 8]))",
            "correct_answer": "def",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7087,
            "material": "Data Structure",
            "instruction": "Develop an algorithm in Python that finds the minimum element from a given array.",
            "question": "def findMin(arr): \r\n     \r\n    # Initialize minimum element as first \r\n    # element of array ___ = arr[0] \r\n  \r\n    # Loop through the array and get \r\n    # the current element \r\n    for i in range(len(arr)): \r\n        if arr[i] < min: \r\n            min = arr[i] \r\n  \r\n    return min\r\n\r\narr = [14, 7, 25, 16]\r\n\r\nprint(findMin(arr))",
            "correct_answer": "min",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7105,
            "material": "Data Structure",
            "instruction": "Write a Python function to sort a list of numbers in ascending order.",
            "question": "def sort_list(list): \r\n  list.sort() \r\n  return list ___(sort_list([2,4,3,1,5]))",
            "correct_answer": "print",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7163,
            "material": "Data Structure",
            "instruction": "Sort the following array from smallest to largest without using the built in sort method in Python.",
            "question": "def bubbleSort(arr):\r\n    n = len(arr) \r\n    for i in range(n): \r\n        for j in range(0, n-i-1): \r\n            if arr[j] > arr[j+1] : \r\n                arr[j], arr[j+1] = arr[j+1], arr[j]\r\n\r\narr = [5, 4, 2, 1, 3]\r\nbubbleSort(arr) \r\nprint (\"Sorted array ___:\") \r\nfor i in range(len(arr)): \r\n    print (\"%d\" %arr[i])",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7189,
            "material": "Data Structure",
            "instruction": "Develop an algorithm in Python to generate a random permutation of a given list.",
            "question": "import random\r\n\r\ndef generate_permutation(nums):\r\n n = len(nums)\r\n permutation = []\r\n\r\n# Generate a random index and add the element at that index to the list ___ _ in range(n):\r\n idx = random.randint(0, len(nums) - 1)\r\n permutation.append(nums[idx])\r\n nums.pop(idx)\r\n\r\nreturn permutation\r\n\r\n# Test the function\r\nprint(generate_permutation([1, 2, 3, 4, 5]))    # Output: [4, 2, 5, 3, 1]",
            "correct_answer": "for",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7209,
            "material": "Data Structure",
            "instruction": "Create a Python program to convert a list of temperatures from Celcius to Fahrenheit.",
            "question": "temp_list = [30,15,17,18]\r\n\r\n# Convert each element in the list ___ Fahrenheit\r\nfahrenheit_list = []\r\n\r\nfor temp in temp_list:\r\n fahrenheit_list.append(temp*9/5 + 32)\r\n\r\nprint(fahrenheit_list)\r\n# [86.0, 59.0, 62.6, 64.4]",
            "correct_answer": "to",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7247,
            "material": "Data Structure",
            "instruction": "Design an algorithm in Python that reverses the order of strings in a list.",
            "question": "def reverseList(list):\r\n    list.reverse()\r\n    return list ___ = [\"Apple\", \"Banana\", \"Carrot\", \"Durian\"]\r\n\r\nreverseList(list)",
            "correct_answer": "list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7315,
            "material": "Data Structure",
            "instruction": "Construct a function in Python to remove a given value from a list of integers.",
            "question": "def remove_element(list, element):\r\n  for i in list:\r\n    if i == element:\r\n      list.remove(i)\r\n  return list ___ = [5, 7, 6, 1, 3]\r\nelement = 3\r\n\r\nprint(remove_element(list, element)) # => [5, 7, 6, 1]",
            "correct_answer": "list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7332,
            "material": "Data Structure",
            "instruction": "Create a function in Python to find the minimum value in a given array.",
            "question": "def findMin(arr): \r\n   \r\n    # Initialize minimum element \r\n    min = arr[0] \r\n   \r\n    # Traverse array ___ starting from \r\n    # 1st to the last \r\n    for i in range(1, len(arr)): \r\n        if arr[i] < min: \r\n            min = arr[i]\r\n   \r\n    return min\r\n\r\narr = [10, 11, 8, 9, 2] \r\nprint(findMin(arr))",
            "correct_answer": "elements",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7375,
            "material": "Data Structure",
            "instruction": "Create a Python program that takes any number of lists and combines them into a single list.",
            "question": "def combine_lists(*lists):\r\n    '''This function takes any number of lists and combines them into a single list.'''\r\n    combined_list = []\r\n\r\n    for list ___ lists:\r\n        for item in list:\r\n            combined_list.append(item)\r\n\r\n    return combined_list\r\n\r\ncombined_list = combine_lists(list_1, list_2, list_3)\r\nprint(combined_list)",
            "correct_answer": "in",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7385,
            "material": "Data Structure",
            "instruction": "Can you design a function in Python to sort a list of tuples based on the second item in the tuple?",
            "question": "def sort_tuple(tuples):\r\n    # sort by 2nd item of the tuple ___.sort(key=lambda x: x[1])\r\n    return tuples\r\n\r\n# Test\r\ntuples = [(\"b\", 0), (\"a\", 1), (\"c\", -1)]\r\nsorted_tuples = sort_tuple(tuples)\r\nprint(sorted_tuples) # [(\"c\", -1), (\"b\", 0), (\"a\", 1)]",
            "correct_answer": "tuples",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7406,
            "material": "Data Structure",
            "instruction": "Design a program that outputs the average value of a list in Python.",
            "question": "# Given a list ___ numbers\r\nnums = [1, 4, 10, 6]\r\n\r\n# Calculate the average\r\ntotal = 0\r\nfor num in nums:\r\n    total += num\r\n\r\naverage = total/ len(nums)\r\n\r\n# Output the average\r\nprint(average)",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7411,
            "material": "Data Structure",
            "instruction": "Create a Python script that takes a list of email addresses as input and prints a filtered list of email addresses that belong to a particular domain.",
            "question": "filtered_list = [email for email in list ___ email.endswith(\"@gmail.com\")]\r\n\r\nprint(filtered_list)\r\n# Output: [\"john@gmail.com\", \"sophie@gmail.com\"]",
            "correct_answer": "if",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7420,
            "material": "Data Structure",
            "instruction": "Suggest an efficient algorithm for sorting an array of integers in Python.",
            "question": "def sort_array(array):\r\n    for i in range(len(array)):\r\n        lowest = i\r\n        for j in range(i + 1, len(array)):\r\n            if array[lowest] > array[j]:\r\n                lowest = j\r\n        array[i], array[lowest] = array[lowest], array[i]\r\n    return array ___ = sort_array([1, 5, 3, 8, 4, 2])\r\nprint(result)",
            "correct_answer": "result",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7441,
            "material": "Data Structure",
            "instruction": "Expand this function to compute the sum of a list in Python.",
            "question": "def computeSum(L):\r\n    \"\"\"Computes the sum of a list ___\r\n    ----------\r\n    L : list\r\n        A list of numbers\r\n\r\n    Returns\r\n    -------\r\n    total : int\r\n        The sum of all the numbers in the list\r\n    \"\"\"\r\n    total = 0\r\n    for x in L:\r\n        total += x\r\n    return total",
            "correct_answer": "Parameters",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7445,
            "material": "Data Structure",
            "instruction": "Create a Python program to find the largest number in a given list.",
            "question": "def largestNumber(list): \r\n    max_num = 0\r\n    for i in list:  \r\n        if i > max_num: \r\n            max_num = i \r\n    return max_num \r\n  \r\n\r\nlist = [3, 6, 4, 8, 1]\r\nlargestNumber = largestNumber(list) \r\nprint(\"Largest element in the list ___: \", largestNumber);",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7449,
            "material": "Data Structure",
            "instruction": "Generate a python script which calculates the average of ten numbers stored in a list.",
            "question": "my_list = [4, 6, 8, 10, 11, 12, 22, 34, 36, 37] \r\n  \r\n# calculate sum of the list ___ \r\nsum_numbers = sum(my_list) \r\n  \r\n# length of the list \r\nlength = len(my_list) \r\n  \r\n# average of the list \r\naverage = sum_numbers/length \r\n  \r\n# print the result \r\nprint(average)",
            "correct_answer": "numbers",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7531,
            "material": "Data Structure",
            "instruction": "Develop a Python script to convert a list of words into a dictionary with its frequency count as the key and the words as the value.",
            "question": "words = [\"hello\",\"world\",\"hello\",\"python\",\"hello\"] \r\n\r\n# counting frequency of each word in a list ___ = {}\r\nfor word in words: \r\n    if (word in wordFrequencyDict): \r\n        wordFrequencyDict[word] += 1\r\n    else: \r\n        wordFrequencyDict[word] = 1\r\n\r\nprint(wordFrequencyDict)",
            "correct_answer": "wordFrequencyDict",
            "attempts": "1",
            "duration": "20"
        }
    ]
}