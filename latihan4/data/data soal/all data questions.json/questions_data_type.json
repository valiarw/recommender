{
    "quiz": [
        {
            "question_id": 189,
            "material": "Data Type",
            "instruction": "Build a mini classifier model in Python to predict whether a given string is palindrome or not.",
            "question": "class Palindrome:\r\n\r\ndef __init__(self, str):\r\n    self.str = str ___ is_palindrome(self):\r\n    return self.str == self.str[::-1]\r\n\r\npalindrome = Palindrome(\"level\")\r\nif palindrome.is_palindrome():\r\n    print(\"The string is a palindrome\")\r\nelse:\r\n    print(\"The string is not a palindrome\")",
            "correct_answer": "def",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 236,
            "material": "Data Type",
            "instruction": "Write a code to detect any pattern in a given string in Python.",
            "question": "def detect_pattern(my_string):\r\n    for i in range(len(my_string)):\r\n        if my_string.count(my_string[i]) > 1:\r\n            return True ___ False\r\n\r\nif __name__ == '__main__':\r\n    print(detect_pattern(my_string))",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 313,
            "material": "Data Type",
            "instruction": "Write a Python program to determine whether or not a given string is a palindrome.",
            "question": "def isPalindrome(s):\r\n\r\n # remove whitespaces\r\n s = ''.join(s.split())\r\n\r\n # reverse string\r\n rev = s[::-1]\r\n\r\n # compare\r\n if rev == s:\r\n return True ___ False\r\n\r\nif isPalindrome(\"racecar\"):\r\n print('String is a palindrome')\r\nelse:\r\n print('String is not a palindrome')",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 412,
            "material": "Data Type",
            "instruction": "Write a python function which will check if input string is palindrome or not.",
            "question": "def is_palindrome(input_string):\r\n    if input_string == input_string[::-1]:\r\n        return True ___:\r\n        return False\r\n    \r\ninput_string = \"racecar\"\r\n\r\ncheck_palindrome = is_palindrome(input_string)\r\n\r\nif check_palindrome == True:\r\n    print(\"Input string is a palindrome\")\r\nelse:\r\n    print(\"Input string is NOT a palindrome\")",
            "correct_answer": "else",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 602,
            "material": "Data Type",
            "instruction": "Create a Python program to convert a list of characters into a string",
            "question": "def list_to_str(arr):\r\n    str = \"\"\r\n    for i in arr:\r\n        str += i\r\n    return str ___ = ['a', 'b', 'c']\r\n  \r\nresult = list_to_str(arr) \r\nprint(result)",
            "correct_answer": "arr",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 632,
            "material": "Data Type",
            "instruction": "Create a Python script to validate a JSON string.",
            "question": "import json\r\n\r\ndef validate_json_string(s):\r\n    try:\r\n        json_obj = json.loads(s)\r\n        return True ___ json.JSONDecodeError:\r\n        return False",
            "correct_answer": "except",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 664,
            "material": "Data Type",
            "instruction": "Write a function in Python that takes a given string and checks if it is a palindrome or not.",
            "question": "def isPalindrome(s):\r\n    left = 0 \r\n    right = len(s)-1 \r\n      \r\n    while(left < right ): \r\n        if (s[left] != s[right]): \r\n            return False ___ += 1\r\n        right -= 1\r\n    return True\r\n  \r\nprint (isPalindrome(\"racecar\"))",
            "correct_answer": "left",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 850,
            "material": "Data Type",
            "instruction": "Create a Python program to check if a given string can be formed from a given set of words.",
            "question": "def word_set(string, words):\r\n    words_set = set(words)\r\n    string_set = set(string)\r\n    \r\n    if string_set.issubset(words_set):\r\n        return True ___:\r\n        return False\r\n\r\nword_set(\"justdoit\", [\"just\", \"do\", \"it\"])",
            "correct_answer": "else",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 862,
            "material": "Data Type",
            "instruction": "Create a program in Python that has the following purpose: To determine if a given string is a palindrome",
            "question": "def check_palindrome(inputStr): \r\n     \r\n    revStr = reversed(inputStr)\r\n  \r\n    if list(inputStr) == list(revStr): \r\n        return True ___: \r\n        return False\r\n      \r\nuserInput = \"radar\"\r\n\r\nif(check_palindrome(userInput)): \r\n    print(\"Yes\") \r\nelse: \r\n    print(\"No\")",
            "correct_answer": "else",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 944,
            "material": "Data Type",
            "instruction": "Generate a Python program to search for a specific string in a list.",
            "question": "def search_string(lst, str):\r\n    for item in lst:\r\n        if item == str:\r\n            return True ___ False\r\n\r\nlst = [\"hello\", \"world\", \"this\", \"is\", \"a\", \"test\"]\r\nstr = \"test\"\r\nprint(search_string(lst, str))",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 957,
            "material": "Data Type",
            "instruction": "Design a program in Python that accepts a string as input and checks whether or not it is palindrome.",
            "question": "def isPalindrome(str): \r\n    for i in range(0, int(len(str)/2)):  \r\n        if str[i] != str[len(str)-i-1]: \r\n            return False ___ True\r\n\r\ninputStr = 'madam'\r\n\r\nif (isPalindrome(inputStr)): \r\n    print(\"Yes\")\r\nelse: \r\n    print(\"No\")",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 980,
            "material": "Data Type",
            "instruction": "Create a python function that takes a string of characters as input and checks if it is a valid identifier.",
            "question": "import string\r\n\r\ndef isValidIdentifier(name):\r\n    validChar = string.ascii_letters + \"_\"\r\n    if name[0] not in string.ascii_letters:\r\n        return False ___ char in name[1:]:\r\n        if char not in validChar:\r\n            return False\r\n            \r\n    return True\r\n\r\nvalidResult = isValidIdentifier(name)\r\nprint(validResult)",
            "correct_answer": "for",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1026,
            "material": "Data Type",
            "instruction": "Develop a program in Python to check whether a string contains only digits.",
            "question": "def is_digit_only(string):\r\n    for char in string:\r\n        if not char.isdigit():\r\n            return False ___ True\r\n\r\nprint(is_digit_only(\"0123\"))",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1158,
            "material": "Data Type",
            "instruction": "Develop an algorithm to check if a string S is a palindrome in Python.",
            "question": "def is_palindrome(s):\r\n    # Convert strings to lowercase\r\n    s = s.lower()\r\n \r\n    # Iterate through middle of string with indices \r\n    for i in range(len(s) // 2):\r\n        if s[i] != s[len(s) - i - 1]:\r\n            return False ___ True",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1237,
            "material": "Data Type",
            "instruction": "Write a function in Python to search a string for a specific pattern.",
            "question": "def search_for_pattern(s, pattern):\r\n    if pattern in s:\r\n        return True ___:\r\n        return False\r\n\r\nresult = search_for_pattern(\"abcxyzabc\", \"abc\")\r\nprint(result)",
            "correct_answer": "else",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1326,
            "material": "Data Type",
            "instruction": "Filter a string in Python by removing all alphabets and keeping only the numbers.",
            "question": "def filter_string(str):\r\n    str = ''.join(x for x in str ___ x.isdigit())\r\n    return str  \r\n\r\nmy_string = \"hey3this5is4my2string1\"\r\nprint(filter_string(my_string))",
            "correct_answer": "if",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1523,
            "material": "Data Type",
            "instruction": "Implement a method in Python that takes two strings as input and returns true if one string is a rotation of the other.",
            "question": "def isRotation(s1, s2): \r\n    if (len(s1) != len(s2)): \r\n        return False ___ = s1 + s1 \r\n    if (s2 in temp): \r\n        return True\r\n    return False\r\n\r\nresult = isRotation('abc', 'cab')\r\nprint(result)",
            "correct_answer": "temp",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1630,
            "material": "Data Type",
            "instruction": "Generate a Python program to search for a substring within a string.",
            "question": "def search_substring(text, substring):\r\n    if substring in text:\r\n        return True ___:\r\n        return False\r\n\r\nresult = search_substring(text, substring)\r\nprint(result)",
            "correct_answer": "else",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1657,
            "material": "Data Type",
            "instruction": "Write a Python program to check if a provided string is valid JSON.",
            "question": "def is_valid_json(s):\r\n    valid = True ___:\r\n        json.loads(s)\r\n    except ValueError:\r\n        valid = False\r\n    return valid",
            "correct_answer": "try",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1678,
            "material": "Data Type",
            "instruction": "Create a Python function that takes in a string and a list of words and returns true if the string contains all the words in the list.",
            "question": "def contains_words(input_string, words):\r\n for word in words:\r\n if word not in input_string:\r\n return False ___ True\r\n\r\nprint(contains_words('This is a test', ['test', 'this', 'is'])) # True",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1761,
            "material": "Data Type",
            "instruction": "Create a Python program to check if a given string has duplicates characters.",
            "question": "def hasDuplicates(s):\r\n    set = set()\r\n    for ch in s:\r\n        if ch in set:\r\n            return True ___.add(ch)\r\n    return False",
            "correct_answer": "set",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1916,
            "material": "Data Type",
            "instruction": "Design a Python program to determine if one string is a substring of another.",
            "question": "def isSubstring(str1, str2):\r\n    if len(str1) > len(str2):\r\n        return False ___ i in range(len(str2)):\r\n        if (str2[i: i+len(str1)] == str1):\r\n            return True\r\n\r\n    return False\r\n\r\nstr1 = \"Hello\"\r\nstr2 = \"Hello World\"\r\n\r\nprint(isSubstring(str1, str2))",
            "correct_answer": "for",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2052,
            "material": "Data Type",
            "instruction": "Write a Python program to evaluate a given string and return a Boolean value.",
            "question": "def evaluate_string(string):\r\n if string == 'The sky is blue':\r\n  return True ___:\r\n  return False",
            "correct_answer": "else",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2194,
            "material": "Data Type",
            "instruction": "Generate a Python function that takes a string as input and returns True if the string contains a capital letter, otherwise False.",
            "question": "def has_capital_letter(input_string):\r\n    for character in input_string:\r\n        if character.isupper():\r\n            return True ___ False",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2239,
            "material": "Data Type",
            "instruction": "Generate a correct python program to identify a particular character in a string.",
            "question": "def char_in_string(char, string):\r\n    for c in string:\r\n        if c == char:\r\n            return True ___ False",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2243,
            "material": "Data Type",
            "instruction": "Create a function in Python to determine whether a given string contains any whitespace character.",
            "question": "def hasWhitespace(string):\r\n for c in string:\r\n  if c.isspace():\r\n   return True ___ False\r\n\r\nprint(hasWhitespace(\"Hello World\"))",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2312,
            "material": "Data Type",
            "instruction": "Create a Python script to detect if a certain item is in a given list of items. The script should work for any type of item.",
            "question": "def detect_item(items, item):\r\n  if item in items:\r\n    return True ___:\r\n    return False",
            "correct_answer": "else",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2559,
            "material": "Data Type",
            "instruction": "Create a python function to check if a given string contains a specific substring. The function should loop through the string and find the substring, and return a boolean value indicating if the substring was found or not.",
            "question": "def checkIfStringContainsSubstring(myString, substring):\r\n  for i in range(len(myString) - len(substring) + 1):\r\n    if myString[i:i+len(substring)] == substring:\r\n      return True ___ False",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2690,
            "material": "Data Type",
            "instruction": "Write a Python script to check if the given string is a palindrome.",
            "question": "def is_palindrome(string_to_test):\r\n    reverse = reversed(string_to_test)\r\n    if list(string_to_test) == list(reverse):\r\n        return True ___ False",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2695,
            "material": "Data Type",
            "instruction": "Write a Python program to check if a given string is a rotation of another given string.",
            "question": "def is_rotation(str1, str2):\r\n if len(str1) != len(str2):\r\n  return False ___ = str2 * 2\r\n \r\n return str1 in concat_str2\r\n \r\nis_rotation(str1, str2)",
            "correct_answer": "concat_str2",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2958,
            "material": "Data Type",
            "instruction": "Identify the data type of the following input and provide a code to convert it to an integer in Python.",
            "question": "input_type = type(\"123\") # str ___ = int(\"123\") # 123",
            "correct_answer": "converted_int",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2996,
            "material": "Data Type",
            "instruction": "Build a function in Python to test whether a string is a palindrome.",
            "question": "def is_palindrome(s): \r\n    # Reverse the string \r\n    rev = s[::-1] \r\n  \r\n    # Check if the string is equal to its reverse \r\n    if (s == rev): \r\n        return True ___ False\r\n  \r\n# Driver code \r\ns = \"aba\"\r\nans = is_palindrome(s) \r\n  \r\nif ans == 1: \r\n    print(\"Yes\") \r\nelse: \r\n    print(\"No\")",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3037,
            "material": "Data Type",
            "instruction": "Come up with an algorithm in Python that takes two strings as input and checks whether one string is a rotation of another.",
            "question": "def is_rotation(s1, s2):\r\n    if len(s1) != len(s2):\r\n        return False ___ = s1 + s1\r\n    if s2 in s1s1:\r\n        return True\r\n    return False\r\n\r\nprint(is_rotation(\"ABACD\", \"CDABA\"))",
            "correct_answer": "s1s1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3058,
            "material": "Data Type",
            "instruction": "Create a solution that detects the presence of a character in a string.",
            "question": "def detect_character(string, char):\r\n    for ch in string:\r\n        if ch == char:\r\n            return True ___ False\r\n\r\nstring = 'Python'\r\nchar = 'y'\r\nprint(detect_character(string, char))",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3084,
            "material": "Data Type",
            "instruction": "Create a Python function to search for a substring in a string. The function should take two arguments, the haystack string and the needle string, and should return a boolean indicating whether the substring was found or not.",
            "question": "def contains_substring(haystack, needle): \r\n return needle in haystack\r\n\r\n# Usage example\r\ncontains_substring(\"This is a string\", \"is\") # returns True ___(\"This is a string\", \"xyz\") # returns False",
            "correct_answer": "contains_substring",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3156,
            "material": "Data Type",
            "instruction": "Given two strings, write a python function to check whether one string is a substring of another.",
            "question": "def is_substring(string1, string2): \r\n    if string1 in string2:\r\n        return True ___:\r\n        return False",
            "correct_answer": "else",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3269,
            "material": "Data Type",
            "instruction": "Generate a Python program to implement the following feature: Search a phrase in a given string.",
            "question": "def search(phrase, string):\r\n  if phrase in string:\r\n     return True ___:\r\n     return False \r\n\r\nresult = search(\"to be or not to be\", \"Whether 'tis nobler in the mind to suffer\")\r\nprint(result)",
            "correct_answer": "else",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3406,
            "material": "Data Type",
            "instruction": "Create a function in Python that can tell if a string is a palindrome or not.",
            "question": "def is_palindrome(word):\r\n    reversed_word = word[::-1]\r\n\r\n    if word == reversed_word:\r\n        return True ___:\r\n        return False\r\n        \r\nresult = is_palindrome('civic')\r\nprint(result)",
            "correct_answer": "else",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3488,
            "material": "Data Type",
            "instruction": "Provide a type definition for the following class in Python.",
            "question": "from typing import NamedTuple\r\n\r\nclass Student(NamedTuple):\r\n    name: str ___: int",
            "correct_answer": "age",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3541,
            "material": "Data Type",
            "instruction": "Write a Python function that takes two strings as arguments and returns true if the second string could be obtained by rotating the first string.",
            "question": "def is_rotation(str1, str2):\r\n    if len(str1) == len(str2) and len(str1) > 0:\r\n        return (str1 + str1).find(str2) != -1\r\n    return False ___('waterbottle', 'erbottlewat')",
            "correct_answer": "is_rotation",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3563,
            "material": "Data Type",
            "instruction": "Generate an algorithm in Python that given a string of words, should check if it is a Palindrome.",
            "question": "def isPalindrome(s):\r\n s = s.lower()\r\n \r\n left = 0\r\n right = len(s) - 1\r\n \r\n while left < right:\r\n if s[left] != s[right]:\r\n return False ___ += 1\r\n right -= 1\r\n \r\n return True\r\n\r\ns = 'racecar'\r\nisPalindrome = isPalindrome(s)\r\n\r\nprint(isPalindrome) # Output: True",
            "correct_answer": "left",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3657,
            "material": "Data Type",
            "instruction": "Create a Python program to write a string in Reverse order",
            "question": "def reverse_string(input_string): \r\n    str = \"\" \r\n    for i in input_string: \r\n        str = i + str ___ str\r\n  \r\nif __name__ == \"__main__\": \r\n    input_string = \"This is a Test string\"\r\n    print(reverse_string(input_string))",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3706,
            "material": "Data Type",
            "instruction": "Create a Python program to check for anagrams of a string.",
            "question": "def anagramCheck(str1, str2):\r\n    if (len(str1) != len(str2)):\r\n        return False ___ = sorted(str1)\r\n    str2 = sorted (str2)\r\n\r\n    # Compare each character in str1 with\r\n    # each character in str2\r\n    for i in range( len( str1 ) ):\r\n        if (str1[i] != str2[i]):\r\n            return False\r\n \r\n    return True",
            "correct_answer": "str1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3824,
            "material": "Data Type",
            "instruction": "Create an algorithm to detect a palindrome string in Python.",
            "question": "def isPalindrome(str):\r\n  left, right = 0, len(str) - 1\r\n  while right >= left:\r\n    if not str[left] == str[right]:\r\n      return False ___ += 1\r\n    right -= 1\r\n  return True",
            "correct_answer": "left",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3968,
            "material": "Data Type",
            "instruction": "Write a python program to check if a given string contains all alphabetic characters.",
            "question": "def is_alpha(word): \r\n    if word.isalpha(): \r\n        return True ___: \r\n        return False",
            "correct_answer": "else",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4035,
            "material": "Data Type",
            "instruction": "Write a Python function that takes a string as input and returns true if the string starts with the letter \"a\".",
            "question": "def starts_with_a(string):\r\n    if string[0] == 'a':\r\n        return True ___:\r\n        return False\r\n\r\nresult = starts_with_a('awesome')\r\nprint(result)",
            "correct_answer": "else",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4121,
            "material": "Data Type",
            "instruction": "Generate a Python function that checks to see if a given string is a palindrome.",
            "question": "def is_palindrome(str):\r\n    reversed_str = \"\"\r\n    for i in range(len(str) - 1, -1, -1): \r\n        reversed_str += str[i]\r\n\r\n    if str == reversed_str: \r\n        return True ___: \r\n        return False\r\n\r\nstring = \"madam\"\r\nresult = is_palindrome(string)\r\nprint(result)",
            "correct_answer": "else",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4156,
            "material": "Data Type",
            "instruction": "Write a Python program that determines whether the given string is a palindrome.",
            "question": "def is_palindrome(string):\r\n  if len(string) <= 1:\r\n    return True ___:\r\n    letter_1 = string[0]\r\n    letter_2 = string[-1]\r\n    if letter_1 != letter_2:\r\n      return False\r\n    else:\r\n      new_word = string[1:-1]\r\n      return is_palindrome(new_word)",
            "correct_answer": "else",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4189,
            "material": "Data Type",
            "instruction": "Can you design a function in Python which takes two string arguments and checks that two strings are anagrams or not?",
            "question": "def is_anagram(str1, str2):\r\n    if (len(str1) != len(str2)):\r\n        return False ___ = sorted(list(str1)) \r\n    list2 = sorted(list(str2)) \r\n  \r\n    for i in range(0, len(str1)): \r\n        if (list1[i] != list2[i]): \r\n            return False\r\n  \r\n    return True",
            "correct_answer": "list1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4330,
            "material": "Data Type",
            "instruction": "Take an input string and write a python program to determine if it is a palindrome.",
            "question": "def isPalindrome(s):\r\n left, right = 0, len(s) - 1\r\n while left < right:\r\n if s[left] != s[right]:\r\n return False ___ += 1\r\n right -= 1\r\n return True\r\n\r\ns = \"racecar\"\r\nprint(isPalindrome(s))  # True",
            "correct_answer": "left",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4348,
            "material": "Data Type",
            "instruction": "Create a Python program to find out if a string contains any characters from another given string.",
            "question": "def contains_chars(str1, str2):\r\n if any([c in str1 for c in str2]):\r\n return True ___ False\r\n\r\nstring1 = \"Hello\"\r\nstring2 = \"eo\"\r\n\r\nprint(contains_chars(string1, string2)) // Outputs: True",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4393,
            "material": "Data Type",
            "instruction": "Design an algorithm in Python to detect an anagram in a string.",
            "question": "def isAnagram(string):\r\n    for i in range(len(string)):\r\n        for j in range(i + 1, len(string)):\r\n            if sorted(string[i]) == sorted(string[j]):\r\n                return True ___ False",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4394,
            "material": "Data Type",
            "instruction": "Design a Python function to replace all occurrences of \u2018x\u2019 in a string with \u2018y\u2019.",
            "question": "def replaceXWithY(str, x, y):\r\n    while x in str:\r\n        str = str.replace(x, y)\r\n    return str ___ = replaceXWithY(\"xx123xx456xx\", \"x\", \"y\")\r\nprint(result)",
            "correct_answer": "result",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4423,
            "material": "Data Type",
            "instruction": "Given the following code snippet, create a function in Python that takes two strings and returns true if one string is a substring of the other.",
            "question": "def is_substring(s1, s2):\r\n # check for empty strings \r\n if s1 == '' or s2 == '':\r\n return False\r\n \r\n # check if s2 is a substring of s1\r\n if s1.find(s2) > -1:\r\n return True ___ False",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4437,
            "material": "Data Type",
            "instruction": "Detect the data type of a given string in Python.",
            "question": "str ___",
            "correct_answer": "type",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4614,
            "material": "Data Type",
            "instruction": "Create a python program to test if a given string is a palindrome",
            "question": "def is_palindrome(str):\r\n    for i in range(len(str) // 2):\r\n        if str[i] != str[-i - 1]:\r\n            return False ___ True\r\n\r\n# Test\r\nresult = is_palindrome(\"level\")\r\nprint(result) # Output: True",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4658,
            "material": "Data Type",
            "instruction": "Write a Python function to check if a given string is an anagram or not.",
            "question": "def is_anagram(str1, str2): \r\n    if len(str1) != len(str2): \r\n        return False ___ = sorted(str1.lower()) \r\n    str2 = sorted(str2.lower()) \r\n    return str1 == str2",
            "correct_answer": "str1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4686,
            "material": "Data Type",
            "instruction": "Create a function in Python that takes an input string and returns whether it is a palindrome.",
            "question": "def isPalindrome(txt):\r\n    i = 0\r\n    j = len(txt) - 1\r\n    \r\n    while i < j:\r\n        if txt[i] != txt[j]:\r\n            return False ___ += 1\r\n        j -= 1\r\n    \r\n    return True\r\n\r\nprint(isPalindrome(txt)) // True",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4770,
            "material": "Data Type",
            "instruction": "Implement a Python function that will take two strings and return true if the first string contains the second.",
            "question": "def check_contains(query, word): \r\n    if query.find(word) != -1:\r\n        return True ___ False\r\n\r\nresult = check_contains(query, word)",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4939,
            "material": "Data Type",
            "instruction": "Optimize the following python code to search for a substring in a given string.",
            "question": "def containsSubstring(str, sub):\r\n    for i in range(len(str)-len(sub)+1):\r\n        j = 0\r\n        while j < len(sub) and sub[j] == str[i+j]:\r\n            j += 1\r\n        if j == len(sub):\r\n            return True ___ False",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4957,
            "material": "Data Type",
            "instruction": "Write a function in Python to check whether a given string is in lower case or not.",
            "question": "def is_lowercase(string):\r\n    for character in string:\r\n        if character != character.lower():\r\n            return False ___ True",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5095,
            "material": "Data Type",
            "instruction": "Create a function in Python to convert a hexadecimal string (e.g. \"0xBA\") to a binary string (e.g. \"10111010\").",
            "question": "def hex_to_binary(hex_str):\r\n    # convert hex to int ___ = int(hex_str, 16)\r\n    # convert int to binary string\r\n    bin_str = bin(num)[2:]\r\n    \r\n    return bin_str\r\n\r\nprint(hex_to_binary(\"0xA2\"))\r\n# Output: \"10100010\"",
            "correct_answer": "num",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5356,
            "material": "Data Type",
            "instruction": "Write a Python function that takes a string, checks if it is a palindrome and returns true or false.",
            "question": "def is_palindrome(string):\r\n    rev_string = string[::-1]\r\n    if string == rev_string:\r\n        return True ___:\r\n        return False \r\n\r\nprint(is_palindrome(\"level\"))",
            "correct_answer": "else",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5504,
            "material": "Data Type",
            "instruction": "Create a python script to identify if a given string is a valid IPv4 address or not.",
            "question": "def is_valid_ipv4(ip):\r\n    parts = ip.split('.')\r\n    if len(parts) != 4:\r\n        return False ___ part in parts:\r\n        if not part.isdigit():\r\n            return False\r\n        if int(part) < 0 or int(part) > 255:\r\n            return False\r\n    return True\r\n\r\nprint(is_valid_ipv4('192.168.25.688'))\r\n\r\nOutput: False",
            "correct_answer": "for",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5603,
            "material": "Data Type",
            "instruction": "Using a dictionary, write a program in Python to categorize each list item into a group of the same type.",
            "question": "def categorize(items):\r\n    groups = {\r\n        'numbers': [],\r\n        'strings': []\r\n    }\r\n    for item in items:\r\n        if type(item) == int ___ type(item) == float:\r\n            groups['numbers'].append(item)\r\n        else:\r\n            groups['strings'].append(item)\r\n    return groups",
            "correct_answer": "or",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5613,
            "material": "Data Type",
            "instruction": "Make a program to search for a given string in a list of strings.",
            "question": "def search_string(search_string, list_of_strings):\r\n    for string in list_of_strings:\r\n        if string == search_string:\r\n            return True ___ False\r\n\r\nresult = search_string('python', ['java', 'javascript', 'python', 'ruby']) \r\nprint(result)",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5670,
            "material": "Data Type",
            "instruction": "Use Python to check whether a given string is a palindrome (e.g. \"abccba\" is a palindrome).",
            "question": "def isPalindrome(string):\r\n if string == string[::-1]: # Check if string is the same backwards\r\nreturn True ___:\r\n return False\r\n\r\nisPalindrome('abcba') # Output: True",
            "correct_answer": "else",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5686,
            "material": "Data Type",
            "instruction": "Write a Python function to check if a given substring is contained in a string.",
            "question": "def check_substring(String, SubString):\r\n    if SubString in String : \r\n        return True ___: \r\n        return False",
            "correct_answer": "else",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6110,
            "material": "Data Type",
            "instruction": "Generate code to identify the type of data stored in a given variable in Python.",
            "question": "# Identify the type ___ data stored in given variable\r\n\r\ndef identify_data_type(val):\r\n    for item in val:\r\n        data_type = type(item).__name__\r\n        print(f\"Data type of {item} is {data_type}\")\r\n\r\nval1 = [\"Hello\", 10, 3.14] \r\nidentify_data_type(val1)\r\n\r\n# Output\r\n# Data type of Hello is str\r\n# Data type of 10 is int\r\n# Data type of 3.14 is float",
            "correct_answer": "of",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6200,
            "material": "Data Type",
            "instruction": "Write a function in Python to search for a character in a given string.",
            "question": "def serach_char(input_str, char):\r\n  for char in input_str:\r\n    if char == input_char:\r\n      return True ___ False",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6240,
            "material": "Data Type",
            "instruction": "Create a Python script that checks whether a given string is a palindrome.",
            "question": "def isPalindrome(str): \r\n    # Run loop from 0 to len/2 \r\n    for i in range(0, len(str)//2): \r\n        if str[i] != str[len(str)-i-1]: \r\n            return False ___ True\r\n  \r\n# main\r\nmyStr = \"malayalam\"\r\n\r\nans = isPalindrome(myStr) \r\n  \r\nif ans: \r\n    print(\"The given string is a palindrome\") \r\nelse: \r\n    print(\"The given string isn't a palindrome\")",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6413,
            "material": "Data Type",
            "instruction": "Create a python code to check if all characters are unique in a given string",
            "question": "def is_unique(string):\r\n    chars = set()\r\n    for char in string:\r\n        if char in chars:\r\n            return False ___:\r\n            chars.add(char)\r\n    return True\r\n\r\nprint(is_unique(string))",
            "correct_answer": "else",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6504,
            "material": "Data Type",
            "instruction": "Generate a python program to check if the string is a palindrome or not.",
            "question": "def is_palindrom(string):\r\n    reverse_string = string[::-1]\r\n    if string == reverse_string:\r\n        return True ___:\r\n        return False",
            "correct_answer": "else",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6550,
            "material": "Data Type",
            "instruction": "Write a Python program to detect if a given string contains any of the given keywords.",
            "question": "def keyword_detector(string, keywords):\r\n for i in keywords:\r\n if i in string:\r\n return True ___ False\r\n\r\nprint(keyword_detector(\"I love ice cream\", [\"chocolate\", \"vanilla\"]))",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6551,
            "material": "Data Type",
            "instruction": "Create an algorithm in Python to check if a given string contains valid parentheses.",
            "question": "def isValid(s):\r\n    stack = []\r\n    dict = {\"]\":\"[\", \"}\":\"{\", \")\":\"(\"}\r\n    for char in s:\r\n        if char in dict.values():\r\n            stack.append(char)\r\n        elif char in dict.keys():\r\n            if stack == [] or dict[char] != stack.pop():\r\n                return False ___:\r\n            return False\r\n    return stack == []\r\n\r\nprint(isValid('[[{{}}]]'))",
            "correct_answer": "else",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6596,
            "material": "Data Type",
            "instruction": "Create a Python program that takes a string and indicates whether it is a palindrome or not.",
            "question": "def is_palindrome(s):\r\n  s = s.lower()\r\n  left = 0\r\n  right = len(s) - 1\r\n  \r\n  while left < right:\r\n    if s[left] != s[right]:\r\n      return False ___ += 1\r\n    right -= 1\r\n  return True\r\n  \r\nprint(is_palindrome(\"racecar\"))",
            "correct_answer": "left",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6727,
            "material": "Data Type",
            "instruction": "Please construct a function in Python that constructs and returns a dictionary containing all unique characters in a given string.",
            "question": "def unique_characters(string):\r\n    unique_chars = {}\r\n    for char in string:\r\n        if char in unique_chars:\r\n            continue\r\n        else:\r\n            unique_chars[char] = True ___ unique_chars\r\n\r\nresult = unique_characters('missisippi')\r\nprint(result) # Output: {'m': True, 'i': True, 's': True, 'p': True}",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6789,
            "material": "Data Type",
            "instruction": "Create a Python function that takes two strings and checks if the second string is a substring of the first.",
            "question": "def check_substring(string1, string2):\r\n    if string2 in string1:\r\n        return True ___:\r\n        return False\r\n\r\n# example\r\nresult = check_substring(\"Hello world!\", \"world\")\r\nprint(result)",
            "correct_answer": "else",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6986,
            "material": "Data Type",
            "instruction": "Create a program to detect a palindrome string in Python.",
            "question": "# Function to check if a string is a palindrome\r\ndef is_palindrome(original_string):  \r\n    reversed_string = original_string[::-1]  \r\n    if original_string == reversed_string:\r\n        return True ___:\r\n        return False  \r\n  \r\n# Print result\r\nprint(is_palindrome(original_string))",
            "correct_answer": "else",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7154,
            "material": "Data Type",
            "instruction": "Write a Python program to accept user input as a string and check if the user input is a palindrome (a word, phrase, or sequence that reads the same backward as forward).",
            "question": "input_word = input(\"Enter a word: \")\r\n\r\ndef is_palindrome(word):\r\n word = word.lower()\r\n reversed_word = word[::-1]\r\n\r\n if reversed_word == word:\r\n return True ___:\r\n return False\r\n\r\nprint(is_palindrome(input_word))\r\n# Output: True",
            "correct_answer": "else",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7285,
            "material": "Data Type",
            "instruction": "Design a program in Python that takes a string as an input and checks whether all the vowels are present in the string or not.",
            "question": "def check_vowels(string):\r\n    vowels = ['a','e','i','o','u']\r\n    for vowel in vowels:\r\n        if vowel not in string:\r\n            return False ___ True\r\n\r\nprint(check_vowels('This is a test'))",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7316,
            "material": "Data Type",
            "instruction": "Identify the type of an expression in Python.",
            "question": "The expression x is of type ___.",
            "correct_answer": "string",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7432,
            "material": "Data Type",
            "instruction": "Develop a Python algorithm to validate a given palindrome string.",
            "question": "def isPalindrome(s):\r\n    i = 0\r\n    j = len(s) - 1\r\n    while i < j:\r\n        if s[i] != s[j]:\r\n            return False ___ += 1\r\n        j -= 1\r\n    return True\r\n  \r\n# Driver code \r\ns = \"level\"\r\n  \r\nif isPalindrome(s):\r\n    print(\"Yes\")\r\nelse:\r\n    print(\"No\")",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7503,
            "material": "Data Type",
            "instruction": "Build an algorithm in Python to check if a string is a palindrome.",
            "question": "def is_palindrome(str):\r\n    # Get the length of the string\r\n    n = len(str)\r\n\r\n    for i in range(n//2):\r\n        # Compare characters from both ends\r\n        if str[i] != str[n-i-1]:\r\n            return False ___ True\r\n\r\nstr = \"abccba\"\r\nprint(is_palindrome(str))",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "20"
        }
    ]
}