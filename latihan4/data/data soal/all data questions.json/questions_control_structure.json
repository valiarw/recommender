{
    "quiz": [
        {
            "question_id": 32,
            "material": "Control Structure",
            "instruction": "Write a python program to check if two sequences are identical.",
            "question": "def check_seq(seq1, seq2):\r\n    if ___ (seq1) != len (seq2): \r\n        return False\r\n    else: \r\n        for i in range(len (seq1)):\r\n            if seq1[i] != seq2[i]:\r\n                return False\r\n    return True",
            "correct_answer": "len",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 47,
            "material": "Control Structure",
            "instruction": "Write a Python program to take user input and check if it is a palindrome or not.",
            "question": "def isPalindrome(inp):\r\n inp = inp.lower()\r\n return inp == inp[::-1]\r\n\r\nuser_input = input('Enter string: ')\r\nif ___(user_input):\r\n print('It\\'s a palindrome')\r\nelse:\r\n print('It\\'s not a palindrome')",
            "correct_answer": "isPalindrome",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 63,
            "material": "Control Structure",
            "instruction": "Write a Python script that uses recursion to calculate the Fibonacci sequence for a given number of terms.",
            "question": "def Fibonacci(n): \r\n   if ___<0: \r\n      print(\"Incorrect input\") \r\n   elif n==1: \r\n      return 0\r\n   elif n==2: \r\n      return 1\r\n   else: \r\n      return Fibonacci(n-1)+Fibonacci(n-2) \r\n \r\n# Driver Program \r\nn = 6\r\nprint(Fibonacci(n))",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 77,
            "material": "Control Structure",
            "instruction": "Create an API wrapper in Python for the following API",
            "question": "import requests \r\n\r\n# API wrapper for ___ given API \r\ndef api_wrapper(url): \r\n    # get the API response \r\n    response = requests.get(url) \r\n\r\n    # check the response status \r\n    if(response.status_code == 200): \r\n        # return json data \r\n        return response.json()\r\n    else: \r\n        return None",
            "correct_answer": "the",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 94,
            "material": "Control Structure",
            "instruction": "Design a function in Python to determine if a given number is prime.",
            "question": "def is_prime(n):\r\n    if ___ <= 1: \r\n        return False\r\n    if n == 2: \r\n        return True\r\n    if n > 2 and n % 2 == 0: \r\n        return False\r\n\r\n    sqrt_n = int(n**0.5)\r\n    for i in range(3, sqrt_n+1, 2):\r\n        if n % i == 0:\r\n            return False\r\n    return True\r\n\r\nif is_prime(37):\r\n    print('37 is a prime number!')",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 134,
            "material": "Control Structure",
            "instruction": "Construct a python program to check if two given strings are anagrams.",
            "question": "def isAnagram(str1, str2):  \r\n    n1 = len(str1)\r\n    n2 = len(str2) \r\n    if ___ != n2: \r\n        return False\r\n    str1 = ''.join(sorted(str1)) \r\n    str2 = ''.join(sorted(str2))  \r\n    for i in range(n1):  \r\n        if str1[i] != str2[i]:  \r\n            return False\r\n    return True",
            "correct_answer": "n1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 141,
            "material": "Control Structure",
            "instruction": "Create a Python program that reads an integer from the console and prints \"true\" if the number is even, and \"false\" if the number is odd.",
            "question": "num = int(input())\r\nif ___ % 2 == 0:\r\n    print(\"true\")\r\nelse:\r\n    print(\"false\")",
            "correct_answer": "num",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 143,
            "material": "Control Structure",
            "instruction": "Design a function for ordering a pizza in Python and use it to order a pizza with 3 toppings.",
            "question": "def orderPizza(toppings):\r\n    print(\"Ordering a pizza with the following toppings:\")\r\n    for ___ in toppings:\r\n      print(topping)\r\n    print(\"Thank you!\")\r\norderPizza([\"Pepperoni\", \"Mushroom\", \"Olives\"])",
            "correct_answer": "topping",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 164,
            "material": "Control Structure",
            "instruction": "Design a Python program for verifying the two strings are rotations of each other?",
            "question": "def check_rotation(str1, str2): \r\n\tif ___(str1) != len(str2): \r\n\t\treturn False\r\n\ttemp = str1 + str1\r\n\treturn (str2 in temp) \r\n\r\ns1 = \"Hello World\"\r\ns2 = \"World Hello\"\r\nif check_rotation(s1, s2): \r\n\tprint('These strings are rotations of each other'); \r\nelse: \r\n\tprint('These strings are not rotations of each other')",
            "correct_answer": "len",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 182,
            "material": "Control Structure",
            "instruction": "Create a method in Python that takes two arguments and returns a specified error message if one of the two conditions is not met.",
            "question": "def check_input(arg1, arg2):\r\n   if ___(arg1) is not int or type(arg2) is not int:\r\n      return \"The input must be a number!\"\r\n   else:\r\n      return \"The input is valid!\"",
            "correct_answer": "type",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 186,
            "material": "Control Structure",
            "instruction": "Create a program in Python to check for duplicate words in a given sentence.",
            "question": "sentence = \"I am going to the store to buy food\"\r\n\r\nwords = sentence.split(' ')\r\n\r\n#Table to keep track of duplicates\r\ntable = []\r\n\r\nfor ___ in words:\r\n if word in table:\r\n print(\"Duplicate word found: \"+word)\r\n else:\r\n table.append(word)",
            "correct_answer": "word",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 221,
            "material": "Control Structure",
            "instruction": "Generate the following sequence using a while loop in Python.",
            "question": "a, b = 0, 1\r\nwhile ___ < 100:\r\n    print(a)\r\n    a, b = b, a + b",
            "correct_answer": "b",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 250,
            "material": "Control Structure",
            "instruction": "Edit the Python program below to add an if condition to determine if an input number is odd or even.",
            "question": "def odd_or_even(number):\r\n    # your code here\r\n    if ___ % 2 == 0:\r\n        return \"even\"\r\n    else:\r\n        return \"odd\"",
            "correct_answer": "number",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 269,
            "material": "Control Structure",
            "instruction": "Create a python program that detects if a number is even or odd.",
            "question": "def is_even_odd(num):\r\n    if ___ % 2 == 0:\r\n        return \"Even\"\r\n    else:\r\n        return \"Odd\"\r\n\r\nresult = is_even_odd(7)\r\nprint(result)",
            "correct_answer": "num",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 310,
            "material": "Control Structure",
            "instruction": "Design a program to find the nth term of the Fibonacci sequence for a given number n.",
            "question": "# Python 3 program to find the nth\r\n# Fibonacci number\r\ndef Fibonacci(n):\r\n    if ___<0:\r\n        print(\"Incorrect input\")\r\n    # First Fibonacci number is 0\r\n    elif n==1:\r\n        return 0\r\n    # Second Fibonacci number is 1\r\n    elif n==2:\r\n        return 1\r\n    else:\r\n        return Fibonacci(n-1)+Fibonacci(n-2)\r\n \r\n# Driver Program\r\nprint(Fibonacci(10))\r\n\r\n# Output\r\n34",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 366,
            "material": "Control Structure",
            "instruction": "Create a Python program to grade a multiple choice test with 4 options for each question, and each correct answer is worth 3 points.",
            "question": "def grade_test(questions):\r\n    score = 0\r\n    for ___ in questions:\r\n        if question['answer'] == question['correct_answer']:\r\n            score += 3\r\n    return score",
            "correct_answer": "question",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 382,
            "material": "Control Structure",
            "instruction": "Optimize the following python code for a more efficient solution.",
            "question": "def to_square(nums):\r\n    squares = [num * num for ___ in nums]\r\n    return squares",
            "correct_answer": "num",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 429,
            "material": "Control Structure",
            "instruction": "Develop a Python program to detect if an entered number is even or odd.",
            "question": "even_or_odd = int(input(\"Please enter a number: \"))\r\nif ___ % 2 == 0:\r\n  print(\"The number is Even.\")\r\nelse:\r\n  print(\"The number is Odd.\")",
            "correct_answer": "even_or_odd",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 443,
            "material": "Control Structure",
            "instruction": "Modify the following code in Python to only repeat a segment of the code while a certain user input is given.",
            "question": "# Get user input\r\ninput = input('Enter \"repeat\" to repeat the code: ')\r\n\r\n# Execute the code while ___ input is \"repeat\" \r\nwhile input == 'repeat':\r\n\tprint(\"Hello World\")\r\n\tinput = input('Enter \"repeat\" to repeat the code: ')",
            "correct_answer": "user",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 451,
            "material": "Control Structure",
            "instruction": "Write a Python script to search a given dictionary for a given word.",
            "question": "def search_word(word, dictionary):\r\n    if ___ in dictionary.keys():\r\n        return dictionary[word]\r\n    else:\r\n        return None\r\n\r\ndictionary = {'hello': 'string', 'goodbye': 'bye'}\r\n\r\nword = 'hello'\r\n\r\nresult = search_word(word, dictionary)\r\n\r\nif result:\r\n    print('Word found in dictionary: ' + result)\r\n\r\nelse:\r\n    print('Word not found in dictionary.')",
            "correct_answer": "word",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 498,
            "material": "Control Structure",
            "instruction": "Modify this Python code to add an exception for invalid input.",
            "question": "def calculate(a, b):\r\n    if ___ == 0:\r\n        raise ZeroDivisionError\r\n    elif b > 0:\r\n        c = a / b\r\n        return c\r\n    else:\r\n        raise ValueError",
            "correct_answer": "b",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 533,
            "material": "Control Structure",
            "instruction": "Suggest an web scraping algorithm for the following website.",
            "question": "A useful strategy for ___ scraping this site would be to use the Python library requests to make HTTP requests and BeautifulSoup to parse the HTML content. First, you should make an HTTP request to the website, then you should use BeautifulSoup to find the specific elements you are interested in and extract the data.",
            "correct_answer": "web",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 589,
            "material": "Control Structure",
            "instruction": "Write an algorithm in Python to check if a number is a palindrome.",
            "question": "def is_palindrome(number): \r\nnum = number  \r\n   \r\n# initializing a reverse number  \r\nreverse = 0\r\n  \r\n# Reverse the given number \r\nwhile(number > 0): \r\n   remainder = number % 10\r\n   # Create reverse \r\n   reverse = (reverse * 10) + remainder \r\n   number = number // 10 \r\n \r\n# check if ___ and reverse numbers are same\r\nif (num == reverse): \r\n  return True\r\nelse: \r\n  return False",
            "correct_answer": "original",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 591,
            "material": "Control Structure",
            "instruction": "Develop Python code to check if a given number is plaindrome.",
            "question": "def is_plaindrome(num):\r\n    original_num = num\r\n    reversed_num = 0\r\n    while ___ > 0:\r\n        remainder = num % 10\r\n        reversed_num = (reversed_num * 10) + remainder\r\n        num //= 10\r\n    return reversed_num == original_num\r\n\r\nnum = 1454\r\nif is_plaindrome(num):\r\n    print(num, \"is a plaindrome\")\r\nelse:\r\n    print(num, \"is not a plaindrome\")",
            "correct_answer": "num",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 596,
            "material": "Control Structure",
            "instruction": "Test if a given number is a Prime or not using Python.",
            "question": "if ___<=1: \r\n  print(\"Number is not a prime number.\") \r\nfor i in range(2,int(number**0.5)+1):\r\n  if(number % i == 0):\r\n    print(\"Number is not a prime number.\")\r\n    break\r\nelse: \r\n  print(\"Number is a prime number.\")",
            "correct_answer": "number",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 604,
            "material": "Control Structure",
            "instruction": "Create a function in Python to compare two strings and return true if the strings only differ by one character.",
            "question": "def compare_strings(s1, s2):\r\n    mismatch_count = 0\r\n\r\n    for ___ in range(len(s1)):\r\n        if s1[i] != s2[i]:\r\n            if mismatch_count > 0:\r\n                return False\r\n\r\n            mismatch_count += 1\r\n\r\n    return mismatch_count == 1\r\n\r\ncompare_strings('apple', 'acple')",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 623,
            "material": "Control Structure",
            "instruction": "Write a Python program to calculate the average monthly temperature of a given city for the last 10 years.",
            "question": "import csv\r\n\r\ndef avg_month_temp(city):\r\n result = 0\r\n counter = 0\r\n temperatures = csv.reader(open('weatherdata.csv'))\r\n for ___ in temperatures:\r\n if row[1] == city:\r\n result += float(row[2])\r\n counter += 1\r\n return result/counter",
            "correct_answer": "row",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 634,
            "material": "Control Structure",
            "instruction": "Create a Python procedure to determine if two numbers are divisible.",
            "question": "def divisible(x, y):\r\n    if ___ % y == 0:\r\n        return True\r\n    else:\r\n        return False",
            "correct_answer": "x",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 644,
            "material": "Control Structure",
            "instruction": "Create a for loop in Python that prints the output of a multiplication table for numbers from 1 to 10.",
            "question": "for ___ in range(1, 11):\r\n  for j in range(1, 11):\r\n    print(i * j, end='\\t')\r\n  print()",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 647,
            "material": "Control Structure",
            "instruction": "Develop a Python script for checking for palindromes.",
            "question": "def is_palindrome(word):\r\n  rev_word = word[::-1]\r\n  if ___ == rev_word:\r\n    return True\r\n  return False",
            "correct_answer": "word",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 760,
            "material": "Control Structure",
            "instruction": "Design an algorithm to check if a given number is prime in Python.",
            "question": "def is_prime(n):\r\n    \"\"\"Check if ___ given number is prime.\"\"\"\r\n    # Corner case\r\n    if n <= 1:\r\n        return False\r\n\r\n    # Check for divisibility\r\n    for i in range(2, n):\r\n        if n % i == 0:\r\n            return False\r\n    # Return true if it is not divisible by any number\r\n    return True\r\n\r\n# Output\r\nprint(is_prime(n))",
            "correct_answer": "a",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 778,
            "material": "Control Structure",
            "instruction": "Design a function to tell if a number is even or odd using Python.",
            "question": "def isEven(x):\r\n    if ___ % 2 == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nx = 5\r\n\r\nif isEven(x):\r\n    print(\"It is even\")\r\nelse:\r\n    print(\"It is odd\")",
            "correct_answer": "x",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 804,
            "material": "Control Structure",
            "instruction": "Suggest a completion for the following Python code to check if a given number is an Armstrong number.",
            "question": "def is_armstrong_number(num):\r\n  order = len(str(num))\r\n  sum = 0\r\n  temp = num\r\n  while ___ > 0:\r\n    digit = temp % 10\r\n    sum += digit ** order\r\n    temp //= 10\r\n  if num == sum:\r\n    return True  \r\n  else:\r\n    return False",
            "correct_answer": "temp",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 818,
            "material": "Control Structure",
            "instruction": "Write a conditional statement in Python that checks if two lists have the same items.",
            "question": "list1 = [9,8,7]\r\nlist2 = [7,8,9]\r\n\r\nif ___ == list2:\r\n    print(\"The lists have the same items.\")\r\nelse:\r\n    print(\"The lists do not have the same items.\")",
            "correct_answer": "list1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 841,
            "material": "Control Structure",
            "instruction": "Create a function in Python that takes two strings and checks if they are anagrams of each other.",
            "question": "def is_anagram(str1, str2): \r\n    if ___(str1)!= len(str2): \r\n        return False\r\n    first_list = list(str1.lower())\r\n    second_list = list(str2.lower())\r\n    first_list.sort()\r\n    second_list.sort()\r\n    return first_list == second_list\r\n\r\nprint(is_anagram(\"apple\",\"pleap\"))",
            "correct_answer": "len",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 844,
            "material": "Control Structure",
            "instruction": "Construct a Python program that will search for a given word in a web page and return the number of occurrences.",
            "question": "import requests\r\n\r\nurl = \"www.example.com\"\r\nword = \"Python\"\r\n\r\nhtml_content = requests.get(url).text\r\n\r\nwords = html_content.split()\r\n\r\noccurrences = 0\r\n\r\nfor ___ in words:\r\n    if w == word:\r\n        occurrences += 1\r\n\r\nprint(\"Found %d occurrences of '%s'\" % (occurrences, word))",
            "correct_answer": "w",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 884,
            "material": "Control Structure",
            "instruction": "Develop a Python Webscraper for collecting data from a given URL.",
            "question": "import requests\r\nfrom bs4 import BeautifulSoup\r\n\r\nURL = 'http://example.com/data'\r\n\r\n# Send a request to the URL\r\npage = requests.get(URL)\r\n\r\n# Parse the page\r\nsoup = BeautifulSoup(page.content, 'html.parser')\r\n\r\n# Get the data\r\ndata = soup.find_all('div', class_='data')\r\n\r\n# Print the data\r\nfor ___ in data:\r\n print(item.text)",
            "correct_answer": "item",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 891,
            "material": "Control Structure",
            "instruction": "Convert the following Algorithm into Python code.\r\n\r\nInput: two numbers\r\n\r\nAlgorithm:\r\n1. Check if the two numbers are equal.\r\n2. If true, return 0.\r\n3. Else check the which is higher.\r\n4. Return 1 if the first number is higher than the second one.\r\n5. Return -1 otherwise.",
            "question": "def compare_numbers(num1, num2):\r\n if ___ == num2:\r\n  return 0\r\n elif num1 > num2:\r\n  return 1\r\n else:\r\n  return -1\r\n\r\nnum1 = 5\r\nnum2 = 10\r\nresult = compare_numbers(num1, num2)\r\n\r\nprint(result)",
            "correct_answer": "num1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 906,
            "material": "Control Structure",
            "instruction": "Create a Python function that takes in two strings and returns True if they are anagrams (they contain the same letters).",
            "question": "def isAnagram(string1, string2):\r\n s1 = sorted(string1.lower())\r\n s2 = sorted(string2.lower())\r\n\r\n if ___ == s2:\r\n return True\r\n else:\r\n return False\r\n\r\nstring1 = \"pizza\";\r\nstring2 = \"appaiz\";\r\n\r\nisAnagram(string1, string2); // True",
            "correct_answer": "s1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 948,
            "material": "Control Structure",
            "instruction": "Write a function in Python to predict a label for a given input.",
            "question": "def predict(x):\r\n    if ___[0] > 0:\r\n        return 'positive'\r\n    if x[1] < 0:\r\n        return 'negative'\r\n    if x[2] > 0:\r\n        return 'positive'\r\n    return 'neutral'",
            "correct_answer": "x",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1009,
            "material": "Control Structure",
            "instruction": "Create a Python program to check if a given date is valid or not.",
            "question": "from datetime import datetime\r\n \r\ndate_string = '2019/02/29'\r\ntry:\r\n date = datetime.strptime(date_string, '%Y/%m/%d')\r\n \r\n if ___.year % 4 == 0 and date.month == 2 and date.day == 29:\r\n print('Valid Date')\r\n else:\r\n print('Invalid Date')\r\nexcept ValueError:\r\n print('Invalid Date')",
            "correct_answer": "date",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1012,
            "material": "Control Structure",
            "instruction": "Consider the following statement and write a code for it in Python",
            "question": "my_list = [1,2,3,4,5]\r\ntotal_sum = 0\r\n\r\nfor ___ in my_list:\r\n    total_sum = total_sum + x \r\n  \r\naverage = total_sum / len(my_list)\r\n\r\nprint(\"Sum of all elements in given list: \" + str(total_sum))\r\nprint(\"Average of all elements in given list: \" + str(average))",
            "correct_answer": "x",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1131,
            "material": "Control Structure",
            "instruction": "Optimize the following Python code for faster runtime performance",
            "question": "for ___ in range(5):\r\n    print(\"Hello\", end=\"\\n\")",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1140,
            "material": "Control Structure",
            "instruction": "Write a code for sorting the words within a sentence, alphabetically.",
            "question": "\"\"\"\r\nWrite a code for ___ the words within a sentence, alphabetically.\r\n\"\"\"\r\n\r\ndef sort_words_alphabetically(sentence):\r\n    words = sentence.split()\r\n    words.sort()\r\n    return ' '.join(words)\r\n\r\nif __name__ == '__main__':\r\n    sentence = 'Python is a great language'\r\n    print(sort_words_alphabetically(sentence))",
            "correct_answer": "sorting",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1157,
            "material": "Control Structure",
            "instruction": "Trace the recursive Fibonacci algorithm in Python and test its execution time for different values of n.",
            "question": "import time \r\n\r\ndef fib(n): \r\n if ___<0: \r\n  print(\"Incorrect input\") \r\n elif n==1: \r\n  return 0\r\n elif n==2: \r\n  return 1\r\n else: \r\n  return fib(n-1)+fib(n-2) \r\n\r\nstart = time.time() \r\n\r\nnum = 10 \r\nprint(fib(num))\r\n\r\nprint(\"Time taken:\", time.time()-start)",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1172,
            "material": "Control Structure",
            "instruction": "Author a Python program to check if a number is a palindrome.",
            "question": "def isPalindrome(num):\r\n  numStr = str(num)\r\n  for ___ in range(0, len(numStr)//2):\r\n    if numStr[i] != numStr[len(numStr)-i-1]:\r\n      return False\r\n  return True\r\n\r\nprint(isPalindrome(1991)) # Output: True",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1190,
            "material": "Control Structure",
            "instruction": "Write a Python script to extract all the values for a given key from a dictionary.",
            "question": "def get_key_values(dictionary, key):\r\n    return [value for ___, value in dictionary.items() if key == key]",
            "correct_answer": "key",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1228,
            "material": "Control Structure",
            "instruction": "Create a Python function for computing the Fibonacci sequence up to the nth number.",
            "question": "def fibonacci(n):\r\n    a, b = 0, 1\r\n    for ___ in range(n):\r\n        a, b = b, a + b\r\n    return a\r\n\r\nprint(fibonacci(10)) # outputs 55",
            "correct_answer": "_",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1298,
            "material": "Control Structure",
            "instruction": "Generate a code to optimize the following program for better performance in Python.",
            "question": "import random\r\n\r\nrandom_list = [random.randint(0, 10) for ___ in range(10)]\r\nunique_list = list(set(random_list))",
            "correct_answer": "_",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1309,
            "material": "Control Structure",
            "instruction": "Write a Python program to compare two unordered lists to see if they are equal.",
            "question": "def compare_lists(list1, list2):\r\n    if ___(list1) != len(list2):\r\n        return False\r\n    if sorted(list1) == sorted(list2):\r\n        return True\r\n    return False",
            "correct_answer": "len",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1322,
            "material": "Control Structure",
            "instruction": "Write a python program for binary search",
            "question": "def binarySearch(arr, target):\r\n    left = 0\r\n    right = len(arr) - 1\r\n\r\n    while ___ <= right:\r\n        mid = (left + right) // 2\r\n\r\n        if arr[mid] == target:\r\n            return mid\r\n        elif arr[mid] > target:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return -1",
            "correct_answer": "left",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1324,
            "material": "Control Structure",
            "instruction": "Create a Python code to display the multiplication table for a number between",
            "question": "for ___ in range(1, 11):\r\n    print(\"4 x\", i, \"=\", 4*i)",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1341,
            "material": "Control Structure",
            "instruction": "Create a Python program to check if a triangle is valid or not with the given values for its three sides.",
            "question": "def is_valid_triangle(a, b, c): \r\n  \r\n    # triangle should have 3 sides \r\n    if ___ + b <= c or a + c <= b or b + c <= a: \r\n        return False\r\n  \r\n    # sum of any two side should always be greater than third side \r\n    if a + b > c and a + c > b and b + c > a: \r\n        return True\r\n    return False\r\n\r\nis_valid_triangle(2, 2, 3)",
            "correct_answer": "a",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1353,
            "material": "Control Structure",
            "instruction": "Write a Python function for calculating factorials.",
            "question": "def factorial(n):\r\n    if ___ == 0:\r\n        return 1\r\n    else:\r\n        return n * factorial(n-1)\r\n\r\nnumber = 4\r\nresult = factorial(number)\r\nprint(result)",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1397,
            "material": "Control Structure",
            "instruction": "Design a Python program for implementing a stack with the following methods.",
            "question": "class Stack:\r\n    def __init__(self):\r\n        self.items = []\r\n\r\n    def push(self, x): \r\n        self.items.append(x) \r\n\r\n    def pop(self): \r\n        if ___ self.is_empty():\r\n            return self.items.pop()\r\n        else:\r\n            return None\r\n        \r\n    def is_empty(self): \r\n        return len(self.items) == 0",
            "correct_answer": "not",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1401,
            "material": "Control Structure",
            "instruction": "Compose a python program that can search a text document for a given word.",
            "question": "def search_for_word(text_file, query_word):\r\n    words = []\r\n\r\n    with open(text_file, \"r\") as file:\r\n        for ___ in file:\r\n            words.extend(line.split())\r\n\r\n    if query_word in words:\r\n        return True\r\n    else:\r\n        return False",
            "correct_answer": "line",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1447,
            "material": "Control Structure",
            "instruction": "can you provide a python for loop that prints out the product of two lists?",
            "question": "list1 = [1, 2, 3]\r\nlist2 = [4, 5, 6]\r\n\r\nfor ___ in range(len(list1)):\r\n    product = list1[i] * list2[i]\r\n    print(product)",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1477,
            "material": "Control Structure",
            "instruction": "Generate a Python program that searches for a given key in a dictionary.",
            "question": "my_dict = {\r\n 'name': 'John',\r\n 'age': 26,\r\n 'salary': 5000\r\n}\r\n\r\nfind_key = 'name'\r\n\r\nif ___ in my_dict:\r\n print(my_dict[find_key])",
            "correct_answer": "find_key",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1548,
            "material": "Control Structure",
            "instruction": "Can you generate a greedy algorithm in Python for solving the coin change problem?",
            "question": "def get_coins(coins, change):\r\n\tmin_coins = change\r\n\tif ___ in coins:\r\n\t\treturn [change]\r\n\r\n\tfor i in [c for c in coins if c <= change]:\r\n\t\tnum_coins = 1 + get_coins(coins, change-i)\r\n\t\tif len(num_coins) < min_coins:\r\n\t\t\tmin_coins = num_coins\r\n\treturn min_coins\r\n\r\n# Test \r\ncoins = [1, 6, 10]\r\nchange = 8\r\nprint(get_coins(coins, change)) # [1, 6, 1]",
            "correct_answer": "change",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1552,
            "material": "Control Structure",
            "instruction": "Create a script in Python for classifying the sentiment of a text. The script should be able to handle input of various lengths and should return a sentiment score (on a scale from -1 to +1) for the text.",
            "question": "import nltk\r\n\r\ndef sentiment_analysis(text):\r\n tokens = nltk.word_tokenize(text)\r\n score = 0\r\n for ___ in tokens:\r\n tag = nltk.pos_tag(token)[0]\r\n if tag[1] == 'positive':\r\n score += 1\r\n else:\r\n score -= 1\r\n return score / len(tokens)",
            "correct_answer": "token",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1580,
            "material": "Control Structure",
            "instruction": "Develop a Python program to check if a given number is a power of two.",
            "question": "def is_power_of_two(x):\r\n  while ___ % 2 == 0 and x > 1:\r\n    x = x / 2\r\n  return x == 1\r\n\r\nnum = 16\r\n\r\nprint(is_power_of_two(num))",
            "correct_answer": "x",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1598,
            "material": "Control Structure",
            "instruction": "Create a function in Python to calculate the sum of squares for all numbers within a range given two integers, n and m.",
            "question": "def sum_of_squares(n, m):\r\n    result = 0\r\n    for ___ in range(n, m+1):\r\n        result += i*i\r\n    return result\r\n  \r\nprint(sum_of_squares(n, m))",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1638,
            "material": "Control Structure",
            "instruction": "Build a Python class to identify if a provided number is prime or composite.",
            "question": "class PrimeNumber:\r\n    def __init__(self, num):\r\n        self.num = num\r\n\r\n    def is_prime(self):\r\n        for ___ in range(2, self.num):\r\n            if(self.num % i == 0):\r\n                return False\r\n        return True\r\n\r\nnum = 10\r\nobj = PrimeNumber(num)\r\n\r\nif obj.is_prime():\r\n    print(\"Number is Prime\")\r\nelse:\r\n    print(\"Number is Composite\")",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1654,
            "material": "Control Structure",
            "instruction": "Write a Python program to create a data visualization for a given dataset.",
            "question": "import matplotlib.pyplot as plt\r\n\r\ndef create_visualizations(data):\r\n x = [x[0] for ___ in data]\r\n y = [x[1] for x in data]\r\n plt.plot(x, y, 'bo')\r\n plt.xlabel('Courses')\r\n plt.ylabel('Students')\r\n plt.title('Number of Students Enrolled in Courses')\r\n plt.show()",
            "correct_answer": "x",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1683,
            "material": "Control Structure",
            "instruction": "Create a Python program to check if two lists have overlapping elements",
            "question": "def has_overlapping(arr1, arr2):\r\n    for ___ in arr1:\r\n        if element in arr2:\r\n            return True\r\n    return False\r\n\r\nA = [1,3,5,7]\r\nB = [2,4,5,7]\r\n\r\nresult = has_overlapping(A, B)\r\nprint(result)",
            "correct_answer": "element",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1685,
            "material": "Control Structure",
            "instruction": "Given input and output examples, create a classification model in Python that can predict the output for a given input.",
            "question": "def pred_model(inputs): \r\n  outputs=[]\r\n  for ___ in inputs:\r\n    outputs.append(i*2)\r\n  return outputs\r\n \r\ninputs = [1,2,3] \r\noutputs = pred_model(inputs) \r\nprint(\"Outputs:\", outputs)",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1698,
            "material": "Control Structure",
            "instruction": "Write a python program to check if a given number is prime or not.",
            "question": "def is_prime(num):\r\n    for ___ in range(2, num):\r\n        if (num % i) == 0:\r\n            return False\r\n    return True\r\n\r\nnumber = 27\r\n\r\nif is_prime(number):\r\n    print(str(number) + ' is a prime number.')\r\nelse:\r\n    print(str(number) + ' is not a prime number.')",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1721,
            "material": "Control Structure",
            "instruction": "Create a module in Python for validating a phone number.",
            "question": "import re\r\n\r\nphone_number = \"+1-800-867-5309\"\r\n\r\nphone_pattern = re.compile(r'^\\+[1-9]\\d{1,2}\\-\\d{3}\\-\\d{3}\\-\\d{4}$')\r\n\r\ndef validate_phone_number(phone_number):\r\n    return phone_pattern.search(phone_number)\r\n\r\nvalid = validate_phone_number(phone_number)\r\nif ___:\r\n    print(\"Valid Phone number\")\r\nelse:\r\n    print(\"Invalid Phone number\")",
            "correct_answer": "valid",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1726,
            "material": "Control Structure",
            "instruction": "Edit the following Python program such that it prints out the multiplication table for the given number n.",
            "question": "n = 5\r\n\r\n# printing the multiplication table\r\nfor ___ in range(1, 11): \r\n    print(n, 'x', i, '=', n * i)",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1738,
            "material": "Control Structure",
            "instruction": "Edit the given Python program to optimize its code for better performance",
            "question": "#Function to calculate the sum of the natural numbers \r\ndef sumOfNaturals(n): \r\n  \r\n    #using Gauss formula\r\n    if ___ % 2 == 0: \r\n        sum = (n//2)*(n+1) \r\n    else: \r\n        sum = (n//2)*(n+1) + (n+1)//2\r\n  \r\n    return sum",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1741,
            "material": "Control Structure",
            "instruction": "Design a program in Python for computing the average height of a group of people.",
            "question": "def average_height(lst):\r\n    total = 0\r\n    for ___ in lst:\r\n        total += height\r\n    \r\n    return total / len(lst)\r\n\r\nresult = average_height([1.78, 1.90, 1.75, 1.82])\r\nprint(result)",
            "correct_answer": "height",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1777,
            "material": "Control Structure",
            "instruction": "Analyze the input provided and generate a function in Python that returns \"Invalid input\" if the input is not a valid integer number, or returns the number of digits in the input number otherwise.",
            "question": "def count_digits(inp):\r\n    if ___ isinstance(inp, int):\r\n        return \"Invalid input\"\r\n    else:\r\n        return len(str(inp))",
            "correct_answer": "not",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1791,
            "material": "Control Structure",
            "instruction": "Create a function in Python that determines if a given number is an Armstrong number or not.",
            "question": "def isArmstrongNumber(number):\r\n  num_str = str(number)\r\n  result = 0\r\n  power = len(num_str)\r\n\r\n  for ___ in num_str:\r\n    result += int(c) ** power\r\n\r\n  if result == number:\r\n    return True\r\n  else:\r\n    return False\r\n\r\nif isArmstrongNumber(371):\r\n  print('It is an Armstrong number.')\r\nelse:\r\n  print('It is not an Armstrong number.')",
            "correct_answer": "c",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1826,
            "material": "Control Structure",
            "instruction": "Write an expression in python to check if a given number is prime",
            "question": "def is_prime(number):\r\n    if ___>1:\r\n        for i in range(2,number):\r\n            if number%i==0:\r\n                return False\r\n    else:\r\n        return False\r\n    return True\r\nprint(is_prime(number))",
            "correct_answer": "number",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1852,
            "material": "Control Structure",
            "instruction": "Given two number arrays A and B, write a Python function to check if each element in A also exists in B",
            "question": "def check_equality(arr1, arr2):\r\n    for ___ in arr1:\r\n        if num not in arr2:\r\n            return False\r\n    return True\r\n\r\nA = [1, 2, 3]\r\nB = [2, 3, 4]\r\n\r\nresult = check_equality(A, B)\r\nprint(result)",
            "correct_answer": "num",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1869,
            "material": "Control Structure",
            "instruction": "Convert the following for loop into a recursive function in Python.",
            "question": "def printRange(start, end):\r\n    if ___ == end:\r\n        return\r\n    print(start)\r\n    printRange(start+1, end)\r\n\r\nprintRange(0, 5)",
            "correct_answer": "start",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1892,
            "material": "Control Structure",
            "instruction": "Design a positive feedback loop for the following python program.",
            "question": "for ___ in range(10):\r\n    print(\"hello\")\r\n    i += 1\r\n    if i == 10:\r\n        print(\"You've got it!\")",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1899,
            "material": "Control Structure",
            "instruction": "Create a Python program to scrape a search engine for the top 10 results on a given query.",
            "question": "import requests\r\nfrom bs4 import BeautifulSoup\r\n\r\nurl = 'https://www.google.com/search?q=best+movies+of+2019&num=10'\r\n\r\nresponse = requests.get(url)\r\nsoup = BeautifulSoup(response.text, 'html.parser')\r\n\r\nresults = soup.find_all('div', class_='rc')\r\n\r\nfor ___ in results:\r\n title = result.find('h3').text\r\n print(title)",
            "correct_answer": "result",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1914,
            "material": "Control Structure",
            "instruction": "Write a Python program to search for a given element in multiple lists",
            "question": "def search_elem(my_list1, my_list2, elem):\r\n    for ___ in [my_list1, my_list2]:\r\n        found = False\r\n        for val in list:\r\n            if val == elem:\r\n                found = True\r\n                break\r\n        if found:\r\n            return True\r\n    return False\r\n\r\nfound = search_elem(my_list1, my_list2, elem)\r\nprint(found)",
            "correct_answer": "list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1922,
            "material": "Control Structure",
            "instruction": "Create a python program for identifying if a given number is prime or not.",
            "question": "def is_prime(num): \r\n    if ___ < 2: \r\n        return False\r\n  \r\n    for i in range(2, num): \r\n        if num % i == 0: \r\n            return False\r\n  \r\n    return True\r\n  \r\n# Example \r\nnumber = 10\r\n  \r\nif is_prime(number): \r\n    print(number, \"is a prime number\") \r\nelse: \r\n    print(number, \"is not a prime number\")",
            "correct_answer": "num",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1934,
            "material": "Control Structure",
            "instruction": "Create a Python function that takes two lists, compare them, and return True if both lists are identical and False if they differ.",
            "question": "def compare_lists(list1, list2):\r\n    if ___(list1) != len(list2):\r\n        return False\r\n\r\n    for i in range(len(list1)):\r\n        if list1[i] != list2[i]:\r\n            return False\r\n\r\n    return True",
            "correct_answer": "len",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 1944,
            "material": "Control Structure",
            "instruction": "Create a program in Python that uses a for loop to output the division of two numbers.",
            "question": "for ___ in range(2):\r\n    print(5/3)",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2069,
            "material": "Control Structure",
            "instruction": "Write a Bash script to check if a specific program is installed on the current system.",
            "question": "#!/usr/bin/env bash\r\n\r\nif ___ -p python &> /dev/null; then\r\n  echo 'Python is installed!'\r\nelse \r\n  echo 'Python is not installed!'\r\nfi",
            "correct_answer": "type",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2135,
            "material": "Control Structure",
            "instruction": "Create a method in Python that returns the result for the factorial of a given number.",
            "question": "def factorial(n): \r\n    if ___ == 0:\r\n        return 1\r\n    else:\r\n        return n*factorial(n-1) \r\n\r\nx = 5\r\nresult = factorial(x) \r\nprint(result) \r\n\r\n# Output: \r\n120",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2165,
            "material": "Control Structure",
            "instruction": "Develop a python program for",
            "question": "def filter_vowel_strings(string_list):\r\n    vowels = ('a', 'e', 'i', 'o', 'u')\r\n    filtered_list = []\r\n    for ___ in string_list:\r\n        if string.startswith(vowels):\r\n            filtered_list.append(string)\r\n    return filtered_list",
            "correct_answer": "string",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2197,
            "material": "Control Structure",
            "instruction": "Write a Python program to check if the given matris is a symmetric matrix.",
            "question": "def is_symmetric(a):\r\n    n = len(a)\r\n    for ___ in range(n):\r\n        for j in range(n):\r\n            if a[i][j] != a[j][i]:\r\n                return False\r\n    return True\r\n\r\nA = [[1,2,3],\r\n    [-2,0,4],\r\n    [3,-4,5]]\r\nprint(is_symmetric(A))",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2307,
            "material": "Control Structure",
            "instruction": "Develop an algorithm in Python to find the minimum number of coins needed to make change for a given amount",
            "question": "def minCoinChange(n):\r\n    coins = [1, 2, 5]\r\n    mins = [0]+ [float('inf')]*n\r\n    for ___ in coins:\r\n        for i in range(c, n+1):\r\n            mins[i] = min(mins[i], mins[i-c]+1)\r\n    return mins[n]\r\n    \r\nprint(minCoinChange(n))",
            "correct_answer": "c",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2327,
            "material": "Control Structure",
            "instruction": "Write a Python script to detect if two strings contain the same characters. Output should be true or false.",
            "question": "def is_permutation(s1, s2):\r\n    s1_list = list(s1)\r\n    s2_list = list(s2)\r\n    s1_list.sort()\r\n    s2_list.sort()\r\n    if ___ == s2_list:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nprint(is_permutation(\"abc\", \"bca\")) # True",
            "correct_answer": "s1_list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2330,
            "material": "Control Structure",
            "instruction": "Generate a Python algorithm to check if a given word is a palindrome.",
            "question": "def isPalindrome(word): \r\n    left, right = 0, len(word) - 1\r\n    while ___ >= left: \r\n        if not word[left] == word[right]: \r\n            return False\r\n        left += 1\r\n        right -= 1\r\n    return True",
            "correct_answer": "right",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2357,
            "material": "Control Structure",
            "instruction": "Translate a Java loop into a while loop in Python.",
            "question": "i = 1\r\nwhile ___ <= 10:\r\n    print(\"Hello World\")\r\n    i += 1",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2360,
            "material": "Control Structure",
            "instruction": "Create a Python script for formatting a sentence.",
            "question": "def format_sentence(sentence):\r\n    sentence = sentence.split()\r\n    sentence = [word.capitalize() for ___ in sentence]\r\n    return ' '.join(sentence)\r\n\r\nprint(format_sentence(\"He went to the store\"))",
            "correct_answer": "word",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2363,
            "material": "Control Structure",
            "instruction": "Implement a Python function called \u201ccheck_prime\u201d which takes an integer as an argument and returns True if the number is prime, and False otherwise.",
            "question": "def check_prime(n):\r\n if ___ == 1:\r\n return False\r\n\r\n for i in range(2, int(n ** 0.5) + 1):\r\n if n % i == 0:\r\n return False\r\n\r\n return True",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2383,
            "material": "Control Structure",
            "instruction": "Write a Python program to do a brute force search for a pair of elements which sum to a given target value.",
            "question": "# brute force search algorithm\r\ndef brute_force_search(arr, target):\r\n\tfor ___ in range(len(arr)):\r\n\t\tfor j in range(len(arr)):\r\n\t\t\tif arr[i] + arr[j] == target:\r\n\t\t\t\treturn arr[i], arr[j]\r\n\treturn None\r\n\r\n# test the algorithm\r\ntarget = 8\r\nlst = [1, 3, 4, 5, 6, 7]\r\nprint(brute_force_search(lst, target))\r\n\r\nOutput:\r\npair = (3, 5)",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2390,
            "material": "Control Structure",
            "instruction": "Create a Python code to check if a single integer is a prime number",
            "question": "def is_prime(number):\r\n    if ___ <= 1:\r\n        return False\r\n\r\n    for i in range(2, number):\r\n        if number % i == 0:\r\n            return False\r\n    return True",
            "correct_answer": "number",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2391,
            "material": "Control Structure",
            "instruction": "Create a program in Python to check for palindrome numbers.",
            "question": "def palindrome(num):\r\n    num = str(num)\r\n    if ___ == num[::-1]:\r\n        print(num + \" is a palindrome number\")\r\n    else: \r\n        print(num + \" is not a palindrome number\")\r\n\r\npalindrome(121)\r\n// Output: 121 is a palindrome number",
            "correct_answer": "num",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2423,
            "material": "Control Structure",
            "instruction": "Debug the following Python code and make it functional (read the instructions for the code).",
            "question": "def factorial(n):\r\n if ___ == 0:\r\n    return 1\r\n else:\r\n return n * factorial(n - 1)\r\n\r\n# call the method\r\nprint(factorial(5))",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2431,
            "material": "Control Structure",
            "instruction": "Create a method to verify if the following number is prime in Python:",
            "question": "def is_prime(n):\r\n    if (n <= 1):\r\n        return False\r\n    for ___ in range(2, n):\r\n        if (n % i == 0):\r\n            return False\r\n    return True\r\n\r\nn = 7\r\n\r\nif is_prime(n):\r\n    print(\"The number {} is prime.\".format(n))\r\nelse:\r\n    print(\"The number {} is not prime.\".format(n))",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2444,
            "material": "Control Structure",
            "instruction": "Optimize the following Python code for best runtime.",
            "question": "def is_prime(n):\r\n    if ___ == 1:\r\n        return False\r\n    if n in (2, 3):\r\n        return True\r\n    if not (n & 1) and n > 2:\r\n        return False\r\n    for i in range(3, int(n**0.5)+1, 2):\r\n        if n % i == 0:\r\n            return False\r\n    return True",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2463,
            "material": "Control Structure",
            "instruction": "Generate an algorithm in Python to check if a given number of years is a leap year.",
            "question": "def is_leap_year(year):\r\n    if ___ % 400 == 0:\r\n        return True\r\n    if year % 100 == 0:\r\n        return False\r\n    if year % 4 == 0:\r\n        return True\r\n    return False\r\n\r\nyear = 1999\r\nif is_leap_year(year):\r\n    print(\"This is a leap year.\")\r\nelse:\r\n    print(\"This is not a leap year.\")",
            "correct_answer": "year",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2512,
            "material": "Control Structure",
            "instruction": "Produce a Python program to compute the Fibonacci number for a given integer.",
            "question": "def getFibonacci(n): \r\n    if ___<0: \r\n        print(\"Incorrect input\") \r\n    elif n==1: \r\n        return 0\r\n    elif n==2: \r\n        return 1\r\n    else: \r\n        return getFibonacci(n-1)+getFibonacci(n-2) \r\n\r\nnumber = 8\r\nfibonacci_number = getFibonacci(number)\r\nprint(fibonacci_number)",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2514,
            "material": "Control Structure",
            "instruction": "Optimize a Python program to check for prime numbers",
            "question": "def isPrime(n):\r\n if ___ <= 1:\r\n return False\r\n for i in range(2, int(n ** 0.5) + 1):\r\n if n % i == 0:\r\n return False\r\n return True\r\n\r\nnum = 23\r\nif isPrime(num):\r\n print(\"Number is prime\")\r\nelse:\r\n print(\"Number is not prime\")",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2522,
            "material": "Control Structure",
            "instruction": "Create a Python program for implementing a linear search algorithm.",
            "question": "def linearSearch(arr, key): \r\n for ___, num in enumerate(arr):\r\n if num == key:\r\n return idx\r\n \r\n return -1",
            "correct_answer": "idx",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2523,
            "material": "Control Structure",
            "instruction": "Create a Python program to check if the given number is divisible by 3 or not.",
            "question": "def is_divisible_by_3(n):\r\n  return (n % 3 == 0)\r\n\r\nn = 12\r\nif ___(n):\r\n  print(str(n) + ' is divisible by 3.')\r\nelse:\r\n  print(str(n) + ' is not divisible by 3.')",
            "correct_answer": "is_divisible_by_3",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2531,
            "material": "Control Structure",
            "instruction": "Design a Python program for comparing two strings and printing \"Equal\" if the strings are equal, or \"Not Equal\" if the strings are not equal.",
            "question": "if ___ == string2:\r\n    print(\"Equal\")\r\nelse:\r\n    print(\"Not Equal\")",
            "correct_answer": "string1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2579,
            "material": "Control Structure",
            "instruction": "Generate a function in Python to return the highest value in a dictionary for the given key.",
            "question": "def highestValue(dictionary, key): \r\n    highest = 0 \r\n    for ___,value in dictionary.items(): \r\n        if value > highest: \r\n            highest = value \r\n    return highest \r\n\r\nhighestValue(dictionary, key)",
            "correct_answer": "key",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2600,
            "material": "Control Structure",
            "instruction": "Suggest a completion for the following Python code so that it prints all the numbers between 0 and 10 (inclusive).",
            "question": "for ___ in range(11):\r\n    print(num)",
            "correct_answer": "num",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2604,
            "material": "Control Structure",
            "instruction": "Optimize the following Python code by replacing the two for loops with one.",
            "question": "list1 = [1,2,3]\r\nlist2 = [4,5,6]\r\n \r\nfor ___,j in zip(list1, list2):\r\n    print(i * j)",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2630,
            "material": "Control Structure",
            "instruction": "Create a search algorithm in Python that takes two inputs 'word' and 'text' and returns true if the word is present in the text.",
            "question": "def search(word, text):\r\n    words = text.split()\r\n    for ___ in words:\r\n        if w == word:\r\n            return True\r\n    return False",
            "correct_answer": "w",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2664,
            "material": "Control Structure",
            "instruction": "Create an algorithm in Python to search for a given item in a dictionary.",
            "question": "def search(dict, item): \r\n    for ___, value in dict.items(): \r\n        if item == value: \r\n            return True \r\n    return False\r\n\r\ndict = {'name': 'john', 'age': 22, 'city': 'New York'}\r\nitem = 'John'\r\nprint(search(dict, item))",
            "correct_answer": "key",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2665,
            "material": "Control Structure",
            "instruction": "Design an algorithm in Python for finding out the factorial of a given number.",
            "question": "def factorial(n):\r\n fact = 1\r\n for ___ in range(2,n+1):\r\n  fact = fact * i\r\n return fact",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2686,
            "material": "Control Structure",
            "instruction": "Create a module in Python to scrape the web for a particular website.",
            "question": "import requests\r\nfrom bs4 import BeautifulSoup\r\n\r\ndef scrape_website(url):\r\n    response = requests.get(url)\r\n    html = response.text\r\n \r\n    soup = BeautifulSoup(html, 'html.parser')\r\n    return soup\r\n\r\nif ___ == '__main__':\r\n    url = 'https://www.example.com/'\r\n    soup = scrape_website(url)\r\n    print(soup)",
            "correct_answer": "__name__",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2796,
            "material": "Control Structure",
            "instruction": "Create a function in Python that checks if a given number is a prime.",
            "question": "def isPrime(n):\r\n    if ___ < 2:\r\n        return False\r\n    for i in range(2, int(sqrt(n))+1):\r\n        if n % i == 0:\r\n            return False\r\n    return True",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2801,
            "material": "Control Structure",
            "instruction": "Write a Python function that creates a JSON response with fields for score and data. The data field should contain a message that varies depending on the score value. If the score is 0, the message should state \"Try again\". If the score is 1, the message should state \"Well done\".",
            "question": "def create_response(score):\r\n if ___ == 0:\r\n  message = \"Try again\"  \r\n elif score == 1:\r\n  message = \"Well done\"\r\n else:\r\n  message = \"\"\r\n \r\n return {\"score\": score, \"message\": message}",
            "correct_answer": "score",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2816,
            "material": "Control Structure",
            "instruction": "Using Python, generate a program for solving linear equations.",
            "question": "def solution(coefficients):\r\n\t# get the coefficients of the equations\r\n\ta = coefficients[0][0] \r\n\tb = coefficients[0][1] \r\n\tc = coefficients[0][2] \r\n\td = coefficients[1][0] \r\n\te = coefficients[1][1] \r\n\tf = coefficients[1][2] \r\n\r\n\t# solve for ___ and y\r\n\ty = (a*f - c*d)/(a*e - b*d) \r\n\tx = (c*e - b*f)/(a*e - b*d) \r\n\r\n\t# return the solutions\r\n\treturn x, y\r\n\r\n\r\n# example\r\nsolution([[1, 2, 8], [3, -4, -2]])",
            "correct_answer": "x",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2842,
            "material": "Control Structure",
            "instruction": "Generate a Python program to apply custom formatting for the following output.",
            "question": "def create_html_table(slist):\r\n    table_html = \"<table>\"\r\n    for ___ in slist:\r\n        table_html += \"<tr>\"\r\n        table_html += \"<td>\" + str + \"</td>\" \r\n        table_html += \"</tr>\"\r\n\r\n    table_html += \"</table>\"\r\n    return table_html",
            "correct_answer": "str",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2878,
            "material": "Control Structure",
            "instruction": "Modify the Python function so that it prints \"Success!\" if the input parameter is greater than 10, or prints \"Failed!\" if it is less than or equal to 10.",
            "question": "def check_num(num):\r\n    if ___ > 10:\r\n        print(\"Success!\")\r\n    else:\r\n        print(\"Failed!\")\r\n\r\ncheck_num(7)",
            "correct_answer": "num",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2900,
            "material": "Control Structure",
            "instruction": "Write a Python program that takes two given strings and checks if the first is a substring of the second one.",
            "question": "def is_substring(string_1, string_2):\r\n    \r\n    if ___ in string_2:\r\n        return True\r\n    else:\r\n        return False",
            "correct_answer": "string_1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2920,
            "material": "Control Structure",
            "instruction": "Compare two arrays of Python objects and return True if all objects in arrayA are also in arrayB.",
            "question": "def compare_arrays(arrA, arrB):\r\n    for ___ in arrA:\r\n        if i not in arrB:\r\n            return False\r\n    return True",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2962,
            "material": "Control Structure",
            "instruction": "Write a Python function to generate a multiplication table for a given number.",
            "question": "def generate_table(num):\r\n    # print the table heading\r\n    print(\"MULTIPLICATION TABLE FOR {}\".format(num))\r\n    # generate the table\r\n    for ___ in range(1, 11):\r\n        print(\"{} x {} = {}\".format(num, i, num*i))\r\n\r\n# generate table for 9\r\ngenerate_table(9)",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2994,
            "material": "Control Structure",
            "instruction": "Develop a program in Python for printing an asterisk triangle consisting of n rows.",
            "question": "def asterisk_triangle(n):\r\n    for ___ in range(n):\r\n        for j in range(i+1):\r\n            print('*', end=\" \")\r\n        print()\r\n\r\nn = 5\r\nasterisk_triangle(n)",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 2995,
            "material": "Control Structure",
            "instruction": "Generate a python program to check the sum of two numbers and determine if they are equal or not.",
            "question": "def compare_sum(a, b):\r\n  if ___ + b == 10:\r\n    return True\r\n  else:\r\n    return False",
            "correct_answer": "a",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3059,
            "material": "Control Structure",
            "instruction": "Edit the following Python function to raise an exception if the given number is lower than 0.",
            "question": "def square(num):\r\n    if ___ < 0:\r\n        raise ValueError('Cannot square negative numbers.')\r\n    return num**2",
            "correct_answer": "num",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3100,
            "material": "Control Structure",
            "instruction": "Optimize a given Python program for better runtime",
            "question": "x = 0\r\nfor ___ in range(0,10000,2):\r\n    x += i\r\nx *= 2\r\nx += (10000 - 1)",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3107,
            "material": "Control Structure",
            "instruction": "Create a Python dictionary for alphabetical order of numeric input",
            "question": "def createDict(arr):\r\n  res = {}\r\n  for ___ in range(len(arr)):\r\n    res[arr[i]] = i + 1\r\n  return res\r\n\r\nd = createDict([2, 3, 1])\r\nprint(d)",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3121,
            "material": "Control Structure",
            "instruction": "Generate a program in Python that will check if a given number is a palindrome.",
            "question": "def is_palindrome(n):\r\n n = str(n)\r\n \r\n return n == n[::-1]\r\n \r\nnum = 123321\r\nif ___(num):\r\n print(f\"{num} is a palindrome\")\r\nelse:\r\n print(f\"{num} is not a palindrome\")",
            "correct_answer": "is_palindrome",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3228,
            "material": "Control Structure",
            "instruction": "Write an algorithm in Python to determine if a number is an Armstrong number or not.",
            "question": "def armstrong_number(num):\r\n  digits = [int(x) for ___ in str(num)]\r\n  n_digits = len(digits)\r\n  sum_of_cubes = 0\r\n  for digit in digits:\r\n    sum_of_cubes += digit ** n_digits\r\n  if sum_of_cubes == num:\r\n    return True\r\n  else:\r\n    return False\r\n\r\narmstrong_number(370)",
            "correct_answer": "x",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3248,
            "material": "Control Structure",
            "instruction": "Develop a Python script for creating a dictionary with all the occurrences of the words in a sentence.",
            "question": "sentence = \"John and Mary went to the school\"\r\nwords = sentence.split()\r\nword_dict = {}\r\n\r\nfor ___ in words:\r\n    if word in word_dict:\r\n        word_dict[word] += 1\r\n    else:\r\n        word_dict[word] = 1\r\n\r\nprint(word_dict)",
            "correct_answer": "word",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3313,
            "material": "Control Structure",
            "instruction": "Create a python program to find if a number is a prime number",
            "question": "def is_prime(num):\r\n    for ___ in range(2, num):\r\n        if not num % i:\r\n            return False\r\n    return True\r\n\r\nnum = 15 \r\nif is_prime(num):\r\n    print(\"The number is prime\")\r\nelse:\r\n    print(\"The number is not prime\")",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3340,
            "material": "Control Structure",
            "instruction": "Generate a python script to calculate the total public holiday hours for a given state.",
            "question": "state = \"Illinois\"\r\n\r\ndef calculate_public_holiday_hours(state):\r\n    # code to calculate public holiday hours for ___ given state\r\n    if state == \"Illinois\":\r\n        return 8\r\n    # code for other states\r\n\r\nhours = calculate_public_holiday_hours(state)\r\nprint(\"Public holiday hours:\", hours)",
            "correct_answer": "a",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3363,
            "material": "Control Structure",
            "instruction": "Generate a python code to calculate the factorial for a given number.",
            "question": "def factorial(number):\r\n    if ___ == 0:\r\n        return 1\r\n    else:\r\n        return number * factorial(number -1)\r\n\r\nfactorial(num)",
            "correct_answer": "number",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3437,
            "material": "Control Structure",
            "instruction": "Create a Python script to calculate the Fibonacci sequence for a given integer n.",
            "question": "# Fibonacci sequence\r\ndef Fibonacci(n):\r\n a = 0\r\n b = 1\r\n if ___ < 0:\r\n print(\"Incorrect input\")\r\n elif n == 0:\r\n return a\r\n elif n == 1:\r\n return b\r\n else:\r\n for i in range(2,n):\r\n c = a + b\r\n a = b\r\n b = c\r\n return b\r\n\r\n# Driver Program\r\nprint(Fibonacci(7)) \r\n# Output: 13",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3450,
            "material": "Control Structure",
            "instruction": "Identify errors and write fix for the following python code",
            "question": "def uppercase_letter_count(string):\r\n    count = 0\r\n    for ___ in string: # Added missing colon\r\n        if c.isupper():\r\n            count += 1\r\n    return count # Removed an unnecessary '-'",
            "correct_answer": "c",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3452,
            "material": "Control Structure",
            "instruction": "Create a scoring system for a trivia game in Python. The system should take two inputs - the correct answer and user response - and return a single score value.",
            "question": "def score_trivia(correct, user):\r\n    correct = correct.lower()\r\n    user = user.lower()\r\n\r\n    max_score = 10\r\n    score = 0\r\n\r\n    if ___ == user:\r\n        score = max_score\r\n    elif user in correct or correct in user:\r\n        score = max_score * 0.8\r\n\r\n    return score",
            "correct_answer": "correct",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3471,
            "material": "Control Structure",
            "instruction": "Optimize a code snippet in Python for maximum performance.",
            "question": "import time\r\n\r\ndef sleep_for_the_night():\r\n while ___:\r\n  start_time = time.time()\r\n  time.sleep(5)\r\n  end_time = time.time()\r\n  elapsed_time = end_time - start_time\r\n  if elapsed_time < 5:\r\n   time.sleep(5-elapsed_time)\r\n\r\nwhile True:\r\n sleep_for_the_night()",
            "correct_answer": "True",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3498,
            "material": "Control Structure",
            "instruction": "Given two strings A and B, construct a Python program to determine if B is a substring of A.",
            "question": "def is_substring(A, B): \r\n    if ___ in A: \r\n        return True \r\n    else: \r\n        return False",
            "correct_answer": "B",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3542,
            "material": "Control Structure",
            "instruction": "Optimize a Python function for maximum performance.",
            "question": "def reverse_string(s): \r\n    start = 0 \r\n    end = len(s) \r\n    string=\"\" \r\n\r\n    while ___ > 0: \r\n        string += s[end-1] \r\n        end -= 1\r\n\r\n    return string",
            "correct_answer": "end",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3595,
            "material": "Control Structure",
            "instruction": "Write a Python program that checks if a given number is prime.",
            "question": "def is_prime(n):\r\n    if ___ == 2 or n == 3:\r\n        return True\r\n    if n < 2 or n%2 == 0:\r\n        return False\r\n    if n < 9:\r\n        return True\r\n    if n%3 == 0:\r\n        return False\r\n\r\n    r = int(n**0.5)\r\n    f = 5\r\n    while f <= r:\r\n        if n%f == 0:\r\n            return False\r\n        if n % (f+2) == 0:\r\n            return False\r\n        f += 6\r\n    return True\r\n\r\nnum = 7\r\nprint(\"Is\", num, \"prime?: \", is_prime(num))",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3598,
            "material": "Control Structure",
            "instruction": "Develop a Python script for extracting data from a web page.",
            "question": "Properly functioning Python script for ___ data from a web page.",
            "correct_answer": "extracting",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3631,
            "material": "Control Structure",
            "instruction": "Edit the given Python program to use for loop instead of while loop.",
            "question": "for ___ in range(10):\r\n print(i)",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3665,
            "material": "Control Structure",
            "instruction": "Develop a program in Python for finding the factorial of a given number.",
            "question": "def factorial(n):\r\n    if ___ < 0:\r\n        return None\r\n    elif n == 0:\r\n        return 1\r\n    else:\r\n        result = 1\r\n        for i in range(1, n + 1):\r\n            result *= i\r\n        return result\r\n\r\nnum = 7\r\nprint('factorial of {} is {}'.format(num, factorial(num)))",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3678,
            "material": "Control Structure",
            "instruction": "Create a python program for the following purpose:",
            "question": "def count_even_pairs(N, A):\r\n    n = 0\r\n    for ___ in range(N):\r\n        for j in range(i+1,N):\r\n            if (A[i] + A[j]) % 2 == 0:\r\n                n += 1\r\n    return n",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3683,
            "material": "Control Structure",
            "instruction": "Optimize a code snippet in Python. The code snippet is a function for computing the factorial of a number.",
            "question": "def factorial(n):\r\n    if ___ == 0:\r\n        return 1\r\n    else:\r\n        result = 1\r\n        for i in range(1, n+1):\r\n            result *= i\r\n        return result",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3725,
            "material": "Control Structure",
            "instruction": "Write a function in Python that receives two positive integers and prints out all the numbers in the range of the two integers (inclusive), except for numbers divisible by three.",
            "question": "def print_numbers(lower_bound, upper_bound):\r\n for ___ in range(lower_bound, upper_bound+1):\r\n if num % 3 != 0:\r\n print(num)\r\n  \r\nprint_numbers(5, 15)",
            "correct_answer": "num",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3745,
            "material": "Control Structure",
            "instruction": "Create a Python program to detect if a number is a prime number.",
            "question": "def is_prime(x):\r\n    if ___ < 2:\r\n        return False\r\n    \r\n    for i in range(2, x):\r\n        if x % i == 0:\r\n            return False\r\n    return True",
            "correct_answer": "x",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3752,
            "material": "Control Structure",
            "instruction": "Create a program in Python that takes two lists and checks for common elements between them.",
            "question": "list1 = [1,2,3,4]\r\nlist2 = [3,4,5,6] \r\n\r\ndef check_common(list1, list2): \r\n    result = False\r\n    for ___ in list1: \r\n        for y in list2: \r\n            if x == y: \r\n                result = True\r\n                return result  \r\n    return result \r\n  \r\nprint(check_common(list1, list2))",
            "correct_answer": "x",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3753,
            "material": "Control Structure",
            "instruction": "Develop a python program that checks if a given word is consonant or not.",
            "question": "def is_consonant(word): \r\n    # List containing all consonants \r\n    consonants = [\"b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"t\",\"v\",\"x\",\"z\"] \r\n    for ___ in word: \r\n        if char in consonants: \r\n            return True\r\n    return False\r\n\r\n# Example\r\nprint (is_consonant(\"hello\")) # False",
            "correct_answer": "char",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3763,
            "material": "Control Structure",
            "instruction": "Create a Python algorithm to check if a given word exists in a dictionary.",
            "question": "# Function to test if ___ word exists in a dictionary \r\ndef wordExists(dictionary, word):\r\n    for key, value in dictionary.items():\r\n        if key == word:\r\n            return True\r\n    \r\n    return False\r\n\r\n# Main function\r\ndictionary = {\"hello\": \"greeting\", \"car\": \"vehicle\"}\r\nword = \"hello\"\r\nprint(wordExists(dictionary, word))",
            "correct_answer": "a",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3771,
            "material": "Control Structure",
            "instruction": "Generate a correct python program for solving the following problem",
            "question": "def find_pairs_with_sum(values, target):\r\n    indices_list = []\r\n    for ___ in range(len(values)):\r\n        x = target - values[i]\r\n        if x in values[i+1:]:\r\n            indices_list.extend([i, values.index(x)])\r\n    return indices_list",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3795,
            "material": "Control Structure",
            "instruction": "Tackle the task of optimizing a given Python program for faster execution.",
            "question": "# Program to find the sum of two numbers\r\ndef add_numbers(a, b):\r\n    # Use bitwise operators instead of normal arithmetic operations\r\n    # as they are much faster and more efficient \r\n    return a ^ b if ___ <= b else b ^ a if b <= a else a ^ b",
            "correct_answer": "a",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3809,
            "material": "Control Structure",
            "instruction": "Create a script in Python that checks a provided URL for a specific keyword within its content and outputs either a pass or fail result.",
            "question": "import requests\r\n\r\nurl = 'http://www.example.com'\r\nkeyword = 'success'\r\n\r\nr = requests.get(url)\r\nif ___ in r.text:\r\n print('Pass')\r\nelse:\r\n print('Fail')",
            "correct_answer": "keyword",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3811,
            "material": "Control Structure",
            "instruction": "Given two strings s and t, write a Python program to check if t is a substring of s.",
            "question": "def is_substring(s, t):\r\n    if ___ in s:\r\n        return True\r\n    else:\r\n        return False",
            "correct_answer": "t",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3822,
            "material": "Control Structure",
            "instruction": "Create a function in Python which takes in a number n and returns \"Fizz\" if the number is divisible by 3, \"Buzz\" if the number is divisible by 5, and \"FizzBuzz\" if the number is divisible by both 3 and 5.",
            "question": "def fizzbuzz(n):\r\n if ___ % 3 == 0 and n % 5 == 0:\r\n  return 'FizzBuzz'\r\n elif n % 3 == 0:\r\n  return 'Fizz'\r\n elif n % 5 == 0:\r\n  return 'Buzz'\r\n else:\r\n  return n",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3853,
            "material": "Control Structure",
            "instruction": "Build a function in Python for computing the Hamming Distance between two strings of equal length.",
            "question": "def hammingDistance(s1, s2): \r\n\r\n    # initialize with 0\r\n    distance = 0\r\n  \r\n    # Calculate the length of the string \r\n    length_str1 = len(s1) \r\n    # Compare adjacent characters and increment the count \r\n    # if ___ are not same \r\n    for i in range(length_str1): \r\n        if s1[i] != s2[i]: \r\n            distance += 1\r\n  \r\n    return distance",
            "correct_answer": "characters",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3940,
            "material": "Control Structure",
            "instruction": "Generate a Python script for a query to fetch data from a given MySQL table.",
            "question": "import mysql.connector\r\n\r\ndb = mysql.connector.connect(\r\n host=\"localhost\",\r\n user=\"root\",\r\n passwd=\"password\",\r\n database=\"dbname\"\r\n)\r\n\r\nmycursor = db.cursor()\r\n\r\nsql = \"SELECT product_id, name, price FROM Products\"\r\n\r\nmycursor.execute(sql)\r\n\r\nmyresult = mycursor.fetchall()\r\n\r\nfor ___ in myresult:\r\n  print(row)",
            "correct_answer": "row",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3975,
            "material": "Control Structure",
            "instruction": "Write a Python statement to check if a given number is within a given range",
            "question": "if ___ <= 3 <= 10:\r\n print('Number is within the range')\r\nelse:\r\n print('Number is not within the range')",
            "correct_answer": "0",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 3983,
            "material": "Control Structure",
            "instruction": "Design a for loop in Python which iterates over two given lists and prints their items in a orderly manner.",
            "question": "for ___, item2 in zip(list1, list2):\r\n    print(f\"{item1}: {item2}\")",
            "correct_answer": "item1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4041,
            "material": "Control Structure",
            "instruction": "Write a Python program that takes an integer as input and check if the number is prime or not.",
            "question": "def is_prime(n):\r\n    if ___ < 2: \r\n        return False\r\n\r\n    for i in range(2, int(n**0.5) + 1):  \r\n        if n % i == 0: \r\n            return False\r\n\r\n    return True",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4062,
            "material": "Control Structure",
            "instruction": "Write a Python program to check if a given number is divisible by 3 and 5 or not.",
            "question": "def check_divisible_3and5(num):\r\n    if (num % 3 == 0 and num % 5 == 0):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n# test given number\r\nnum = 10\r\nif ___(num):\r\n    print(\"%d is divisible by 3 and 5\" %num)\r\nelse:\r\n    print(\"%d is not divisible by 3 and 5\" %num)",
            "correct_answer": "check_divisible_3and5",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4067,
            "material": "Control Structure",
            "instruction": "Write a python function to compare two strings and return 1 if the strings are anagrams, 0 if not.",
            "question": "def is_anagram(string1, string2):\r\n    string1 = sorted(string1.replace(\" \", \"\").lower())\r\n    string2 = sorted(string2.replace(\" \", \"\").lower())\r\n    \r\n    if ___ == string2:\r\n        return 1\r\n    else:\r\n        return 0",
            "correct_answer": "string1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4116,
            "material": "Control Structure",
            "instruction": "Write a Python program to check if two strings are a rotation of each other.",
            "question": "if ___(string1) == len(string2) and string1 in string2*2:\r\n    print(\"The strings are a rotation of each other\")\r\nelse:\r\n    print(\"The strings are not a rotation of each other\")",
            "correct_answer": "len",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4120,
            "material": "Control Structure",
            "instruction": "Analyze a given Python code and write a function that checks if a given number is prime.",
            "question": "def primeCheck(num):\r\n if ___ > 1:\r\n for i in range(2, num):\r\n  if (num % i) == 0:\r\n   return False\r\n else:\r\n  return False\r\n return True",
            "correct_answer": "num",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4129,
            "material": "Control Structure",
            "instruction": "Develop a python program for predicting a movie's rating based on its reviews.",
            "question": "#Code\r\nnum_reviews = len(reviews)\r\nnum_positive_reviews = 0\r\n\r\nfor ___ in reviews:\r\n    if 'great' in review:\r\n        num_positive_reviews +=1\r\n\r\nrating = num_positive_reviews / num_reviews #Rating  \r\nprint(rating) #Prints the rating",
            "correct_answer": "review",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4161,
            "material": "Control Structure",
            "instruction": "Create a program in Python for ASCII conversion.",
            "question": "def ascii_conversion(string):\r\n return ''.join([f'{ord(c):08b}' for ___ in string])\r\n\r\nprint(ascii_conversion(\"Hello World\"))",
            "correct_answer": "c",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4168,
            "material": "Control Structure",
            "instruction": "Develop an API in Python that takes in two strings and returns true if they are anagrams, and false otherwise.",
            "question": "# anagram checker\r\n\r\ndef check_anagrams(str1, str2):\r\n    if ___(str1) == sorted(str2):\r\n        return True \r\n    else: \r\n        return False \r\n  \r\n# Driver code \r\nstr1 = \"listen\"\r\nstr2 = \"silent\"\r\n\r\nif(check_anagrams(str1, str2)): \r\n    print(\"The strings are anagrams.\")  \r\nelse: \r\n    print(\"The strings aren't anagrams.\")",
            "correct_answer": "sorted",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4183,
            "material": "Control Structure",
            "instruction": "Write a Python code to check if the given number is prime.",
            "question": "def is_prime(n):\r\n    if ___ <= 1:\r\n        return False\r\n    for i in range(2, n//2 + 1):\r\n        if n % i == 0:\r\n            return False\r\n    return True\r\n\r\nif is_prime(23):\r\n    print('The given number is prime')\r\nelse:\r\n    print('The given number is not prime')",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4198,
            "material": "Control Structure",
            "instruction": "Can you write a Python function to determine if a supplied number is prime?",
            "question": "def is_prime(num):\r\n    \"\"\"Check if ___ given number is prime.\r\n\r\n    Args:\r\n        num (int): A number to check\r\n\r\n    Returns:\r\n        bool: True if num is prime, False otherwise.\r\n    \"\"\"\r\n\r\n    if num < 2: \r\n        return False\r\n\r\n    for i in range(2, num):\r\n        if (num % i) == 0:\r\n            return False\r\n    return True\r\n\r\nnum = 20\r\nresult = is_prime(num)\r\nprint(f\"Is {num} prime? {result}\")",
            "correct_answer": "the",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4199,
            "material": "Control Structure",
            "instruction": "Create a Python Flask application for solving a linear equation. The application should have an endpoint that receives an equation as input and returns the solution as output.",
            "question": "from flask import Flask, request\r\nfrom sympy import *\r\n\r\napp = Flask(name)\r\nx = Symbol('x')\r\n\r\n@app.route('/solve', methods=['POST'])\r\ndef solve():\r\n equation = request.json['equation']\r\n solution = solve(equation, x)\r\n return {'solution': str(solution[0])}\r\n\r\nif ___ == 'main':\r\n app.run(debug=True)",
            "correct_answer": "name",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4213,
            "material": "Control Structure",
            "instruction": "Generate an automated unit test in Python for the following function",
            "question": "import unittest\r\n\r\nclass TestAddition(unittest.TestCase):\r\n\r\n    def test_addition(self):\r\n        self.assertEqual(add(1, 1), 2)\r\n        self.assertEqual(add(2, 5), 7)\r\n        self.assertEqual(add(3, 3), 6)\r\n        self.assertEqual(add(-8, 6), -2)\r\n        self.assertEqual(add(-3, -3), -6)\r\n\r\nif ___ == '__main__':\r\n    unittest.main()",
            "correct_answer": "__name__",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4259,
            "material": "Control Structure",
            "instruction": "Generate a Python implementation for these pseudocode.",
            "question": "def print_product_names():\r\n    unscanned_barcodes = [barcodes] #list of unscanned barcodes\r\n\r\n    while ___(unscanned_barcodes) > 0:\r\n        barcode = unscanned_barcodes.pop(0)\r\n        product_name = scan_barcode(barcode) #function that returns product name\r\n        print(product_name)",
            "correct_answer": "len",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4285,
            "material": "Control Structure",
            "instruction": "Write a Python program to modify a given dataset for a specific task.",
            "question": "def modify_data(dataset, task):\r\nmodified_data = []\r\n if ___ == \"filter age >18\":\r\n for d in dataset:\r\n if d['age'] > 18:\r\n modified_data.append(d)\r\n return modified_data",
            "correct_answer": "task",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4310,
            "material": "Control Structure",
            "instruction": "Create a function that takes two strings as its inputs and returns true if one of the two strings is a substring of the other.",
            "question": "def is_substring(string1, string2):\r\n    for ___ in range(len(string1)):\r\n        for j in range(len(string2)):\r\n            if string1[i] == string2[j]:\r\n                return True\r\n    return False\r\n\r\nresult = is_substring(\"python\", \"java\")\r\nprint(result)",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4319,
            "material": "Control Structure",
            "instruction": "Enhance the following Python code for saving a webpage to a local directory.",
            "question": "import urllib.request\r\nfrom urllib.parse import urlparse\r\nimport os\r\n\r\ndef save_webpage(url, path):\r\n parsed_url = urlparse(url)\r\n path = os.path.join(path, parsed_url.netloc + parsed_url.path)\r\n if ___ os.path.exists(os.path.dirname(path)):\r\n os.makedirs(os.path.dirname(path))\r\n urllib.request.urlretrieve(url, path)",
            "correct_answer": "not",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4351,
            "material": "Control Structure",
            "instruction": "Design a function in Python to test if the given number is a prime or not.",
            "question": "def is_prime(n):\r\n if ___ <= 1:\r\n return False\r\n\r\n for i in range(2, n):\r\n if n % i == 0:\r\n return False\r\n\r\n return True\r\n\r\nis_prime(13) # True",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4373,
            "material": "Control Structure",
            "instruction": "Given two strings, write a Python program to check if one is an anagram of other.",
            "question": "def isAnagram(str1, str2):\r\n    str1_sorted = sorted(str1)\r\n    str2_sorted = sorted(str2)\r\n    # Compare sorted strings\r\n    if ___ == str2_sorted:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nstr1 = \"listen\"\r\nstr2 = \"silent\"\r\n\r\nprint(isAnagram(str1, str2))",
            "correct_answer": "str1_sorted",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4395,
            "material": "Control Structure",
            "instruction": "Edit the code to make it in a Python program to check if a number is divisible by 5 and 11.",
            "question": "def isDivisible(num): \r\n    if ___ % 5 == 0 and num % 11 == 0:\r\n        print(\"Number is divisible by 5 and 11\") \r\n    else:\r\n        print(\"Number is not divisible by 5 and 11\")",
            "correct_answer": "num",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4426,
            "material": "Control Structure",
            "instruction": "Create a Python script to fill empty cells in a Pandas DataFrame with the median value for that column.",
            "question": "import pandas as pd\r\n\r\n# Replace empty cells with the median value of the column\r\ndf = df.fillna(df.median())\r\n\r\n# Check if ___ null values have been replaced\r\nprint(df.isnull().sum())",
            "correct_answer": "the",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4435,
            "material": "Control Structure",
            "instruction": "Create a Python program for finding all combinations of numbers that equal a given target number.",
            "question": "def find_combos(target):\r\n combos = []\r\n \r\n for ___ in range(int(target/2)+1):\r\n # increments of two to avoid duplicate results\r\n for j in range(i, int(target/2)+1, 2):\r\n if i+j == target:\r\n combos.append((i,j))\r\n \r\n return combos\r\n\r\ncombos = find_combos(10)\r\nprint(combos)",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4482,
            "material": "Control Structure",
            "instruction": "How would you design a Python program that checks if a number is divisible by three?",
            "question": "def is_divisible(n):\r\n    if ___ % 3 == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nnum = 45\r\ncheck_divisible = is_divisible(num)\r\n\r\nif check_divisible:\r\n    print(\"Number is divisible by three.\")\r\nelse:\r\n    print(\"Number is not divisible by three.\")",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4511,
            "material": "Control Structure",
            "instruction": "Optimize the following python code to speed up execution time:\r\n\r\narr = [2, 5, 3, 1]\r\nfor i in range(len(arr)):\r\n  for j in range(i + 1, len(arr)):\r\n    if arr[i] > arr[j]:\r\n       arr[i], arr[j] = arr[j], arr[i]",
            "question": "arr = [2, 5, 3, 1]\r\n\r\n# using Python's built in `sorted` function\r\narr = sorted(arr)\r\n\r\n# using the Bubble Sort algorithm\r\nfor ___ in range(len(arr) - 1):\r\n for j in range(len(arr) - 1 - i):\r\n  if arr[j] > arr[j + 1]:\r\n   arr[j], arr[j + 1] = arr[j + 1], arr[j]",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4522,
            "material": "Control Structure",
            "instruction": "Optimize a Python function for computing Fibonacci numbers.",
            "question": "def fibonacci(n): \r\n    if ___ <= 1: \r\n        return n \r\n    else:\r\n        fibonacci_num=[0,1] #creating a fibonacci list\r\n        i=2\r\n        while i<=n:\r\n            fibonacci_num.append(fibonacci_num[i-1]+fibonacci_num[i-2])\r\n            i+=1\r\n        return fibonacci_num[n]",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4535,
            "material": "Control Structure",
            "instruction": "Create a python script to download a complete web page and cache it for faster offline access.",
            "question": "import requests\r\nimport os\r\n\r\nurl = 'https://www.example.com/page1'\r\n\r\nif ___ os.path.exists('cache'):\r\n os.makedirs('cache')\r\n\r\nr = requests.get(url)\r\n\r\nfilename = url.rsplit('/', 1)[-1]\r\nfile_path = os.path.join('cache', filename)\r\n\r\nwith open(file_path, 'wb') as f:\r\n f.write(r.content)",
            "correct_answer": "not",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4565,
            "material": "Control Structure",
            "instruction": "Write an algorithm for linear search in Python.",
            "question": "def linear_search(list, n):\r\n  i = 0\r\n  while ___ < len(list):\r\n    if list[i] == n:\r\n      return i\r\n    i = i+1\r\n  return -1\r\n\r\nlist = [1, 3, 8, 10, 15, 20, 25]\r\nn = 15\r\nindex = linear_search(list, n)\r\nprint(\"Number found at index:\", index)",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4655,
            "material": "Control Structure",
            "instruction": "Write a Python program to generate recurrence equation for a given sequence and initial condition.",
            "question": "def generate_recurrence(sequence, initial_condition): \r\n if ___(sequence) <= 1: \r\n return initial_condition \r\n \r\n a_i = sequence[-1] \r\n a_i_1 = sequence[-2] \r\n recurrence = a_i + initial_condition - a_i_1 \r\n return recurrence\r\n\r\nresult = generate_recurrence([2, 4, 6, 8], 2)\r\nprint(result)",
            "correct_answer": "len",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4698,
            "material": "Control Structure",
            "instruction": "Create a Python program to check if a number is an Armstrong number.",
            "question": "def isArmstrong(number): \r\n\t\r\n\tnum = number \r\n\tlength = len(str(number)) \r\n\tsum_of_the_power_of_digits = 0 \r\n\r\n\twhile ___ > 0:\r\n\t\trem = num % 10 \r\n\t\tsum_of_the_power_of_digits = sum_of_the_power_of_digits +  np.power(rem, length)\r\n\t\tnum //= 10\r\n\t\t\r\n\tif (sum_of_the_power_of_digits == number) : \r\n\t\treturn True \r\n\telse : \r\n\t\treturn False",
            "correct_answer": "num",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4752,
            "material": "Control Structure",
            "instruction": "Design an algorithm in Python to check if an integer is even or odd.",
            "question": "def check_number(n):\r\n    if ___%2==0:\r\n        return \"Even\"\r\n    else:\r\n        return \"Odd\"\r\n\r\ncheck_number(5) \r\n# Output: Odd",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4848,
            "material": "Control Structure",
            "instruction": "Generate a python code for an algorithmic solution for the following problem:",
            "question": "def is_sum_possible(A, X): \r\n    n = len(A) \r\n    # create an empty hash set\r\n    s = set() \r\n  \r\n    for ___ in range(n): \r\n        temp = X - A[i]  \r\n        if temp >= 0 and temp in s: \r\n            return True \r\n        s.add(A[i])  \r\n  \r\n    return False",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4902,
            "material": "Control Structure",
            "instruction": "Build a Python generator that yields the next power of 2 for a given number.",
            "question": "def nextPowerOf2Generator(n): \r\n    power = 1\r\n    while ___: \r\n        pow_val = power * 2\r\n        yield pow_val \r\n        power = pow_val \r\n  \r\nn = 4\r\n\r\nfor i in nextPowerOf2Generator(n):\r\n    if i > n:\r\n        print(i)\r\n        break",
            "correct_answer": "True",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4916,
            "material": "Control Structure",
            "instruction": "Generate a Python program that takes an input of a number and checks if it is prime.",
            "question": "def is_prime(num):\r\n    if ___ == 2:\r\n        return True\r\n    elif num < 2 or not all(num % i for i in range(2, num)):\r\n        return False\r\n    return True\r\n\r\nnum = 7\r\nresult = is_prime(num)\r\nprint(result)",
            "correct_answer": "num",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 4973,
            "material": "Control Structure",
            "instruction": "Create a Python script which inputs a sentence and performs POS tagging and letter count for the text using NLTK library.",
            "question": "import nltk\r\n\r\nsentence = 'This is an example sentence.'\r\nwords = nltk.word_tokenize(sentence)\r\ntagged_words = nltk.pos_tag(words)\r\n\r\nletter_count = 0\r\nfor ___ in words:\r\n letter_count += len(word)\r\n\r\nprint('POS Tags: ', tagged_words)\r\nprint('Letter Count: ', letter_count)",
            "correct_answer": "word",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5034,
            "material": "Control Structure",
            "instruction": "Write a Python program to automatically generate the HTML for a table from a dictionary of data.",
            "question": "html_str = '<table><tr>'\r\n\r\nfor ___ in d:\r\n html_str += '<th>{}</th>'.format(key)\r\nhtml_str += '</tr>'\r\n\r\nfor i in range(len(d['col1'])):\r\n html_str += '<tr>'\r\n for key in d:\r\n html_str += '<td>{}</td>'.format(d[key][i])\r\n html_str += '</tr>'\r\n\r\nhtml_str += '</table>'\r\n\r\nprint(html_str)",
            "correct_answer": "key",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5041,
            "material": "Control Structure",
            "instruction": "Create a block of code for a Python program to generate a multiplication table for a given number.",
            "question": "# Create a multiplication table for ___ given number\r\nnum = 6\r\n\r\n# Loop to generate the table\r\nfor i in range(1, 11):\r\n  print(f'{num} x {i} = {num * i}')",
            "correct_answer": "a",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5047,
            "material": "Control Structure",
            "instruction": "Create a web application in Python that displays a directory structure tree for a given path.",
            "question": "import os\r\n\r\ndef make_tree(path): \r\n files = os.listdir(path) \r\n for ___ in files: \r\n     full_path = os.path.join(path, f) \r\n     if os.path.isdir(full_path): \r\n         print(f) \r\n         make_tree(full_path) \r\n     else: \r\n         print(\" -\" + f) \r\n  \r\npath = '/home/myUser/myFolder' \r\nmake_tree(path)",
            "correct_answer": "f",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5070,
            "material": "Control Structure",
            "instruction": "Write a Python code to determine if the user has enough money in the account for a given transaction.",
            "question": "def enough_balance(balance, amount):\r\n    if ___ > balance:\r\n        return False\r\n    return True\r\n\r\nif __name__ == '__main__':\r\n    print(enough_balance(balance, amount))",
            "correct_answer": "amount",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5080,
            "material": "Control Structure",
            "instruction": "Optimize the python code below for memory efficiency.",
            "question": "my_list = [i**2 for ___ in range(20)]",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5089,
            "material": "Control Structure",
            "instruction": "Rewrite the following python code to be more concise while still producing the same output.",
            "question": "for ___ in range(10):\r\n print(\"------------\\n\"*10)",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5097,
            "material": "Control Structure",
            "instruction": "Use the inputs provided, write Python code to check if two integers are equal.",
            "question": "if ___(10) == int(10):\r\n    print(\"The two integers are equal\")\r\nelse:\r\n    print(\"The two integers are not equal\")",
            "correct_answer": "int",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5106,
            "material": "Control Structure",
            "instruction": "Generate a Python program that can verify if a given sentence is correct or misspelled.",
            "question": "import re\r\n\r\ndef spell_check(sentence):\r\n  words = re.findall(r'\\w+', sentence)\r\n  for ___ in words:\r\n    if not word.lower() in dict:\r\n        return False\r\n  return True\r\n\r\nsentence = \"This is my new computer\"\r\nresult = spell_check(sentence)\r\nif result:\r\n    print('Correct spelling')\r\nelse:\r\n    print('Incorrect spelling')",
            "correct_answer": "word",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5222,
            "material": "Control Structure",
            "instruction": "Write a Python code snippet for comparing two strings regardless of their case. You should use regular expressions.",
            "question": "import re\r\n\r\nstring1 = \"Hello\"\r\nstring2 = \"heLLo\"\r\n\r\nif ___.search(string1.lower(), string2.lower()):\r\n print(\"Strings are equal regardless of case.\")",
            "correct_answer": "re",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5229,
            "material": "Control Structure",
            "instruction": "Code an algorithm in Python to check if two given sets are equal.",
            "question": "def is_equal(A, B):\r\n    if ___(A) != len(B):\r\n        return False\r\n    for el in A:\r\n        if el not in B:\r\n            return False\r\n    return True",
            "correct_answer": "len",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5231,
            "material": "Control Structure",
            "instruction": "Given two strings s and t, create a new Python function to check if s is an anagram of t.",
            "question": "def is_anagram(s, t):\r\n s_list = list(s)\r\n t_list = list(t)\r\n s_list.sort()\r\n t_list.sort()\r\n if ___ == t_list:\r\n return True\r\n else:\r\n return False",
            "correct_answer": "s_list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5255,
            "material": "Control Structure",
            "instruction": "Create a Python script that takes a number and prints the multiplication table for that number.",
            "question": "num = 4 # Take input\r\n  \r\n# To take input from the user \r\n# num = int(input(\"Display multiplication table of? \")) \r\n  \r\n# Iterate 10 times from i = 1 to 10 \r\nfor ___ in range(1, 11): \r\n   print(num, 'x', i, '=', num*i)",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5280,
            "material": "Control Structure",
            "instruction": "Write a Python program that uses a while loop to calculate a Fibonacci sequence up to the given upper limit.",
            "question": "upper_limit = 10\r\n\r\nfibonacci_sequence = [0, 1]\r\n\r\na = 0\r\nb = 1\r\n\r\nwhile ___ <= upper_limit:\r\n c = a + b\r\n a = b\r\n b = c\r\n fibonacci_sequence.append(b)\r\n\r\nprint(fibonacci_sequence) # Output: [0, 1, 1, 2, 3, 5, 8, 13]",
            "correct_answer": "b",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5384,
            "material": "Control Structure",
            "instruction": "Write a Python program to check if a number is prime by eliminating the multiples of all numbers from 2 to the square root of the number.",
            "question": "import math\r\n\r\ndef is_prime(n):\r\n    for ___ in range(2, int(math.sqrt(n))+1):\r\n        if n % i == 0:\r\n            return False\r\n    return True\r\n\r\nprint(is_prime(n))",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5393,
            "material": "Control Structure",
            "instruction": "Optimize this while loop in the given Python code.",
            "question": "i = 0\r\nwhile ___ < 5:\r\n    print(i)\r\n    i += 1",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5403,
            "material": "Control Structure",
            "instruction": "Modify the following code in Python to check if a number is prime or not.",
            "question": "def checkPrime(n):\r\n    if ___ <= 1:\r\n        return False\r\n\r\n    for i in range(2,n):\r\n        if n % i == 0:\r\n            return False\r\n    \r\n    return True",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5512,
            "material": "Control Structure",
            "instruction": "Write a function in Python that takes two strings as input and return true if one is a rotation of the other.",
            "question": "def is_rotation(s1, s2):\r\n  # edge case check\r\n  if ___(s1) != len(s2):\r\n    return False\r\n\r\n  # concatenate s2 to itself\r\n  concat_s2 = s2 + s2\r\n\r\n  #search s1 in concat_s2\r\n  return s1 in concat_s2",
            "correct_answer": "len",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5520,
            "material": "Control Structure",
            "instruction": "Create a Python function for computing the Factorial of a number.",
            "question": "def factorial(n):\r\n   if ___ == 0:\r\n      return 1\r\n   else:\r\n      return n * factorial(n-1)\r\n\r\nprint(factorial(6))",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5551,
            "material": "Control Structure",
            "instruction": "Create a Python function that uses a given dictionary to calculate the sum of all the values for each key.",
            "question": "def sum_dict_values(dict):\r\n  result = 0\r\n  for ___ in dict:\r\n    result += dict[key]\r\n\r\n  return result\r\n\r\ndict = {'a': 4, 'b': 2, 'c': 1}\r\nsum = sum_dict_values(dict)\r\nprint(sum) # 7",
            "correct_answer": "key",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5620,
            "material": "Control Structure",
            "instruction": "Develop an algorithm in Python for parsing a given text and counting the number of occurrences of a given word.",
            "question": "def parse_text(text, word):\r\n  word_count = 0\r\n  words = text.split()\r\n  for ___ in words:\r\n    if w == word:\r\n      word_count += 1\r\n  return word_count\r\n  \r\ntext = 'This is an example text.'\r\nword = 'example'\r\nword_count = parse_text(text, word)\r\nprint('The word \"{}\" appears {} times in the text.'.format(word, word_count))",
            "correct_answer": "w",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5742,
            "material": "Control Structure",
            "instruction": "Implement a solutions for the Tower of Hanoi problem using Python.",
            "question": "def hanoi(n, source, aux, dest):\r\n if ___ == 1:\r\n  print('Move disk 1 from {0} to {1}'.format(source, dest))\r\n else:\r\n  hanoi(n-1, source, dest, aux)\r\n  print('Move disk {0} from {1} to {2}'.format(n, source, dest))\r\n  hanoi(n-1, aux, source, dest)\r\n\r\n# Driver program\r\nn = 4\r\nhanoi(n, 'a', 'b', 'c')",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5781,
            "material": "Control Structure",
            "instruction": "Generate a program in Python for a simple chatbot. The program should accept a user input and output a response using the input provided.",
            "question": "user_input = input(\"User: \")\r\n\r\nif ___ == \"Hello\":\r\n print(\"Chatbot: Hi there!\")\r\nelse:\r\n print(\"Chatbot: I'm not sure what you mean, please try again.\")",
            "correct_answer": "user_input",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5796,
            "material": "Control Structure",
            "instruction": "You need to optimize a given Python code for improving speed.",
            "question": "def find_corresponding_nums(nums1, nums2):\r\n    result = []\r\n    seen = set(nums2) \r\n    for ___ in nums1:\r\n        if num1 in seen:\r\n            result.append(num1)\r\n    return result",
            "correct_answer": "num1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5804,
            "material": "Control Structure",
            "instruction": "Generate a batch of X random numbers in Python using a for loop.",
            "question": "import random\r\nnumbers = []\r\n\r\nfor ___ in range(10):\r\n number = random.randint(1, 100)\r\n numbers.append(number)\r\n \r\nprint(numbers)",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5806,
            "material": "Control Structure",
            "instruction": "Optimize this Python code for speed.",
            "question": "lst = list(range(100))\r\n \r\nfor ___ in lst:\r\n    print(i)",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5828,
            "material": "Control Structure",
            "instruction": "Write a Python program to optimize the given code for speed and reduce memory usage.",
            "question": "def func(a):\r\n    result = [x + 5 for ___ in a]\r\n    return result",
            "correct_answer": "x",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5853,
            "material": "Control Structure",
            "instruction": "Edit the following Python code to include a while loop:",
            "question": "a = 0\r\nb = 0\r\n\r\nwhile ___ < 10:\r\n    a += 1\r\n    b = b + a\r\n\r\nprint(b)",
            "correct_answer": "a",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5941,
            "material": "Control Structure",
            "instruction": "Generate a function in Python that displays the Fibonacci sequence for a given value.",
            "question": "def fibonacci(n):\r\n a, b = 0, 1\r\n result = []\r\n \r\n while ___ < n:\r\n result.append(a)\r\n a, b = b, a + b\r\n\r\n return result\r\n\r\nprint(fibonacci(n))",
            "correct_answer": "a",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 5999,
            "material": "Control Structure",
            "instruction": "Write a function in Python that takes in two strings and returns true if both strings have the same letter counts.",
            "question": "def isPermutation(s1, s2):\r\n s1_dict = {}\r\n s2_dict = {}\r\n for ___ in s1:\r\n  if c in s1_dict:\r\n   s1_dict[c] += 1\r\n  else:\r\n   s1_dict[c] = 1\r\n for c in s2:\r\n  if c in s2_dict:\r\n   s2_dict[c] += 1\r\n  else:\r\n   s2_dict[c] = 1\r\n \r\n return s1_dict == s2_dict",
            "correct_answer": "c",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6002,
            "material": "Control Structure",
            "instruction": "Create a Python script to check if a given word or phrase is a palindrome.",
            "question": "def is_palindrome(word):\r\n    word_list = list(word)\r\n    if ___ == word_list[::-1]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nresult = is_palindrome('madam')\r\nprint(result)",
            "correct_answer": "word_list",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6032,
            "material": "Control Structure",
            "instruction": "Implement an algorithm in Python to check for palindromes.",
            "question": "def isPalindrome(text):\r\n    n = len(text)\r\n    for ___ in range(n // 2):\r\n        if text[i] != text[n - i - 1]:\r\n            return False\r\n    return True\r\n\r\nprint(isPalindrome('noon'))",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6037,
            "material": "Control Structure",
            "instruction": "Optimize a given code in Python for higher efficiency.",
            "question": "def power(base, exponent):\r\n    answer = 1\r\n    while ___ > 0:\r\n        if exponent & 1:\r\n            answer *= base\r\n        base *= base\r\n        exponent >>= 1\r\n    return answer",
            "correct_answer": "exponent",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6049,
            "material": "Control Structure",
            "instruction": "Develop an algorithm in Python for generating the nth Fibonacci number.",
            "question": "def fibonacci(n):\r\n # base case\r\n if ___ == 1:\r\n  return 0\r\n elif n == 2:\r\n  return 1\r\n # recursive case\r\n else:\r\n  return fibonacci(n-1) + fibonacci(n-2)\r\n\r\n# testing\r\nprint(fibonacci(5)) # Output: 3",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6052,
            "material": "Control Structure",
            "instruction": "Generate a Python script for searching for a pattern in a given text.",
            "question": "import re\r\ntext = \"The cat jumped over the fence\"\r\npattern = \"cat\"\r\nmatch = re.search(pattern, text)\r\nif ___:\r\n    print(\"Pattern found!\")",
            "correct_answer": "match",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6054,
            "material": "Control Structure",
            "instruction": "Optimize the following Python code for calculating the Fibonacci numbers up to n.",
            "question": "def fibonacci(n):\r\n # Initialize a memoization dictionary\r\n memo = {\r\n 0: 0,\r\n 1: 1\r\n }\r\n \r\n # If n is in the memoization dictionary, return the value\r\n if ___ in memo:\r\n return memo[n]\r\n \r\n # Calculate the Fibonacci number\r\n if n > 1:\r\n memo[n] = fibonacci(n-1) + fibonacci(n-2)\r\n \r\n return memo[n]\r\n\r\nprint(fibonacci(10))",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6058,
            "material": "Control Structure",
            "instruction": "A number is said to be abundant if its proper divisors sum to more than the number itself. Create a python program to identify if a given number is abundant or not.",
            "question": "def is_abundant(num):\r\n    divisor_sum = 0\r\n    for ___ in range(1, int(num/2)+1):\r\n        if num % i == 0:\r\n            divisor_sum += i\r\n\r\n    return divisor_sum > num\r\n\r\nnum = 21\r\n\r\nif is_abundant(num):\r\n    print(f\"{num} is abundant\")\r\nelse:\r\n    print(f\"{num} is not abundant\")",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6086,
            "material": "Control Structure",
            "instruction": "Create a python program for checking whether a number is a palindrome or not.",
            "question": "def is_palindrome(num):\r\n  rev = 0\r\n  tmp = num\r\n  \r\n  while ___ > 0:\r\n    rev = rev * 10\r\n    rev = rev + (tmp % 10)\r\n    tmp = tmp // 10\r\n\r\n  return num == rev\r\n  \r\nnum = 12321\r\nif (is_palindrome(num)):\r\n  print(\"Number is a palindrome\")\r\nelse:\r\n  print(\"Number is not a palindrome\")",
            "correct_answer": "tmp",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6105,
            "material": "Control Structure",
            "instruction": "Optimize the Python code snippet (below) for performance efficiency.",
            "question": "def process_data(data):\r\n    processed_data = []\r\n    for ___ in data:\r\n        if (item % 10) == 0:\r\n            processed_data.append(item)\r\n    return processed_data\r\n\r\ndef process_data_fast(data):\r\n    return [item for item in data if item % 10 == 0]",
            "correct_answer": "item",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6139,
            "material": "Control Structure",
            "instruction": "Create a python program for searching for a word in a text document.",
            "question": "import re\r\n\r\ntext = 'The quick brown fox jumped over the lazy dog'\r\nsearch = 'fox'\r\n\r\nresult = re.findall(search, text)\r\n\r\nif ___:\r\n    print('Found!');\r\nelse:\r\n    print('Not Found!')",
            "correct_answer": "result",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6165,
            "material": "Control Structure",
            "instruction": "Write a function in Python to check if an integer is prime or not.",
            "question": "def is_prime(number):\r\n  if ___ < 2:\r\n    return False\r\n  else:\r\n    for x in range(2, number):\r\n      if number % x == 0:\r\n        return False\r\n    return True\r\n\r\nn = 37\r\nprint (is_prime(n)) # Output: True",
            "correct_answer": "number",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6244,
            "material": "Control Structure",
            "instruction": "Create a Python program to calculate the grade for a student.",
            "question": "Maths = 85\r\nEnglish = 70\r\nScience = 90\r\n\r\n# Calculate the average \r\naverage = (Maths + English + Science) / 3\r\n\r\n# Check the grade\r\nif ___ >= 80:\r\n    grade = 'A'\r\nelif average >= 70:\r\n    grade = 'B'\r\nelif average >= 60:\r\n    grade = 'C'\r\nelif average >= 50:\r\n    grade = 'D'\r\nelse:\r\n    grade = 'F'\r\n\r\n# Print the grade\r\nprint(grade)",
            "correct_answer": "average",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6263,
            "material": "Control Structure",
            "instruction": "Create a Python program that prints out a message if a given number is divisible by 7.",
            "question": "num = 49\r\n\r\nif ___ % 7 == 0:\r\n    print(\"The number %d is divisible by 7!\" %num)",
            "correct_answer": "num",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6290,
            "material": "Control Structure",
            "instruction": "Develop an algorithm using Python that determines if a number is a prime number or not.",
            "question": "def is_prime(n):\r\n    if ___ <= 1: \r\n        return False\r\n    for i in range(2, n): \r\n        if n % i == 0: \r\n            return False\r\n    return True",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6309,
            "material": "Control Structure",
            "instruction": "Optimize the following Python code for runtime and memory performance.",
            "question": "def factorial(n):\r\n    if ___ == 0:\r\n        return 1\r\n\r\n    res = 1\r\n    for i in range(2, n+1):\r\n        res *= i\r\n    return res",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6317,
            "material": "Control Structure",
            "instruction": "Create a Python function to check if a given number is abundant or not. An abundant number is a number which is less than the sum of its proper divisors.",
            "question": "def is_abundant(number):\r\n    sum = 0\r\n    for ___ in range(1, number):\r\n        if number % i == 0:\r\n            sum += i\r\n    return sum > number",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6330,
            "material": "Control Structure",
            "instruction": "Create a program in Python for finding the greatest common divisor of two numbers.",
            "question": "def gcd(a, b):\r\n    while ___ != 0:\r\n        temp = a\r\n        a = b\r\n        b = temp % b\r\n    return a\r\n\r\nprint(gcd(20,45))",
            "correct_answer": "b",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6339,
            "material": "Control Structure",
            "instruction": "Write a FOR loop to create a Pascal Triangle of size N in Python.",
            "question": "def pascal_triangle(n): \r\n    trow = [1] \r\n    y = [0] \r\n    for ___ in range(max(n,0)): \r\n        print(trow) \r\n        trow=[l+r for l,r in zip(trow+y, y+trow)] \r\n  \r\n# Driver program to test the above function \r\nn = 5\r\npascal_triangle(n)",
            "correct_answer": "x",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6349,
            "material": "Control Structure",
            "instruction": "Design an algorithm in Python for linear search.",
            "question": "def linear_search(arr, target):    \r\n    for ___ in range(len(arr)):\r\n        if arr[i] == target:\r\n            return i\r\n    return -1",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6379,
            "material": "Control Structure",
            "instruction": "Write a Python program for a program that checks if two strings are palindromes.",
            "question": "def is_palindrome(str1, str2):\r\n # Reverse str1\r\n reverse_str1 = str1[::-1]\r\n\r\n # Check if ___ is the same as the reversed version of str2\r\n if reverse_str1 == str2:\r\n return True\r\n else:\r\n return False\r\n\r\n# Sample input\r\nstr1 = 'radar'\r\nstr2 = 'dad'\r\n\r\n# Check if the strings are palindromes\r\nprint(is_palindrome(str1, str2)) # Output: True",
            "correct_answer": "str1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6482,
            "material": "Control Structure",
            "instruction": "Create a regex pattern that matches two different words and prints out the second word if found.",
            "question": "pattern = r\"learn (Python|Java) (\\w+)\" \r\nmatch = re.search(pattern, text) \r\nif ___: \r\n    print(match.group(2)) # Prints \"now\" or \"later\"",
            "correct_answer": "match",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6521,
            "material": "Control Structure",
            "instruction": "Create a function in Python to determine if a number is divisible by another number.",
            "question": "def isDivisible(num1, num2):\r\n    # check if ___ is divisible by num2\r\n    if (num1 % num2) == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nnum1 = 6\r\nnum2 = 3\r\n\r\nresult = isDivisible(num1, num2)\r\nprint(result)",
            "correct_answer": "num1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6575,
            "material": "Control Structure",
            "instruction": "Modify the following Python code for calculating the factorial of a number.",
            "question": "def factorial(n):\r\n    if ___ == 0:\r\n        return 1\r\n    else:\r\n        fact = 1\r\n        for i in range(1,n+1):\r\n            fact = fact*i\r\n        return fact",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6585,
            "material": "Control Structure",
            "instruction": "Optimize the following Python code for improved performance.",
            "question": "def factorial(n):\r\n fact = 1\r\n for ___ in range(1, n+1):\r\n   fact *= i\r\n  return fact",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6589,
            "material": "Control Structure",
            "instruction": "Create a Python program for extracting text from an online book.",
            "question": "import requests\r\nfrom bs4 import BeautifulSoup\r\n\r\n# Input web address of the book\r\nurl = 'https://www.example.com/book.html'\r\n\r\n# Download the page\r\npage = requests.get(url)\r\n\r\n# Parse the HTML\r\nsoup = BeautifulSoup(page.content, 'html.parser')\r\n\r\n# Extract the text\r\ntext = soup.find_all('p')\r\nfor ___ in text:\r\n print(p.text)",
            "correct_answer": "p",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6593,
            "material": "Control Structure",
            "instruction": "Design a python class for a shopping cart.",
            "question": "class ShoppingCart:\r\n    def __init__(self):\r\n        self.items = []\r\n    \r\n    def add_item(self, item):\r\n        self.items.append(item)\r\n    \r\n    def remove_item(self, item):\r\n        if ___ in self.items:\r\n            self.items.remove(item)\r\n    \r\n    def get_total_amount(self):\r\n        total_amount = 0\r\n        for item in self.items:\r\n            total_amount += item.price\r\n        return total_amount",
            "correct_answer": "item",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6603,
            "material": "Control Structure",
            "instruction": "Construct a function in Python to compare the two given dictionaries and return true if both of them contains the same elements.",
            "question": "def compare_dicts(dict1, dict2):\r\n  # Iterate through keys in both dictionaries and compare values\r\n  for ___, value in dict1.items():\r\n    if key not in dict2 or dict2[key] != value:\r\n      return False\r\n \r\n  # If all elements matched\r\n  return True",
            "correct_answer": "key",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6683,
            "material": "Control Structure",
            "instruction": "Write a Python program to compare two dictionaries to check if they are equal.",
            "question": "def compare_dicts(dict1, dict2):\r\n    if ___ == dict2:\r\n        return True\r\n    return False\r\n\r\nresult = compare_dicts(d1, d2)\r\nprint(result)",
            "correct_answer": "dict1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6687,
            "material": "Control Structure",
            "instruction": "Offer a suggestion for increasing the performance of the following Python Script",
            "question": "def function(arg):\r\n    for ___ in arg:\r\n        print(i)",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6701,
            "material": "Control Structure",
            "instruction": "You need to write a Python program for computing the factorial of a number.",
            "question": "def factorial(num):\r\n    if ___ == 0:\r\n        return 1\r\n    else:\r\n        return num * factorial(num - 1)\r\n\r\nprint(factorial(5))",
            "correct_answer": "num",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6707,
            "material": "Control Structure",
            "instruction": "write a python program for its purpose",
            "question": "\"\"\"\r\nCompute the factorial of a given number\r\n\"\"\"\r\n\r\ndef factorial(n): \r\n\tif ___ == 1: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn n * factorial(n-1) \r\n\r\nif __name__ == '__main__': \r\n\tnum = int(input()) \r\n\tprint(factorial(num))",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6710,
            "material": "Control Structure",
            "instruction": "Compare two strings to check if they are anagrams or not in Python.",
            "question": "def is_anagram(w1, w2):\r\n    # Check if ___ are equal\r\n    if len(w1) == len(w2):\r\n        # Sort the strings\r\n        s1 = sorted(w1)\r\n        s2 = sorted(w2)\r\n        # Check if sorted strings are equal\r\n        if s1 == s2:\r\n            return True\r\n    return False\r\n\r\n# Example\r\nw1 = \"silent\"\r\nw2 = \"listen\"\r\n\r\nprint(is_anagram(w1, w2)) #Output: True",
            "correct_answer": "lengths",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6722,
            "material": "Control Structure",
            "instruction": "Code up a web scraper in Python for a particular website.",
            "question": "import requests\r\nfrom bs4 import BeautifulSoup\r\n\r\nurl = 'https://www.example.com'\r\npage = requests.get(url)\r\n\r\nsoup = BeautifulSoup(page.text, 'html.parser')\r\n\r\nall_divs = soup.find_all('div')\r\n\r\nfor ___ in all_divs:\r\n    try:\r\n        print(div['class'])\r\n    except:\r\n        print(div.text)",
            "correct_answer": "div",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6729,
            "material": "Control Structure",
            "instruction": "Develop a Python script for calculating the Fibonacci numbers for a given input.",
            "question": "def Fibonacci(n): \r\n    if ___<0: \r\n        print(\"Incorrect input\") \r\n    # First Fibonacci number is 0 \r\n    elif n==1: \r\n        return 0\r\n    # Second Fibonacci number is 1 \r\n    elif n==2: \r\n        return 1\r\n    else: \r\n        return Fibonacci(n-1)+Fibonacci(n-2) \r\n\r\n# Driver Program \r\n  \r\nprint(Fibonacci(8))",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6736,
            "material": "Control Structure",
            "instruction": "Create a Python program that takes in a positive integer, then uses a while loop to output the numbers counting down to 1.",
            "question": "num = int(input(\"Enter a positive integer: \"))\r\n\r\nwhile ___ > 0:\r\n    print(num)\r\n    num -= 1\r\n\r\nprint(\"Done!\")",
            "correct_answer": "num",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6738,
            "material": "Control Structure",
            "instruction": "Optimize this Python program for better efficiency.",
            "question": "def add_two_lists(l1, l2):\r\n    return [x + y for ___, y in zip(l1, l2)]",
            "correct_answer": "x",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6787,
            "material": "Control Structure",
            "instruction": "Create a function in Python for evaluating a given polynomial expression.",
            "question": "def evaluate_polynomial(expression):\r\n  expression = expression.strip()\r\n  tokens  = expression.split(\"+\")\r\n  result = 0\r\n  for ___ in tokens:\r\n    term = term.strip()\r\n    coefficient, exponent = term.split(\"x\")\r\n    result += float(coefficient) * float(expoent)\r\n\r\n  return result",
            "correct_answer": "term",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6854,
            "material": "Control Structure",
            "instruction": "Find the number of ways to reach nth step in a staircase if a person can take 1 or 2 steps at a time in Python.",
            "question": "def stairs(n): \r\n    step = [0] * (n + 2) \r\n    step[1] = 1\r\n    step[2] = 2\r\n  \r\n    for ___ in range(3, n + 2): \r\n        step[i] = step[i - 1] + step[i - 2] \r\n  \r\n    return step[n] \r\n      \r\nn = 6\r\nprint(stairs(n))",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6867,
            "material": "Control Structure",
            "instruction": "Develop a Python Program to determine if two given strings are an anagram or not.",
            "question": "def is_anagram(string1, string2):\r\n    # check if ___ have equal length \r\n    if len(string1) != len(string2): \r\n        return False \r\n    sorted1 = sorted(string1); \r\n    sorted2 = sorted(string2); \r\n    # check if sorted strings are the same \r\n    if sorted1 == sorted2:\r\n        return True \r\n    return False",
            "correct_answer": "strings",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6873,
            "material": "Control Structure",
            "instruction": "Write a Python program to compare two integers and prints if one is greater then another.",
            "question": "# compare two integers\r\nint1=1\r\nint2=2\r\nif ___ > int2:\r\n    print(\"int1 is greater than int2\")\r\nelif int2 > int1:\r\n    print(\"int2 is greater than int1\")\r\nelse:\r\n    print(\"int1 and int2 are equal\")",
            "correct_answer": "int1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6922,
            "material": "Control Structure",
            "instruction": "Create functions in Python for validating if a number is prime or not.",
            "question": "def is_prime(n):\r\n    if ___ == 1:\r\n        return False\r\n    for i in range(2,int(n**(1/2))+1):\r\n        if n%i == 0:\r\n            return False\r\n    return True\r\n\r\nif is_prime(12):\r\n    print(\"Prime\")\r\nelse:\r\n    print(\"Not Prime\")",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6930,
            "material": "Control Structure",
            "instruction": "Create an algorithm in Python for the classification of numbers into even or odd.",
            "question": "def classifyNumber(num): \r\n    if ___ % 2 == 0: \r\n        return \"even\"\r\n    else: \r\n        return \"odd\" \r\n  \r\nprint(classifyNumber(3))",
            "correct_answer": "num",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6933,
            "material": "Control Structure",
            "instruction": "Refactor the following code to use the most Pythonic approach:\r\n\r\n```\r\nfor i in range(0, list_items_len):\r\n    if list_items[i] == target_item:\r\n        index = i\r\n        break\r\n```",
            "question": "list_items = ['a', 'b', 'c', 'd', 'e']\r\ntarget_item = 'c'\r\n\r\nindex = list_items.index(target_item) if ___ in list_items else None",
            "correct_answer": "target_item",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 6989,
            "material": "Control Structure",
            "instruction": "Create a Python program to check if two strings are anagrams.",
            "question": "def is_anagram(s1, s2): \r\n    # Convert both strings to lower case \r\n    s1 = s1.lower() \r\n    s2 = s2.lower() \r\n\r\n    # Sort both strings \r\n    s1 = sorted(s1) \r\n    s2 = sorted(s2) \r\n\r\n    if ___ == s2: \r\n        return True \r\n    else: \r\n        return False",
            "correct_answer": "s1",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7008,
            "material": "Control Structure",
            "instruction": "Create a Python program to calculate the sum of the digits for a number that is provided as input.",
            "question": "# Function to find the sum of digits\r\ndef sum_digits(num):\r\n # Variable to store the sum of digits\r\n sum = 0\r\n \r\n while ___ > 0:\r\n  digit = num % 10\r\n  sum = sum + digit\r\n  num = num // 10\r\n \r\n return sum\r\n \r\nnum = 1234\r\nsum = sum_digits(num)\r\nprint(\"Sum of digits of %d is %d\" % (num, sum))\r\n# Output: Sum of digits of 1234 is 10",
            "correct_answer": "num",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7037,
            "material": "Control Structure",
            "instruction": "Write a Python program to calculate the sum of two given integers, if the two values are equal then return the triple of their sum.",
            "question": "def calculate_sum(a, b):\r\n    if ___ == b:\r\n        return (a + b) * 3\r\n    else:\r\n        return a + b\r\n    \r\na = 2\r\nb = 2\r\nresult = calculate_sum(a, b)\r\nprint(result)",
            "correct_answer": "a",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7059,
            "material": "Control Structure",
            "instruction": "Generate a Python program which determines if a given number is divisible by 7",
            "question": "def is_divisible_by_7(num):\r\n    if ___ % 7 == 0:\r\n        return True\r\n    else:\r\n        return False\r\n\r\nresult = is_divisible_by_7(28)\r\nprint(result)",
            "correct_answer": "num",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7126,
            "material": "Control Structure",
            "instruction": "Using a while loop, write a Python program to reverse a given sentence.",
            "question": "# Initialize an empty string \r\nrevString = \"\"\r\n\r\n# Set 'idx' to point to the end of the string \r\nidx = len(sent) - 1\r\n \r\n# Iterate in reverse through the string \r\nwhile ___ >= 0:\r\n    # Append each individual character to the result string\r\n    revString += sent[idx]\r\n    # Decrement the index\r\n    idx -= 1\r\n\r\n# Output the reversed result\r\nprint(revString)",
            "correct_answer": "idx",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7164,
            "material": "Control Structure",
            "instruction": "Write a Python program to determine if a number provided by the user is prime or not.",
            "question": "# Ask the user for ___ number\r\nnum = int(input('Enter a number: '))\r\n\r\n# Set initial values\r\nis_prime = True\r\n\r\n# Check for prime\r\nfor i in range(2, num):\r\n if num % i == 0:\r\n is_prime = False\r\n break\r\n\r\n# Output result\r\nif is_prime:\r\n print(f'{num} is a prime number.')\r\nelse:\r\n print(f'{num} is not a prime number.')",
            "correct_answer": "a",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7184,
            "material": "Control Structure",
            "instruction": "Write a Python program to check if two strings are isomorphic.",
            "question": "def is_isomorphic(s1, s2):\r\n    if ___(s1) != len(s2):\r\n        return False\r\n\r\n    s1_dict = dict()\r\n    for i, char in enumerate(s1):\r\n        if char in s1_dict:\r\n            if s1_dict[char] != s2[i]:\r\n                return False\r\n        else:\r\n            s1_dict[char] = s2[i]\r\n\r\n    return True",
            "correct_answer": "len",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7185,
            "material": "Control Structure",
            "instruction": "Implement a python program to check if a number is powerful. A powerful number is one who has a power of 2 as any of its prime divisors.",
            "question": "def is_power(number):\r\n    flag = False\r\n    if ___ > 2:\r\n        for i in range(2, number // 2 + 1):\r\n            while number % i == 0:\r\n                if number % (i ** 2) == 0:\r\n                    flag = True\r\n                number = number / i\r\n    \r\n    return flag\r\n\r\nprint(is_power(18))",
            "correct_answer": "number",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7188,
            "material": "Control Structure",
            "instruction": "Write a Python code for converting a given sentence into pig latin.",
            "question": "def convert_string_to_pig_latin(sentence):\r\n    words = sentence.split()\r\n    pig_latin_words = []\r\n    for ___ in words:\r\n        if word[0] in 'aeiou':\r\n            pig_word = word + 'way'\r\n        else:\r\n            pig_word = word[1:] + word[0] + 'ay'\r\n        pig_latin_words.append(pig_word)\r\n    return ' '.join(pig_latin_words)",
            "correct_answer": "word",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7214,
            "material": "Control Structure",
            "instruction": "Build a program in Python for finding the largest prime number in a given range.",
            "question": "def largest_prime(num):\r\n    largest_prime = 0\r\n    for ___ in range (num):\r\n        if(isPrime(n)):\r\n            largest_prime = n\r\n    return largest_prime\r\n\r\ndef isPrime(n):\r\n    if(n == 1):\r\n        return False\r\n    elif(n == 2):\r\n        return True\r\n    else:\r\n        for x in range(2,n//2+1):\r\n            if(n % x == 0):\r\n                return False\r\n        return True\r\n\r\nprint(largest_prime(100))",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7230,
            "material": "Control Structure",
            "instruction": "Construct a Python program for finding the intersection of two arrays.",
            "question": "def intersection(arr1, arr2):\r\n  result = [i for ___ in arr1 if i in arr2]\r\n  return result\r\n\r\narr1 = [1, 2, 3, 4]\r\narr2 = [3, 4, 5, 6]\r\nresult = intersection(arr1, arr2)\r\nprint(result)  # [3, 4]",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7234,
            "material": "Control Structure",
            "instruction": "Develop an algorithm in Python for solving the Tower of Hanoi problem.",
            "question": "def hanoi(discs, source, aux, dest):\r\n    if ___ == 1:\r\n        print (\"Move disc 1 from {} to {}\".format(source, dest))\r\n        return\r\n\r\n    hanoi(discs-1, source, dest, aux)\r\n    print (\"Move disc {} from {} to {}\".format(discs, source, dest))\r\n    hanoi(discs-1, aux, source, dest)\r\n\r\nhanoi(3,'A', 'B', 'C')",
            "correct_answer": "discs",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7237,
            "material": "Control Structure",
            "instruction": "Create a python program to calculate Fibonacci sequence for a given number.",
            "question": "def fibonacci(n):\r\n    if ___ == 0:\r\n        return 0\r\n    elif n == 1:\r\n        return 1\r\n    else:\r\n        return fibonacci(n-1) + fibonacci(n-2)\r\n\r\nif __name__ == '__main__':\r\n    n = 8\r\n    print(fibonacci(n))",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7260,
            "material": "Control Structure",
            "instruction": "Optimize a given Python program for speed, memory usage and readability.",
            "question": "def factorial(n):\r\n    result = 1\r\n    for ___ in range(2, n+1):\r\n        result *= i\r\n    return result",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7320,
            "material": "Control Structure",
            "instruction": "Create a web crawler in Python which searches for all links on a given website and prints them out in the terminal.",
            "question": "import requests\r\nfrom bs4 import BeautifulSoup\r\n\r\n# Get the HTML from the given URL\r\nresp = requests.get(url)\r\n\r\n# Parse the HTML\r\nsoup = BeautifulSoup(resp.text, 'html.parser')\r\n\r\n# Find all the links\r\nfor ___ in soup.find_all('a'):\r\n    print(link.get('href'))",
            "correct_answer": "link",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7328,
            "material": "Control Structure",
            "instruction": "Create a Python function for encrypting strings using a \u201cVigenere Cipher\u201d.",
            "question": "def encrypt_vigenere(plaintext, key):\r\n ciphertext = \"\"\r\n index = 0\r\n for ___ in plaintext:\r\n     ciphertext += chr((ord(c) - 65 + ord(key[index]) - 65) % 26 + 65)\r\n     index = (index + 1) % len(key)\r\n return ciphertext",
            "correct_answer": "c",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7354,
            "material": "Control Structure",
            "instruction": "Create a Python program to mark a character as asterisk (*) if it's the same as the previous one?",
            "question": "def mark_asterisk(input):\r\n    res = \"\"\r\n    temp = input[0]\r\n    for ___ in input:\r\n        if char == temp:\r\n            res += '*'\r\n        else:\r\n            res += char\r\n            temp = char\r\n    return res",
            "correct_answer": "char",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7404,
            "material": "Control Structure",
            "instruction": "Generate a python program to determine if two objects are mutually exclusive or not.",
            "question": "def mutually_exclusive(object1, object2):\r\n    if ___(object1.intersection(object2)) > 0:\r\n        return False\r\n    else:\r\n        return True\r\n    \r\nobject1 = set([1, 2, 3])\r\nobject2 = set([4, 5, 6])\r\n\r\nresult = mutually_exclusive(object1, object2)\r\nprint(result) # Outputs True as objects don't share elements.",
            "correct_answer": "len",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7405,
            "material": "Control Structure",
            "instruction": "Design a Python function to check if two given strings are anagrams or not.",
            "question": "def check_anagram(str1, str2):\r\n \r\n    if ___(str1) == sorted(str2):\r\n        return True\r\n    else:\r\n        return False",
            "correct_answer": "sorted",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7422,
            "material": "Control Structure",
            "instruction": "Create a web scraper in Python that searches a given website for a specified HTML element.",
            "question": "import requests\r\nfrom bs4 import BeautifulSoup\r\n\r\nurl = 'https://www.example.com'\r\nresponse = requests.get(url)\r\nhtml = response.content\r\n\r\nsoup = BeautifulSoup(html, 'html.parser')\r\nfor ___ in soup.find_all('div'):\r\n print(div.text)",
            "correct_answer": "div",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7438,
            "material": "Control Structure",
            "instruction": "Compose a function in Python to check if a given number is a power of two.",
            "question": "def is_power_two(num):\r\n    if ___ == 0:\r\n        return False\r\n    \r\n    while num != 1:\r\n        if num % 2 != 0:\r\n            return False\r\n        num = num // 2\r\n    return True",
            "correct_answer": "num",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7447,
            "material": "Control Structure",
            "instruction": "Write a Python function that will calculate the average temperature for the past week.",
            "question": "def calc_avg_temperature(temperatures):\r\n  total = 0\r\n  for ___ in temperatures:\r\n    total += temp\r\n  avg = total / len(temperatures)\r\n  return avg\r\n\r\nprint(calc_avg_temperature([64.7, 67.3, 71.3, 73.1, 75.7, 73.2, 75.7]))\r\n\r\n# Output: 71.17142857142857",
            "correct_answer": "temp",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7511,
            "material": "Control Structure",
            "instruction": "Create a Python script to detect if a number is prime.",
            "question": "def is_prime(n):\r\n    if ___ <= 1:\r\n        return False\r\n    for i in range(2, n):\r\n        if n % i == 0:\r\n            return False\r\n    return True\r\n\r\nif __name__ == \"__main__\":\r\n    n = 10\r\n    if is_prime(n):\r\n        print(\"{} is a prime number\".format(n))\r\n    else:\r\n        print(\"{} is not a prime number\".format(n))",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7525,
            "material": "Control Structure",
            "instruction": "Construct an algorithm for factoring a large number in Python.",
            "question": "def get_factor(n):\r\n    factors = []\r\n   \r\n    for ___ in range(2, n + 1):\r\n        if n % i == 0:\r\n            factors.append(i)\r\n            n //= i\r\n    return factors\r\n\r\nnumber = 600851475143\r\nprint(get_factor(number))",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7534,
            "material": "Control Structure",
            "instruction": "Create a Python script to clean the given text and make it ready for processing.",
            "question": "text_cleaned = \"This is the text for ___!\r\nSome punctuation must be removed.\r\nLets Trim the whitespace too.\r\nPlease preserve the cases as is.\"",
            "correct_answer": "processing",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7547,
            "material": "Control Structure",
            "instruction": "Modify the following Python code to raise an exception if the input value is not an integer",
            "question": "def square_root(x):\r\n    if ___ isinstance(x, int):\r\n        raise TypeError('Input must be an integer')\r\n    return x**0.5",
            "correct_answer": "not",
            "attempts": "1",
            "duration": "20"
        },
        {
            "question_id": 7556,
            "material": "Control Structure",
            "instruction": "Design an algorithm in Python for finding and printing all prime numbers between 1 and a given number.",
            "question": "def find_all_primes(n): \r\n  for ___ in range(2,n + 1):\r\n    for i in range(2,num):\r\n      if (num % i) == 0:\r\n        break \r\n    else:\r\n      print(num)\r\n\r\nfind_all_primes(100)",
            "correct_answer": "num",
            "attempts": "1",
            "duration": "20"
        }
    ]
}