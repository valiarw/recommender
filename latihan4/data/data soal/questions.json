{
    "quiz": [
        {
            "question_id": 2935,
            "material": "Introduction Python",
            "instruction": "Optimize the following Python code to print the numbers in reverse.",
            "question": "for i in reversed(range(1,11)):\n    print(___)",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "59"
        },
        {
            "question_id": 4965,
            "material": "Introduction Python",
            "instruction": "Generate a code that will print out all substrings of a given string.",
            "question": "def substrings(s):\n    sub_str_list = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)+1):\n            sub_str = s[i:j]\n            sub_str_list.append(sub_str)\n    return sub_str_list\n\nresult = substrings(\"python\")\nprint(___)",
            "correct_answer": "result",
            "attempts": "1",
            "duration": "59"
        },
        {
            "question_id": 4714,
            "material": "Introduction Python",
            "instruction": "Update the given Python program to print the result in reverse order.",
            "question": "numbers = [1, 2, 3, 4, 5, 6]\n\nfor x in reversed(numbers):\n    print(___)",
            "correct_answer": "x",
            "attempts": "1",
            "duration": "59"
        },
        {
            "question_id": 4511,
            "material": "Control Structure",
            "instruction": "Optimize the following python code to speed up execution time:\n\narr = [2, 5, 3, 1]\nfor i in range(len(arr)):\n  for j in range(i + 1, len(arr)):\n    if arr[i] > arr[j]:\n       arr[i], arr[j] = arr[j], arr[i]",
            "question": "arr = [2, 5, 3, 1]\n\n# using Python's built in `sorted` function\narr = sorted(arr)\n\n# using the Bubble Sort algorithm\nfor ___ in range(len(arr) - 1):\n for j in range(len(arr) - 1 - i):\n  if arr[j] > arr[j + 1]:\n   arr[j], arr[j + 1] = arr[j + 1], arr[j]",
            "correct_answer": "i",
            "attempts": "1",
            "duration": "59"
        },
        {
            "question_id": 2423,
            "material": "Control Structure",
            "instruction": "Debug the following Python code and make it functional (read the instructions for the code).",
            "question": "def factorial(n):\n if ___ == 0:\n    return 1\n else:\n return n * factorial(n - 1)\n\n# call the method\nprint(factorial(5))",
            "correct_answer": "n",
            "attempts": "1",
            "duration": "59"
        },
        {
            "question_id": 269,
            "material": "Control Structure",
            "instruction": "Create a python program that detects if a number is even or odd.",
            "question": "def is_even_odd(num):\n    if ___ % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\nresult = is_even_odd(7)\nprint(result)",
            "correct_answer": "num",
            "attempts": "1",
            "duration": "59"
        },
        {
            "question_id": 1037,
            "material": "Data Structure",
            "instruction": "Create a program in Python that takes a list of strings as input, sorts the strings in alphabetical order, and prints out the list in reverse alphabetical order.",
            "question": "# create a list ___ = [\"cat\", \"bird\", \"dog\", \"zebra\", \"ant\"]\n \n# sort the list\nsample_list.sort()\n \n# reverse the list\nsample_list.reverse()\n \n# print the reversed list\nprint(sample_list)\n# ['zebra', 'dog', 'cat', 'bird', 'ant']",
            "correct_answer": "sample_list",
            "attempts": "1",
            "duration": "59"
        },
        {
            "question_id": 4696,
            "material": "Data Structure",
            "instruction": "Develop a function in python to find the index of an element in a list.",
            "question": "def find_index(a, x):\n    indices = []\n    if x not in a:\n        return -1\n    else:\n        for i in range(len(a)):\n            if a[i] == x:\n                indices.append(i)\n    return indices\n\nindices = find_index(a, x)\nprint(\"The index of element 2 in the list ___\", indices)",
            "correct_answer": "is",
            "attempts": "1",
            "duration": "59"
        },
        {
            "question_id": 4545,
            "material": "Data Structure",
            "instruction": "Generate an algorithm in Python that returns the kth smallest number in a given array.",
            "question": "def kthSmallest(arr, k):\n # sort the array ___.sort()\n \n # return the kth element\n return arr[k-1]\n \n# Driver Code\narr = [3,2,4,1,5]\nk = 3\n\nprint(kthSmallest(arr, k)) # 3",
            "correct_answer": "arr",
            "attempts": "1",
            "duration": "59"
        },
        {
            "question_id": 1678,
            "material": "Data Type",
            "instruction": "Create a Python function that takes in a string and a list of words and returns true if the string contains all the words in the list.",
            "question": "def contains_words(input_string, words):\n for word in words:\n if word not in input_string:\n return False ___ True\n\nprint(contains_words('This is a test', ['test', 'this', 'is'])) # True",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "59"
        },
        {
            "question_id": 7503,
            "material": "Data Type",
            "instruction": "Build an algorithm in Python to check if a string is a palindrome.",
            "question": "def is_palindrome(str):\n    # Get the length of the string\n    n = len(str)\n\n    for i in range(n//2):\n        # Compare characters from both ends\n        if str[i] != str[n-i-1]:\n            return False ___ True\n\nstr = \"abccba\"\nprint(is_palindrome(str))",
            "correct_answer": "return",
            "attempts": "1",
            "duration": "59"
        },
        {
            "question_id": 3706,
            "material": "Data Type",
            "instruction": "Create a Python program to check for anagrams of a string.",
            "question": "def anagramCheck(str1, str2):\n    if (len(str1) != len(str2)):\n        return False ___ = sorted(str1)\n    str2 = sorted (str2)\n\n    # Compare each character in str1 with\n    # each character in str2\n    for i in range( len( str1 ) ):\n        if (str1[i] != str2[i]):\n            return False\n \n    return True",
            "correct_answer": "str1",
            "attempts": "1",
            "duration": "59"
        },
        {
            "question_id": 5790,
            "material": "Function",
            "instruction": "Rewrite the following Python function without using loop.",
            "question": "def ___(l): \n\tfrom functools import reduce\n\treturn reduce((lambda x, y: x * y), l)",
            "correct_answer": "multiply_list",
            "attempts": "1",
            "duration": "59"
        },
        {
            "question_id": 6030,
            "material": "Function",
            "instruction": "Edit the following python function so that it prints its parameters in reversed order.",
            "question": "def ___(a, b):\n  print(b + ' ' + a)",
            "correct_answer": "print_params",
            "attempts": "1",
            "duration": "59"
        },
        {
            "question_id": 4131,
            "material": "Function",
            "instruction": "Generate a python function to calculate the total cost of a purchase given prices and quantities.",
            "question": "def ___(prices, quantities):\n total = 0\n for price, quantity in zip(prices, quantities):\n total += price * quantity\n return total",
            "correct_answer": "calculate_total_cost",
            "attempts": "1",
            "duration": "59"
        },
        {
            "question_id": 3441,
            "material": "OOP",
            "instruction": "Create a class in Python to generate a calendar.",
            "question": "class ___(object):\n\n    def __init__(self, name):\n        self.name = name\n\n    def generate_calendar(self):\n        calendar = []\n\n        # Code to generate a calendar goes here\n\n        return calendar\n\ncalendar = CalendarGenerator(calendarName)\ncalendar.generate_calendar()",
            "correct_answer": "CalendarGenerator",
            "attempts": "1",
            "duration": "59"
        },
        {
            "question_id": 2282,
            "material": "OOP",
            "instruction": "Create a class in Python that takes two arguments a 'name' and 'age' and returns a greeting.",
            "question": "class ___:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_greeting(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old.\"",
            "correct_answer": "Greeting",
            "attempts": "1",
            "duration": "59"
        },
        {
            "question_id": 4291,
            "material": "OOP",
            "instruction": "Create a class in Python that can represent a 3D point with the given fields.",
            "question": "class ___:\n  def __init__(self, x, y, z):\n    self.x = x\n    self.y = y\n    self.z = z\n\n  def __str__(self):\n    return 'Point3D is at {x}, {y}, {z}'.format(x = self.x, y = self.y, z = self.z)",
            "correct_answer": "Point3D",
            "attempts": "1",
            "duration": "59"
        },
        {
            "question_id": 2891,
            "material": "Operator",
            "instruction": "Using a built-in sorting algorithm, write a Python program to sort a given list of integers.",
            "question": "def sort_list(arr):\n    return sorted(arr)\n\nmy_list = [3, 4, 6, 1, 9, 5, 2]\nsorted_list = ___(my_list)\nprint(sorted_list)",
            "correct_answer": "sort_list",
            "attempts": "1",
            "duration": "59"
        },
        {
            "question_id": 6176,
            "material": "Operator",
            "instruction": "Create a simple Python script that takes a single command-line parameter and prints out \"Hello <parameter>\" to the console.",
            "question": "import sys\n\nname = ___.argv[1]\nprint(\"Hello {}\".format(name)) # Output: Hello John",
            "correct_answer": "sys",
            "attempts": "1",
            "duration": "59"
        },
        {
            "question_id": 6539,
            "material": "Operator",
            "instruction": "Create a Python program to group a list of numbers into two lists according to their parity (even/odd) in the most efficient way.",
            "question": "even_list = []\nodd_list = []\n\nfor num in input_list:\n if num % ___ == 0:\n even_list.append(num)\n else:\n odd_list.append(num)\n\nprint('Even list:', even_list)\nprint('Odd list:', odd_list)",
            "correct_answer": "2",
            "attempts": "1",
            "duration": "59"
        },
        {
            "question_id": 4150,
            "material": "Lainnya",
            "instruction": "Create a web scraper with Python and Beautiful Soup to scrape data from a single webpage.",
            "question": "import ___\nfrom bs4 import BeautifulSoup\n\nurl = 'http://example.com/page'\n\nresponse = requests.get(url)\n\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nresults = soup.find_all('div', {'class': 'result'})\n\nfor result in results:\n title = result.find('h2').text\n description = result.find('p').text \n print(title, description)",
            "correct_answer": "requests",
            "attempts": "1",
            "duration": "59"
        },
        {
            "question_id": 1361,
            "material": "Lainnya",
            "instruction": "Generate a Python program to calculate the amount of time the user has been working on a specific task, given the start time and the current time.",
            "question": "import ___\n\ndef get_time_difference(start_time, current_time):\n    start_time = datetime.datetime.strptime(start_time, \"%H:%M%p\")\n    current_time = datetime.datetime.strptime(current_time, \"%H:%M%p\")\n    return current_time - start_time",
            "correct_answer": "datetime",
            "attempts": "1",
            "duration": "59"
        },
        {
            "question_id": 2530,
            "material": "Lainnya",
            "instruction": "Create a Python script that processes a sentence and classifies it as positive or negative.",
            "question": "import ___\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentence = \"The food was really bad.\"\n\nsentiment_analyzer = SentimentIntensityAnalyzer()\nscore = sentiment_analyzer.polarity_scores(sentence)\n\nif score['compound'] > 0:\n sentiment = 'positive'\nelif score['compound'] < 0:\n sentiment = 'negative'\n\nprint(f'The sentence is {sentiment}.')",
            "correct_answer": "nltk",
            "attempts": "1",
            "duration": "59"
        },
        {
            "question_id": 571,
            "material": "Lainnya",
            "instruction": "Generate 3 random numbers within the specified range using Python.",
            "question": "import ___\n\nrandom_numbers = random.sample(range(0, 10), 3) \nprint(random_numbers)",
            "correct_answer": "random",
            "attempts": "1",
            "duration": "59"
        }
    ]
}