Instruction,Input,Output,materi,question_id,Template,correct_answer
Build a mini classifier model in Python to predict whether a given string is palindrome or not.,'level',"class Palindrome:

def __init__(self, str):
    self.str = str

def is_palindrome(self):
    return self.str == self.str[::-1]

palindrome = Palindrome(""level"")
if palindrome.is_palindrome():
    print(""The string is a palindrome"")
else:
    print(""The string is not a palindrome"")",Data Type,189,"class Palindrome:

def __init__(self, str):
    self.str = str ___ is_palindrome(self):
    return self.str == self.str[::-1]

palindrome = Palindrome(""level"")
if palindrome.is_palindrome():
    print(""The string is a palindrome"")
else:
    print(""The string is not a palindrome"")",def
Write a code to detect any pattern in a given string in Python.,"my_string = ""aabccba""","def detect_pattern(my_string):
    for i in range(len(my_string)):
        if my_string.count(my_string[i]) > 1:
            return True
    return False

if __name__ == '__main__':
    print(detect_pattern(my_string))",Data Type,236,"def detect_pattern(my_string):
    for i in range(len(my_string)):
        if my_string.count(my_string[i]) > 1:
            return True ___ False

if __name__ == '__main__':
    print(detect_pattern(my_string))",return
Write a Python program to determine whether or not a given string is a palindrome.,"""racecar""","def isPalindrome(s):

 # remove whitespaces
 s = ''.join(s.split())

 # reverse string
 rev = s[::-1]

 # compare
 if rev == s:
 return True
 return False

if isPalindrome(""racecar""):
 print('String is a palindrome')
else:
 print('String is not a palindrome')",Data Type,313,"def isPalindrome(s):

 # remove whitespaces
 s = ''.join(s.split())

 # reverse string
 rev = s[::-1]

 # compare
 if rev == s:
 return True ___ False

if isPalindrome(""racecar""):
 print('String is a palindrome')
else:
 print('String is not a palindrome')",return
Write a python function which will check if input string is palindrome or not.,"input_string = ""racecar""","def is_palindrome(input_string):
    if input_string == input_string[::-1]:
        return True
    else:
        return False
    
input_string = ""racecar""

check_palindrome = is_palindrome(input_string)

if check_palindrome == True:
    print(""Input string is a palindrome"")
else:
    print(""Input string is NOT a palindrome"")",Data Type,412,"def is_palindrome(input_string):
    if input_string == input_string[::-1]:
        return True ___:
        return False
    
input_string = ""racecar""

check_palindrome = is_palindrome(input_string)

if check_palindrome == True:
    print(""Input string is a palindrome"")
else:
    print(""Input string is NOT a palindrome"")",else
Create a Python program to convert a list of characters into a string,"Convert this array ['a', 'b', 'c'] into a string","def list_to_str(arr):
    str = """"
    for i in arr:
        str += i
    return str

arr = ['a', 'b', 'c']
  
result = list_to_str(arr) 
print(result)",Data Type,602,"def list_to_str(arr):
    str = """"
    for i in arr:
        str += i
    return str ___ = ['a', 'b', 'c']
  
result = list_to_str(arr) 
print(result)",arr
Create a Python script to validate a JSON string.,"""{""name"":""John"",""age"":30}""","import json

def validate_json_string(s):
    try:
        json_obj = json.loads(s)
        return True
    except json.JSONDecodeError:
        return False",Data Type,632,"import json

def validate_json_string(s):
    try:
        json_obj = json.loads(s)
        return True ___ json.JSONDecodeError:
        return False",except
Write a function in Python that takes a given string and checks if it is a palindrome or not.,"""racecar""","def isPalindrome(s):
    left = 0 
    right = len(s)-1 
      
    while(left < right ): 
        if (s[left] != s[right]): 
            return False
        left += 1
        right -= 1
    return True
  
print (isPalindrome(""racecar""))",Data Type,664,"def isPalindrome(s):
    left = 0 
    right = len(s)-1 
      
    while(left < right ): 
        if (s[left] != s[right]): 
            return False ___ += 1
        right -= 1
    return True
  
print (isPalindrome(""racecar""))",left
Create a Python program to check if a given string can be formed from a given set of words.,"String: ""justdoit""
Set of words: [""just"", ""do"", ""it""]","def word_set(string, words):
    words_set = set(words)
    string_set = set(string)
    
    if string_set.issubset(words_set):
        return True 
    else:
        return False

word_set(""justdoit"", [""just"", ""do"", ""it""])",Data Type,850,"def word_set(string, words):
    words_set = set(words)
    string_set = set(string)
    
    if string_set.issubset(words_set):
        return True ___:
        return False

word_set(""justdoit"", [""just"", ""do"", ""it""])",else
Create a program in Python that has the following purpose: To determine if a given string is a palindrome,"""radar""","def check_palindrome(inputStr): 
     
    revStr = reversed(inputStr)
  
    if list(inputStr) == list(revStr): 
        return True
    else: 
        return False
      
userInput = ""radar""

if(check_palindrome(userInput)): 
    print(""Yes"") 
else: 
    print(""No"")",Data Type,862,"def check_palindrome(inputStr): 
     
    revStr = reversed(inputStr)
  
    if list(inputStr) == list(revStr): 
        return True ___: 
        return False
      
userInput = ""radar""

if(check_palindrome(userInput)): 
    print(""Yes"") 
else: 
    print(""No"")",else
Generate a Python program to search for a specific string in a list.,"lst = [""hello"", ""world"", ""this"", ""is"", ""a"", ""test""]
str = ""test""","def search_string(lst, str):
    for item in lst:
        if item == str:
            return True
    return False

lst = [""hello"", ""world"", ""this"", ""is"", ""a"", ""test""]
str = ""test""
print(search_string(lst, str))",Data Type,944,"def search_string(lst, str):
    for item in lst:
        if item == str:
            return True ___ False

lst = [""hello"", ""world"", ""this"", ""is"", ""a"", ""test""]
str = ""test""
print(search_string(lst, str))",return
Design a program in Python that accepts a string as input and checks whether or not it is palindrome.,madam,"def isPalindrome(str): 
    for i in range(0, int(len(str)/2)):  
        if str[i] != str[len(str)-i-1]: 
            return False
    return True

inputStr = 'madam'

if (isPalindrome(inputStr)): 
    print(""Yes"")
else: 
    print(""No"")",Data Type,957,"def isPalindrome(str): 
    for i in range(0, int(len(str)/2)):  
        if str[i] != str[len(str)-i-1]: 
            return False ___ True

inputStr = 'madam'

if (isPalindrome(inputStr)): 
    print(""Yes"")
else: 
    print(""No"")",return
Create a python function that takes a string of characters as input and checks if it is a valid identifier.,"name = ""myVar""","import string

def isValidIdentifier(name):
    validChar = string.ascii_letters + ""_""
    if name[0] not in string.ascii_letters:
        return False
    for char in name[1:]:
        if char not in validChar:
            return False
            
    return True

validResult = isValidIdentifier(name)
print(validResult)",Data Type,980,"import string

def isValidIdentifier(name):
    validChar = string.ascii_letters + ""_""
    if name[0] not in string.ascii_letters:
        return False ___ char in name[1:]:
        if char not in validChar:
            return False
            
    return True

validResult = isValidIdentifier(name)
print(validResult)",for
Develop a program in Python to check whether a string contains only digits.,"""0123""","def is_digit_only(string):
    for char in string:
        if not char.isdigit():
            return False
    return True

print(is_digit_only(""0123""))",Data Type,1026,"def is_digit_only(string):
    for char in string:
        if not char.isdigit():
            return False ___ True

print(is_digit_only(""0123""))",return
Develop an algorithm to check if a string S is a palindrome in Python.,"String S = ""racecar""","def is_palindrome(s):
    # Convert strings to lowercase
    s = s.lower()
 
    # Iterate through middle of string with indices 
    for i in range(len(s) // 2):
        if s[i] != s[len(s) - i - 1]:
            return False
    return True",Data Type,1158,"def is_palindrome(s):
    # Convert strings to lowercase
    s = s.lower()
 
    # Iterate through middle of string with indices 
    for i in range(len(s) // 2):
        if s[i] != s[len(s) - i - 1]:
            return False ___ True",return
Write a function in Python to search a string for a specific pattern.,"Search for ""abc"" in ""abcxyzabc","def search_for_pattern(s, pattern):
    if pattern in s:
        return True
    else:
        return False

result = search_for_pattern(""abcxyzabc"", ""abc"")
print(result)",Data Type,1237,"def search_for_pattern(s, pattern):
    if pattern in s:
        return True ___:
        return False

result = search_for_pattern(""abcxyzabc"", ""abc"")
print(result)",else
Filter a string in Python by removing all alphabets and keeping only the numbers.,"my_string = ""hey3this5is4my2string1""","def filter_string(str):
    str = ''.join(x for x in str if x.isdigit())
    return str  

my_string = ""hey3this5is4my2string1""
print(filter_string(my_string))",Data Type,1326,"def filter_string(str):
    str = ''.join(x for x in str ___ x.isdigit())
    return str  

my_string = ""hey3this5is4my2string1""
print(filter_string(my_string))",if
Implement a method in Python that takes two strings as input and returns true if one string is a rotation of the other.,"s1='abc' 
s2='cab'","def isRotation(s1, s2): 
    if (len(s1) != len(s2)): 
        return False
  
    temp = s1 + s1 
    if (s2 in temp): 
        return True
    return False

result = isRotation('abc', 'cab')
print(result)",Data Type,1523,"def isRotation(s1, s2): 
    if (len(s1) != len(s2)): 
        return False ___ = s1 + s1 
    if (s2 in temp): 
        return True
    return False

result = isRotation('abc', 'cab')
print(result)",temp
Generate a Python program to search for a substring within a string.,"text = ""This is a sample string."" 
substring = ""sample""","def search_substring(text, substring):
    if substring in text:
        return True
    else:
        return False

result = search_substring(text, substring)
print(result)",Data Type,1630,"def search_substring(text, substring):
    if substring in text:
        return True ___:
        return False

result = search_substring(text, substring)
print(result)",else
Write a Python program to check if a provided string is valid JSON.,"""<noinput>""","def is_valid_json(s):
    valid = True
    try:
        json.loads(s)
    except ValueError:
        valid = False
    return valid",Data Type,1657,"def is_valid_json(s):
    valid = True ___:
        json.loads(s)
    except ValueError:
        valid = False
    return valid",try
Create a Python function that takes in a string and a list of words and returns true if the string contains all the words in the list.,"'This is a test', ['test', 'this', 'is']","def contains_words(input_string, words):
 for word in words:
 if word not in input_string:
 return False
 return True

print(contains_words('This is a test', ['test', 'this', 'is'])) # True",Data Type,1678,"def contains_words(input_string, words):
 for word in words:
 if word not in input_string:
 return False ___ True

print(contains_words('This is a test', ['test', 'this', 'is'])) # True",return
Create a Python program to check if a given string has duplicates characters.,"String: ""helloworld""","def hasDuplicates(s):
    set = set()
    for ch in s:
        if ch in set:
            return True
        set.add(ch)
    return False",Data Type,1761,"def hasDuplicates(s):
    set = set()
    for ch in s:
        if ch in set:
            return True ___.add(ch)
    return False",set
Design a Python program to determine if one string is a substring of another.,"""Hello"", ""Hello World""","def isSubstring(str1, str2):
    if len(str1) > len(str2):
        return False

    for i in range(len(str2)):
        if (str2[i: i+len(str1)] == str1):
            return True

    return False

str1 = ""Hello""
str2 = ""Hello World""

print(isSubstring(str1, str2))",Data Type,1916,"def isSubstring(str1, str2):
    if len(str1) > len(str2):
        return False ___ i in range(len(str2)):
        if (str2[i: i+len(str1)] == str1):
            return True

    return False

str1 = ""Hello""
str2 = ""Hello World""

print(isSubstring(str1, str2))",for
Write a Python program to evaluate a given string and return a Boolean value.,String = “The sky is blue”,"def evaluate_string(string):
 if string == 'The sky is blue':
  return True
 else:
  return False",Data Type,2052,"def evaluate_string(string):
 if string == 'The sky is blue':
  return True ___:
  return False",else
"Generate a Python function that takes a string as input and returns True if the string contains a capital letter, otherwise False.",MyString,"def has_capital_letter(input_string):
    for character in input_string:
        if character.isupper():
            return True
    return False",Data Type,2194,"def has_capital_letter(input_string):
    for character in input_string:
        if character.isupper():
            return True ___ False",return
Generate a correct python program to identify a particular character in a string.,Search for the letter 'e' in the given string,"def char_in_string(char, string):
    for c in string:
        if c == char:
            return True
    return False",Data Type,2239,"def char_in_string(char, string):
    for c in string:
        if c == char:
            return True ___ False",return
Create a function in Python to determine whether a given string contains any whitespace character.,"""Hello World""","def hasWhitespace(string):
 for c in string:
  if c.isspace():
   return True
 return False

print(hasWhitespace(""Hello World""))",Data Type,2243,"def hasWhitespace(string):
 for c in string:
  if c.isspace():
   return True ___ False

print(hasWhitespace(""Hello World""))",return
Create a Python script to detect if a certain item is in a given list of items. The script should work for any type of item.,"items = [1,2,3,4,5]","def detect_item(items, item):
  if item in items:
    return True
  else:
    return False",Data Type,2312,"def detect_item(items, item):
  if item in items:
    return True ___:
    return False",else
"Create a python function to check if a given string contains a specific substring. The function should loop through the string and find the substring, and return a boolean value indicating if the substring was found or not.","myString = ""Hello World!""
substring = ""World""","def checkIfStringContainsSubstring(myString, substring):
  for i in range(len(myString) - len(substring) + 1):
    if myString[i:i+len(substring)] == substring:
      return True
  return False",Data Type,2559,"def checkIfStringContainsSubstring(myString, substring):
  for i in range(len(myString) - len(substring) + 1):
    if myString[i:i+len(substring)] == substring:
      return True ___ False",return
Write a Python script to check if the given string is a palindrome.,"string_to_test = ""racecar""","def is_palindrome(string_to_test):
    reverse = reversed(string_to_test)
    if list(string_to_test) == list(reverse):
        return True
    return False",Data Type,2690,"def is_palindrome(string_to_test):
    reverse = reversed(string_to_test)
    if list(string_to_test) == list(reverse):
        return True ___ False",return
Write a Python program to check if a given string is a rotation of another given string.,"str1 = ""waterbottle""
str2 = ""erbottlewat""","def is_rotation(str1, str2):
 if len(str1) != len(str2):
  return False
 
 concat_str2 = str2 * 2
 
 return str1 in concat_str2
 
is_rotation(str1, str2)",Data Type,2695,"def is_rotation(str1, str2):
 if len(str1) != len(str2):
  return False ___ = str2 * 2
 
 return str1 in concat_str2
 
is_rotation(str1, str2)",concat_str2
Identify the data type of the following input and provide a code to convert it to an integer in Python.,"""123""","input_type = type(""123"") # str

converted_int = int(""123"") # 123",Data Type,2958,"input_type = type(""123"") # str ___ = int(""123"") # 123",converted_int
Build a function in Python to test whether a string is a palindrome.,"""aba""","def is_palindrome(s): 
    # Reverse the string 
    rev = s[::-1] 
  
    # Check if the string is equal to its reverse 
    if (s == rev): 
        return True
    return False
  
# Driver code 
s = ""aba""
ans = is_palindrome(s) 
  
if ans == 1: 
    print(""Yes"") 
else: 
    print(""No"")",Data Type,2996,"def is_palindrome(s): 
    # Reverse the string 
    rev = s[::-1] 
  
    # Check if the string is equal to its reverse 
    if (s == rev): 
        return True ___ False
  
# Driver code 
s = ""aba""
ans = is_palindrome(s) 
  
if ans == 1: 
    print(""Yes"") 
else: 
    print(""No"")",return
Come up with an algorithm in Python that takes two strings as input and checks whether one string is a rotation of another.,"""ABACD"", ""CDABA""","def is_rotation(s1, s2):
    if len(s1) != len(s2):
        return False
    
    s1s1 = s1 + s1
    if s2 in s1s1:
        return True
    return False

print(is_rotation(""ABACD"", ""CDABA""))",Data Type,3037,"def is_rotation(s1, s2):
    if len(s1) != len(s2):
        return False ___ = s1 + s1
    if s2 in s1s1:
        return True
    return False

print(is_rotation(""ABACD"", ""CDABA""))",s1s1
Create a solution that detects the presence of a character in a string.,Python,"def detect_character(string, char):
    for ch in string:
        if ch == char:
            return True
    return False

string = 'Python'
char = 'y'
print(detect_character(string, char))",Data Type,3058,"def detect_character(string, char):
    for ch in string:
        if ch == char:
            return True ___ False

string = 'Python'
char = 'y'
print(detect_character(string, char))",return
"Create a Python function to search for a substring in a string. The function should take two arguments, the haystack string and the needle string, and should return a boolean indicating whether the substring was found or not.","haystack: ""This is a string"" 
needle: ""is""","def contains_substring(haystack, needle): 
 return needle in haystack

# Usage example
contains_substring(""This is a string"", ""is"") # returns True 
contains_substring(""This is a string"", ""xyz"") # returns False",Data Type,3084,"def contains_substring(haystack, needle): 
 return needle in haystack

# Usage example
contains_substring(""This is a string"", ""is"") # returns True ___(""This is a string"", ""xyz"") # returns False",contains_substring
"Given two strings, write a python function to check whether one string is a substring of another.","String1 = ""abc""
String2 = ""abcdef""","def is_substring(string1, string2): 
    if string1 in string2:
        return True
    else:
        return False",Data Type,3156,"def is_substring(string1, string2): 
    if string1 in string2:
        return True ___:
        return False",else
Generate a Python program to implement the following feature: Search a phrase in a given string.,"Search the phrase ""to be or not to be"" in the string ""Whether 'tis nobler in the mind to suffer"".","def search(phrase, string):
  if phrase in string:
     return True 
  else:
     return False 

result = search(""to be or not to be"", ""Whether 'tis nobler in the mind to suffer"")
print(result)",Data Type,3269,"def search(phrase, string):
  if phrase in string:
     return True ___:
     return False 

result = search(""to be or not to be"", ""Whether 'tis nobler in the mind to suffer"")
print(result)",else
Create a function in Python that can tell if a string is a palindrome or not.,civic,"def is_palindrome(word):
    reversed_word = word[::-1]

    if word == reversed_word:
        return True
    else:
        return False
        
result = is_palindrome('civic')
print(result)",Data Type,3406,"def is_palindrome(word):
    reversed_word = word[::-1]

    if word == reversed_word:
        return True ___:
        return False
        
result = is_palindrome('civic')
print(result)",else
Provide a type definition for the following class in Python.,"class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age","from typing import NamedTuple

class Student(NamedTuple):
    name: str
    age: int",Data Type,3488,"from typing import NamedTuple

class Student(NamedTuple):
    name: str ___: int",age
Write a Python function that takes two strings as arguments and returns true if the second string could be obtained by rotating the first string.,"'waterbottle', 'erbottlewat'","def is_rotation(str1, str2):
    if len(str1) == len(str2) and len(str1) > 0:
        return (str1 + str1).find(str2) != -1
    return False
    
is_rotation('waterbottle', 'erbottlewat')",Data Type,3541,"def is_rotation(str1, str2):
    if len(str1) == len(str2) and len(str1) > 0:
        return (str1 + str1).find(str2) != -1
    return False ___('waterbottle', 'erbottlewat')",is_rotation
"Generate an algorithm in Python that given a string of words, should check if it is a Palindrome.","""racecar""","def isPalindrome(s):
 s = s.lower()
 
 left = 0
 right = len(s) - 1
 
 while left < right:
 if s[left] != s[right]:
 return False
 left += 1
 right -= 1
 
 return True

s = 'racecar'
isPalindrome = isPalindrome(s)

print(isPalindrome) # Output: True",Data Type,3563,"def isPalindrome(s):
 s = s.lower()
 
 left = 0
 right = len(s) - 1
 
 while left < right:
 if s[left] != s[right]:
 return False ___ += 1
 right -= 1
 
 return True

s = 'racecar'
isPalindrome = isPalindrome(s)

print(isPalindrome) # Output: True",left
Create a Python program to write a string in Reverse order,This is a Test string,"def reverse_string(input_string): 
    str = """" 
    for i in input_string: 
        str = i + str
    return str
  
if __name__ == ""__main__"": 
    input_string = ""This is a Test string""
    print(reverse_string(input_string))",Data Type,3657,"def reverse_string(input_string): 
    str = """" 
    for i in input_string: 
        str = i + str ___ str
  
if __name__ == ""__main__"": 
    input_string = ""This is a Test string""
    print(reverse_string(input_string))",return
Create a Python program to check for anagrams of a string.,"""listen"", ""silent""","def anagramCheck(str1, str2):
    if (len(str1) != len(str2)):
        return False

    str1 = sorted(str1)
    str2 = sorted (str2)

    # Compare each character in str1 with
    # each character in str2
    for i in range( len( str1 ) ):
        if (str1[i] != str2[i]):
            return False
 
    return True",Data Type,3706,"def anagramCheck(str1, str2):
    if (len(str1) != len(str2)):
        return False ___ = sorted(str1)
    str2 = sorted (str2)

    # Compare each character in str1 with
    # each character in str2
    for i in range( len( str1 ) ):
        if (str1[i] != str2[i]):
            return False
 
    return True",str1
Create an algorithm to detect a palindrome string in Python.,"String str = ""madam"";","def isPalindrome(str):
  left, right = 0, len(str) - 1
  while right >= left:
    if not str[left] == str[right]:
      return False
    left += 1
    right -= 1
  return True",Data Type,3824,"def isPalindrome(str):
  left, right = 0, len(str) - 1
  while right >= left:
    if not str[left] == str[right]:
      return False ___ += 1
    right -= 1
  return True",left
Write a python program to check if a given string contains all alphabetic characters.,"String: ""Hello World!""","def is_alpha(word): 
    if word.isalpha(): 
        return True 
    else: 
        return False",Data Type,3968,"def is_alpha(word): 
    if word.isalpha(): 
        return True ___: 
        return False",else
"Write a Python function that takes a string as input and returns true if the string starts with the letter ""a"".",String: awesome,"def starts_with_a(string):
    if string[0] == 'a':
        return True
    else:
        return False

result = starts_with_a('awesome')
print(result)",Data Type,4035,"def starts_with_a(string):
    if string[0] == 'a':
        return True ___:
        return False

result = starts_with_a('awesome')
print(result)",else
Generate a Python function that checks to see if a given string is a palindrome.,Input: madam,"def is_palindrome(str):
    reversed_str = """"
    for i in range(len(str) - 1, -1, -1): 
        reversed_str += str[i]

    if str == reversed_str: 
        return True
    else: 
        return False

string = ""madam""
result = is_palindrome(string)
print(result)",Data Type,4121,"def is_palindrome(str):
    reversed_str = """"
    for i in range(len(str) - 1, -1, -1): 
        reversed_str += str[i]

    if str == reversed_str: 
        return True ___: 
        return False

string = ""madam""
result = is_palindrome(string)
print(result)",else
Write a Python program that determines whether the given string is a palindrome.,"String: ""racecar""","def is_palindrome(string):
  if len(string) <= 1:
    return True
  else:
    letter_1 = string[0]
    letter_2 = string[-1]
    if letter_1 != letter_2:
      return False
    else:
      new_word = string[1:-1]
      return is_palindrome(new_word)",Data Type,4156,"def is_palindrome(string):
  if len(string) <= 1:
    return True ___:
    letter_1 = string[0]
    letter_2 = string[-1]
    if letter_1 != letter_2:
      return False
    else:
      new_word = string[1:-1]
      return is_palindrome(new_word)",else
Can you design a function in Python which takes two string arguments and checks that two strings are anagrams or not?,"s1 = ""restful""
s2 = ""fluster""","def is_anagram(str1, str2):
    if (len(str1) != len(str2)):
        return False
    
    list1 = sorted(list(str1)) 
    list2 = sorted(list(str2)) 
  
    for i in range(0, len(str1)): 
        if (list1[i] != list2[i]): 
            return False
  
    return True",Data Type,4189,"def is_anagram(str1, str2):
    if (len(str1) != len(str2)):
        return False ___ = sorted(list(str1)) 
    list2 = sorted(list(str2)) 
  
    for i in range(0, len(str1)): 
        if (list1[i] != list2[i]): 
            return False
  
    return True",list1
Take an input string and write a python program to determine if it is a palindrome.,racecar,"def isPalindrome(s):
 left, right = 0, len(s) - 1
 while left < right:
 if s[left] != s[right]:
 return False
 left += 1
 right -= 1
 return True

s = ""racecar""
print(isPalindrome(s))  # True",Data Type,4330,"def isPalindrome(s):
 left, right = 0, len(s) - 1
 while left < right:
 if s[left] != s[right]:
 return False ___ += 1
 right -= 1
 return True

s = ""racecar""
print(isPalindrome(s))  # True",left
Create a Python program to find out if a string contains any characters from another given string.,"String 1: Hello
String 2: eo","def contains_chars(str1, str2):
 if any([c in str1 for c in str2]):
 return True
 return False

string1 = ""Hello""
string2 = ""eo""

print(contains_chars(string1, string2)) // Outputs: True",Data Type,4348,"def contains_chars(str1, str2):
 if any([c in str1 for c in str2]):
 return True ___ False

string1 = ""Hello""
string2 = ""eo""

print(contains_chars(string1, string2)) // Outputs: True",return
Design an algorithm in Python to detect an anagram in a string.,"Input string: ""eat tea""","def isAnagram(string):
    for i in range(len(string)):
        for j in range(i + 1, len(string)):
            if sorted(string[i]) == sorted(string[j]):
                return True
    return False",Data Type,4393,"def isAnagram(string):
    for i in range(len(string)):
        for j in range(i + 1, len(string)):
            if sorted(string[i]) == sorted(string[j]):
                return True ___ False",return
Design a Python function to replace all occurrences of ‘x’ in a string with ‘y’.,"str = ""xx123xx456xx"", x = ""x"", y = ""y""","def replaceXWithY(str, x, y):
    while x in str:
        str = str.replace(x, y)
    return str

result = replaceXWithY(""xx123xx456xx"", ""x"", ""y"")
print(result)",Data Type,4394,"def replaceXWithY(str, x, y):
    while x in str:
        str = str.replace(x, y)
    return str ___ = replaceXWithY(""xx123xx456xx"", ""x"", ""y"")
print(result)",result
"Given the following code snippet, create a function in Python that takes two strings and returns true if one string is a substring of the other.","s1 = 'Hello World'
s2 = 'World'","def is_substring(s1, s2):
 # check for empty strings 
 if s1 == '' or s2 == '':
 return False
 
 # check if s2 is a substring of s1
 if s1.find(s2) > -1:
 return True
 
 return False",Data Type,4423,"def is_substring(s1, s2):
 # check for empty strings 
 if s1 == '' or s2 == '':
 return False
 
 # check if s2 is a substring of s1
 if s1.find(s2) > -1:
 return True ___ False",return
Detect the data type of a given string in Python.,"String: ""Hello World!""",str type,Data Type,4437,str ___,type
Create a python program to test if a given string is a palindrome,"str = ""level""","def is_palindrome(str):
    for i in range(len(str) // 2):
        if str[i] != str[-i - 1]:
            return False
    return True

# Test
result = is_palindrome(""level"")
print(result) # Output: True",Data Type,4614,"def is_palindrome(str):
    for i in range(len(str) // 2):
        if str[i] != str[-i - 1]:
            return False ___ True

# Test
result = is_palindrome(""level"")
print(result) # Output: True",return
Write a Python function to check if a given string is an anagram or not.,"str1 = ""listen"", str2 = ""silent""","def is_anagram(str1, str2): 
    if len(str1) != len(str2): 
        return False 
    str1 = sorted(str1.lower()) 
    str2 = sorted(str2.lower()) 
    return str1 == str2",Data Type,4658,"def is_anagram(str1, str2): 
    if len(str1) != len(str2): 
        return False ___ = sorted(str1.lower()) 
    str2 = sorted(str2.lower()) 
    return str1 == str2",str1
Create a function in Python that takes an input string and returns whether it is a palindrome.,"txt = ""madam""","def isPalindrome(txt):
    i = 0
    j = len(txt) - 1
    
    while i < j:
        if txt[i] != txt[j]:
            return False
        i += 1
        j -= 1
    
    return True

print(isPalindrome(txt)) // True",Data Type,4686,"def isPalindrome(txt):
    i = 0
    j = len(txt) - 1
    
    while i < j:
        if txt[i] != txt[j]:
            return False ___ += 1
        j -= 1
    
    return True

print(isPalindrome(txt)) // True",i
Implement a Python function that will take two strings and return true if the first string contains the second.,"query = ""catering""
word = ""cat""","def check_contains(query, word): 
    if query.find(word) != -1:
        return True
    return False

result = check_contains(query, word)",Data Type,4770,"def check_contains(query, word): 
    if query.find(word) != -1:
        return True ___ False

result = check_contains(query, word)",return
Optimize the following python code to search for a substring in a given string.,"String = “GeeksforGeeks”, Substring = “for”","def containsSubstring(str, sub):
    for i in range(len(str)-len(sub)+1):
        j = 0
        while j < len(sub) and sub[j] == str[i+j]:
            j += 1
        if j == len(sub):
            return True
    return False",Data Type,4939,"def containsSubstring(str, sub):
    for i in range(len(str)-len(sub)+1):
        j = 0
        while j < len(sub) and sub[j] == str[i+j]:
            j += 1
        if j == len(sub):
            return True ___ False",return
Write a function in Python to check whether a given string is in lower case or not.,String: ThisIsAnExample,"def is_lowercase(string):
    for character in string:
        if character != character.lower():
            return False
    return True",Data Type,4957,"def is_lowercase(string):
    for character in string:
        if character != character.lower():
            return False ___ True",return
"Create a function in Python to convert a hexadecimal string (e.g. ""0xBA"") to a binary string (e.g. ""10111010"").","""0xA2""","def hex_to_binary(hex_str):
    # convert hex to int 
    num = int(hex_str, 16)
    # convert int to binary string
    bin_str = bin(num)[2:]
    
    return bin_str

print(hex_to_binary(""0xA2""))
# Output: ""10100010""",Data Type,5095,"def hex_to_binary(hex_str):
    # convert hex to int ___ = int(hex_str, 16)
    # convert int to binary string
    bin_str = bin(num)[2:]
    
    return bin_str

print(hex_to_binary(""0xA2""))
# Output: ""10100010""",num
"Write a Python function that takes a string, checks if it is a palindrome and returns true or false.","""level""","def is_palindrome(string):
    rev_string = string[::-1]
    if string == rev_string:
        return True
    else:
        return False 

print(is_palindrome(""level""))",Data Type,5356,"def is_palindrome(string):
    rev_string = string[::-1]
    if string == rev_string:
        return True ___:
        return False 

print(is_palindrome(""level""))",else
Create a python script to identify if a given string is a valid IPv4 address or not.,String: 192.168.25.688,"def is_valid_ipv4(ip):
    parts = ip.split('.')
    if len(parts) != 4:
        return False
    for part in parts:
        if not part.isdigit():
            return False
        if int(part) < 0 or int(part) > 255:
            return False
    return True

print(is_valid_ipv4('192.168.25.688'))

Output: False",Data Type,5504,"def is_valid_ipv4(ip):
    parts = ip.split('.')
    if len(parts) != 4:
        return False ___ part in parts:
        if not part.isdigit():
            return False
        if int(part) < 0 or int(part) > 255:
            return False
    return True

print(is_valid_ipv4('192.168.25.688'))

Output: False",for
"Using a dictionary, write a program in Python to categorize each list item into a group of the same type.","items = [1, 2, ‘a’, ‘b’, 4, 5, ‘c’, ‘d’, 7, 8]","def categorize(items):
    groups = {
        'numbers': [],
        'strings': []
    }
    for item in items:
        if type(item) == int or type(item) == float:
            groups['numbers'].append(item)
        else:
            groups['strings'].append(item)
    return groups",Data Type,5603,"def categorize(items):
    groups = {
        'numbers': [],
        'strings': []
    }
    for item in items:
        if type(item) == int ___ type(item) == float:
            groups['numbers'].append(item)
        else:
            groups['strings'].append(item)
    return groups",or
Make a program to search for a given string in a list of strings.,"search_string = 'python'
list_of_strings = ['java', 'javascript', 'python', 'ruby']","def search_string(search_string, list_of_strings):
    for string in list_of_strings:
        if string == search_string:
            return True
    return False

result = search_string('python', ['java', 'javascript', 'python', 'ruby']) 
print(result)",Data Type,5613,"def search_string(search_string, list_of_strings):
    for string in list_of_strings:
        if string == search_string:
            return True ___ False

result = search_string('python', ['java', 'javascript', 'python', 'ruby']) 
print(result)",return
"Use Python to check whether a given string is a palindrome (e.g. ""abccba"" is a palindrome).",abcba,"def isPalindrome(string):
 if string == string[::-1]: # Check if string is the same backwards
return True
 else:
 return False

isPalindrome('abcba') # Output: True",Data Type,5670,"def isPalindrome(string):
 if string == string[::-1]: # Check if string is the same backwards
return True ___:
 return False

isPalindrome('abcba') # Output: True",else
Write a Python function to check if a given substring is contained in a string.,"String = ""This is an example""
SubString = ""ex""","def check_substring(String, SubString):
    if SubString in String : 
        return True
    else: 
        return False",Data Type,5686,"def check_substring(String, SubString):
    if SubString in String : 
        return True ___: 
        return False",else
Generate code to identify the type of data stored in a given variable in Python.,"val1 = [""Hello"", 10, 3.14]","# Identify the type of data stored in given variable

def identify_data_type(val):
    for item in val:
        data_type = type(item).__name__
        print(f""Data type of {item} is {data_type}"")

val1 = [""Hello"", 10, 3.14] 
identify_data_type(val1)

# Output
# Data type of Hello is str
# Data type of 10 is int
# Data type of 3.14 is float",Data Type,6110,"# Identify the type ___ data stored in given variable

def identify_data_type(val):
    for item in val:
        data_type = type(item).__name__
        print(f""Data type of {item} is {data_type}"")

val1 = [""Hello"", 10, 3.14] 
identify_data_type(val1)

# Output
# Data type of Hello is str
# Data type of 10 is int
# Data type of 3.14 is float",of
Write a function in Python to search for a character in a given string.,"String: “Hello”
Character: ‘l’","def serach_char(input_str, char):
  for char in input_str:
    if char == input_char:
      return True
  return False",Data Type,6200,"def serach_char(input_str, char):
  for char in input_str:
    if char == input_char:
      return True ___ False",return
Create a Python script that checks whether a given string is a palindrome.,"""malayalam""","def isPalindrome(str): 
    # Run loop from 0 to len/2 
    for i in range(0, len(str)//2): 
        if str[i] != str[len(str)-i-1]: 
            return False
    return True
  
# main
myStr = ""malayalam""

ans = isPalindrome(myStr) 
  
if ans: 
    print(""The given string is a palindrome"") 
else: 
    print(""The given string isn't a palindrome"")",Data Type,6240,"def isPalindrome(str): 
    # Run loop from 0 to len/2 
    for i in range(0, len(str)//2): 
        if str[i] != str[len(str)-i-1]: 
            return False ___ True
  
# main
myStr = ""malayalam""

ans = isPalindrome(myStr) 
  
if ans: 
    print(""The given string is a palindrome"") 
else: 
    print(""The given string isn't a palindrome"")",return
Create a python code to check if all characters are unique in a given string,string = 'abcdefeb',"def is_unique(string):
    chars = set()
    for char in string:
        if char in chars:
            return False
        else:
            chars.add(char)
    return True

print(is_unique(string))",Data Type,6413,"def is_unique(string):
    chars = set()
    for char in string:
        if char in chars:
            return False ___:
            chars.add(char)
    return True

print(is_unique(string))",else
Generate a python program to check if the string is a palindrome or not.,"string = ""madam""","def is_palindrom(string):
    reverse_string = string[::-1]
    if string == reverse_string:
        return True
    else:
        return False",Data Type,6504,"def is_palindrom(string):
    reverse_string = string[::-1]
    if string == reverse_string:
        return True ___:
        return False",else
Write a Python program to detect if a given string contains any of the given keywords.,"String: I love ice cream
Keywords: [""chocolate"", ""vanilla""]","def keyword_detector(string, keywords):
 for i in keywords:
 if i in string:
 return True
 return False

print(keyword_detector(""I love ice cream"", [""chocolate"", ""vanilla""]))",Data Type,6550,"def keyword_detector(string, keywords):
 for i in keywords:
 if i in string:
 return True ___ False

print(keyword_detector(""I love ice cream"", [""chocolate"", ""vanilla""]))",return
Create an algorithm in Python to check if a given string contains valid parentheses.,"""[[{{}}]]""","def isValid(s):
    stack = []
    dict = {""]"":""["", ""}"":""{"", "")"":""(""}
    for char in s:
        if char in dict.values():
            stack.append(char)
        elif char in dict.keys():
            if stack == [] or dict[char] != stack.pop():
                return False
        else:
            return False
    return stack == []

print(isValid('[[{{}}]]'))",Data Type,6551,"def isValid(s):
    stack = []
    dict = {""]"":""["", ""}"":""{"", "")"":""(""}
    for char in s:
        if char in dict.values():
            stack.append(char)
        elif char in dict.keys():
            if stack == [] or dict[char] != stack.pop():
                return False ___:
            return False
    return stack == []

print(isValid('[[{{}}]]'))",else
Create a Python program that takes a string and indicates whether it is a palindrome or not.,"""racecar""","def is_palindrome(s):
  s = s.lower()
  left = 0
  right = len(s) - 1
  
  while left < right:
    if s[left] != s[right]:
      return False
    left += 1
    right -= 1
  return True
  
print(is_palindrome(""racecar""))",Data Type,6596,"def is_palindrome(s):
  s = s.lower()
  left = 0
  right = len(s) - 1
  
  while left < right:
    if s[left] != s[right]:
      return False ___ += 1
    right -= 1
  return True
  
print(is_palindrome(""racecar""))",left
Please construct a function in Python that constructs and returns a dictionary containing all unique characters in a given string.,"Example String: ""missisippi""","def unique_characters(string):
    unique_chars = {}
    for char in string:
        if char in unique_chars:
            continue
        else:
            unique_chars[char] = True
    return unique_chars

result = unique_characters('missisippi')
print(result) # Output: {'m': True, 'i': True, 's': True, 'p': True}",Data Type,6727,"def unique_characters(string):
    unique_chars = {}
    for char in string:
        if char in unique_chars:
            continue
        else:
            unique_chars[char] = True ___ unique_chars

result = unique_characters('missisippi')
print(result) # Output: {'m': True, 'i': True, 's': True, 'p': True}",return
Create a Python function that takes two strings and checks if the second string is a substring of the first.,"string1 = ""Hello world!""
string2 = ""world""","def check_substring(string1, string2):
    if string2 in string1:
        return True
    else:
        return False

# example
result = check_substring(""Hello world!"", ""world"")
print(result)",Data Type,6789,"def check_substring(string1, string2):
    if string2 in string1:
        return True ___:
        return False

# example
result = check_substring(""Hello world!"", ""world"")
print(result)",else
Create a program to detect a palindrome string in Python.,"original_string = ""radar""","# Function to check if a string is a palindrome
def is_palindrome(original_string):  
    reversed_string = original_string[::-1]  
    if original_string == reversed_string:
        return True 
    else:
        return False  
  
# Print result
print(is_palindrome(original_string))",Data Type,6986,"# Function to check if a string is a palindrome
def is_palindrome(original_string):  
    reversed_string = original_string[::-1]  
    if original_string == reversed_string:
        return True ___:
        return False  
  
# Print result
print(is_palindrome(original_string))",else
"Write a Python program to accept user input as a string and check if the user input is a palindrome (a word, phrase, or sequence that reads the same backward as forward).","""radar""","input_word = input(""Enter a word: "")

def is_palindrome(word):
 word = word.lower()
 reversed_word = word[::-1]

 if reversed_word == word:
 return True
 else:
 return False

print(is_palindrome(input_word))
# Output: True",Data Type,7154,"input_word = input(""Enter a word: "")

def is_palindrome(word):
 word = word.lower()
 reversed_word = word[::-1]

 if reversed_word == word:
 return True ___:
 return False

print(is_palindrome(input_word))
# Output: True",else
Design a program in Python that takes a string as an input and checks whether all the vowels are present in the string or not.,This is a test,"def check_vowels(string):
    vowels = ['a','e','i','o','u']
    for vowel in vowels:
        if vowel not in string:
            return False
    return True

print(check_vowels('This is a test'))",Data Type,7285,"def check_vowels(string):
    vowels = ['a','e','i','o','u']
    for vowel in vowels:
        if vowel not in string:
            return False ___ True

print(check_vowels('This is a test'))",return
Identify the type of an expression in Python.,"x = ""Apple""",The expression x is of type string.,Data Type,7316,The expression x is of type ___.,string
Develop a Python algorithm to validate a given palindrome string.,"""level""","def isPalindrome(s):
    i = 0
    j = len(s) - 1
    while i < j:
        if s[i] != s[j]:
            return False
        i += 1
        j -= 1
    return True
  
# Driver code 
s = ""level""
  
if isPalindrome(s):
    print(""Yes"")
else:
    print(""No"")",Data Type,7432,"def isPalindrome(s):
    i = 0
    j = len(s) - 1
    while i < j:
        if s[i] != s[j]:
            return False ___ += 1
        j -= 1
    return True
  
# Driver code 
s = ""level""
  
if isPalindrome(s):
    print(""Yes"")
else:
    print(""No"")",i
Build an algorithm in Python to check if a string is a palindrome.,"""abccba""","def is_palindrome(str):
    # Get the length of the string
    n = len(str)

    for i in range(n//2):
        # Compare characters from both ends
        if str[i] != str[n-i-1]:
            return False
    return True

str = ""abccba""
print(is_palindrome(str))",Data Type,7503,"def is_palindrome(str):
    # Get the length of the string
    n = len(str)

    for i in range(n//2):
        # Compare characters from both ends
        if str[i] != str[n-i-1]:
            return False ___ True

str = ""abccba""
print(is_palindrome(str))",return
